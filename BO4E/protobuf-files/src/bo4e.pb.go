// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: bo4e.proto

package bo4e

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "protobuf-net"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AbgabeArt int32

const (
	AbgabeArt_KAS AbgabeArt = 0
	AbgabeArt_SA  AbgabeArt = 1
	AbgabeArt_SAS AbgabeArt = 2
	AbgabeArt_TA  AbgabeArt = 3
	AbgabeArt_TAS AbgabeArt = 4
	AbgabeArt_TK  AbgabeArt = 5
	AbgabeArt_TKS AbgabeArt = 6
	AbgabeArt_TS  AbgabeArt = 7
	AbgabeArt_TSS AbgabeArt = 8
)

// Enum value maps for AbgabeArt.
var (
	AbgabeArt_name = map[int32]string{
		0: "KAS",
		1: "SA",
		2: "SAS",
		3: "TA",
		4: "TAS",
		5: "TK",
		6: "TKS",
		7: "TS",
		8: "TSS",
	}
	AbgabeArt_value = map[string]int32{
		"KAS": 0,
		"SA":  1,
		"SAS": 2,
		"TA":  3,
		"TAS": 4,
		"TK":  5,
		"TKS": 6,
		"TS":  7,
		"TSS": 8,
	}
)

func (x AbgabeArt) Enum() *AbgabeArt {
	p := new(AbgabeArt)
	*p = x
	return p
}

func (x AbgabeArt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbgabeArt) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[0].Descriptor()
}

func (AbgabeArt) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[0]
}

func (x AbgabeArt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbgabeArt.Descriptor instead.
func (AbgabeArt) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{0}
}

type Angebotsstatus int32

const (
	Angebotsstatus_KONZEPTION               Angebotsstatus = 0
	Angebotsstatus_UNVERBINDLICH            Angebotsstatus = 1
	Angebotsstatus_VERBINDLICH              Angebotsstatus = 2
	Angebotsstatus_BEAUFTRAGT               Angebotsstatus = 3
	Angebotsstatus_UNGUELTIG                Angebotsstatus = 4
	Angebotsstatus_Angebotsstatus_ABGELEHNT Angebotsstatus = 5
	Angebotsstatus_NACHGEFASST              Angebotsstatus = 6
	Angebotsstatus_AUSSTEHEND               Angebotsstatus = 7
	Angebotsstatus_ERLEDIGT                 Angebotsstatus = 8
)

// Enum value maps for Angebotsstatus.
var (
	Angebotsstatus_name = map[int32]string{
		0: "KONZEPTION",
		1: "UNVERBINDLICH",
		2: "VERBINDLICH",
		3: "BEAUFTRAGT",
		4: "UNGUELTIG",
		5: "Angebotsstatus_ABGELEHNT",
		6: "NACHGEFASST",
		7: "AUSSTEHEND",
		8: "ERLEDIGT",
	}
	Angebotsstatus_value = map[string]int32{
		"KONZEPTION":               0,
		"UNVERBINDLICH":            1,
		"VERBINDLICH":              2,
		"BEAUFTRAGT":               3,
		"UNGUELTIG":                4,
		"Angebotsstatus_ABGELEHNT": 5,
		"NACHGEFASST":              6,
		"AUSSTEHEND":               7,
		"ERLEDIGT":                 8,
	}
)

func (x Angebotsstatus) Enum() *Angebotsstatus {
	p := new(Angebotsstatus)
	*p = x
	return p
}

func (x Angebotsstatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Angebotsstatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[1].Descriptor()
}

func (Angebotsstatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[1]
}

func (x Angebotsstatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Angebotsstatus.Descriptor instead.
func (Angebotsstatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{1}
}

type Anrede int32

const (
	Anrede_HERR                    Anrede = 0
	Anrede_FRAU                    Anrede = 1
	Anrede_EHELEUTE                Anrede = 2
	Anrede_FIRMA                   Anrede = 3
	Anrede_INDIVIDUELL             Anrede = 4
	Anrede_FAMILIE                 Anrede = 5
	Anrede_ERBENGEMEINSCHAFT       Anrede = 6
	Anrede_WOHNGEMEINSCHAFT        Anrede = 7
	Anrede_GRUNDSTUECKGEMEINSCHAFT Anrede = 8
	Anrede_Anrede_DR               Anrede = 9
)

// Enum value maps for Anrede.
var (
	Anrede_name = map[int32]string{
		0: "HERR",
		1: "FRAU",
		2: "EHELEUTE",
		3: "FIRMA",
		4: "INDIVIDUELL",
		5: "FAMILIE",
		6: "ERBENGEMEINSCHAFT",
		7: "WOHNGEMEINSCHAFT",
		8: "GRUNDSTUECKGEMEINSCHAFT",
		9: "Anrede_DR",
	}
	Anrede_value = map[string]int32{
		"HERR":                    0,
		"FRAU":                    1,
		"EHELEUTE":                2,
		"FIRMA":                   3,
		"INDIVIDUELL":             4,
		"FAMILIE":                 5,
		"ERBENGEMEINSCHAFT":       6,
		"WOHNGEMEINSCHAFT":        7,
		"GRUNDSTUECKGEMEINSCHAFT": 8,
		"Anrede_DR":               9,
	}
)

func (x Anrede) Enum() *Anrede {
	p := new(Anrede)
	*p = x
	return p
}

func (x Anrede) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Anrede) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[2].Descriptor()
}

func (Anrede) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[2]
}

func (x Anrede) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Anrede.Descriptor instead.
func (Anrede) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{2}
}

type ArithmetischeOperation int32

const (
	ArithmetischeOperation_ADDITION       ArithmetischeOperation = 0
	ArithmetischeOperation_SUBTRAKTION    ArithmetischeOperation = 1
	ArithmetischeOperation_MULTIPLIKATION ArithmetischeOperation = 2
	ArithmetischeOperation_DIVISION       ArithmetischeOperation = 3
)

// Enum value maps for ArithmetischeOperation.
var (
	ArithmetischeOperation_name = map[int32]string{
		0: "ADDITION",
		1: "SUBTRAKTION",
		2: "MULTIPLIKATION",
		3: "DIVISION",
	}
	ArithmetischeOperation_value = map[string]int32{
		"ADDITION":       0,
		"SUBTRAKTION":    1,
		"MULTIPLIKATION": 2,
		"DIVISION":       3,
	}
)

func (x ArithmetischeOperation) Enum() *ArithmetischeOperation {
	p := new(ArithmetischeOperation)
	*p = x
	return p
}

func (x ArithmetischeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArithmetischeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[3].Descriptor()
}

func (ArithmetischeOperation) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[3]
}

func (x ArithmetischeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArithmetischeOperation.Descriptor instead.
func (ArithmetischeOperation) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{3}
}

type AufAbschlagstyp int32

const (
	AufAbschlagstyp_RELATIV AufAbschlagstyp = 0
	AufAbschlagstyp_ABSOLUT AufAbschlagstyp = 1
)

// Enum value maps for AufAbschlagstyp.
var (
	AufAbschlagstyp_name = map[int32]string{
		0: "RELATIV",
		1: "ABSOLUT",
	}
	AufAbschlagstyp_value = map[string]int32{
		"RELATIV": 0,
		"ABSOLUT": 1,
	}
)

func (x AufAbschlagstyp) Enum() *AufAbschlagstyp {
	p := new(AufAbschlagstyp)
	*p = x
	return p
}

func (x AufAbschlagstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AufAbschlagstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[4].Descriptor()
}

func (AufAbschlagstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[4]
}

func (x AufAbschlagstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AufAbschlagstyp.Descriptor instead.
func (AufAbschlagstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{4}
}

type BDEWArtikelnummer int32

const (
	BDEWArtikelnummer_BDEWArtikelnummer_LEISTUNG                                   BDEWArtikelnummer = 0
	BDEWArtikelnummer_BDEWArtikelnummer_LEISTUNG_PAUSCHAL                          BDEWArtikelnummer = 1
	BDEWArtikelnummer_BDEWArtikelnummer_GRUNDPREIS                                 BDEWArtikelnummer = 2
	BDEWArtikelnummer_BDEWArtikelnummer_REGELENERGIE_ARBEIT                        BDEWArtikelnummer = 3
	BDEWArtikelnummer_BDEWArtikelnummer_REGELENERGIE_LEISTUNG                      BDEWArtikelnummer = 4
	BDEWArtikelnummer_BDEWArtikelnummer_NOTSTROMLIEFERUNG_ARBEIT                   BDEWArtikelnummer = 5
	BDEWArtikelnummer_BDEWArtikelnummer_NOTSTROMLIEFERUNG_LEISTUNG                 BDEWArtikelnummer = 6
	BDEWArtikelnummer_BDEWArtikelnummer_RESERVENETZKAPAZITAET                      BDEWArtikelnummer = 7
	BDEWArtikelnummer_BDEWArtikelnummer_RESERVELEISTUNG                            BDEWArtikelnummer = 8
	BDEWArtikelnummer_BDEWArtikelnummer_ZUSAETZLICHE_ABLESUNG                      BDEWArtikelnummer = 9
	BDEWArtikelnummer_BDEWArtikelnummer_PRUEFGEBUEHREN_AUSSERPLANMAESSIG           BDEWArtikelnummer = 10
	BDEWArtikelnummer_BDEWArtikelnummer_WIRKARBEIT                                 BDEWArtikelnummer = 11
	BDEWArtikelnummer_BDEWArtikelnummer_SINGULAER_GENUTZTE_BETRIEBSMITTEL          BDEWArtikelnummer = 12
	BDEWArtikelnummer_BDEWArtikelnummer_ABGABE_KWKG                                BDEWArtikelnummer = 13
	BDEWArtikelnummer_BDEWArtikelnummer_ABSCHLAG                                   BDEWArtikelnummer = 14
	BDEWArtikelnummer_BDEWArtikelnummer_KONZESSIONSABGABE                          BDEWArtikelnummer = 15
	BDEWArtikelnummer_BDEWArtikelnummer_ENTGELT_FERNAUSLESUNG                      BDEWArtikelnummer = 16
	BDEWArtikelnummer_BDEWArtikelnummer_UNTERMESSUNG                               BDEWArtikelnummer = 17
	BDEWArtikelnummer_BDEWArtikelnummer_BLINDMEHRARBEIT                            BDEWArtikelnummer = 18
	BDEWArtikelnummer_BDEWArtikelnummer_ENTGELT_ABRECHNUNG                         BDEWArtikelnummer = 19
	BDEWArtikelnummer_BDEWArtikelnummer_SPERRKOSTEN                                BDEWArtikelnummer = 20
	BDEWArtikelnummer_BDEWArtikelnummer_ENTSPERRKOSTEN                             BDEWArtikelnummer = 21
	BDEWArtikelnummer_BDEWArtikelnummer_MAHNKOSTEN                                 BDEWArtikelnummer = 22
	BDEWArtikelnummer_BDEWArtikelnummer_MEHR_MINDERMENGEN                          BDEWArtikelnummer = 23
	BDEWArtikelnummer_BDEWArtikelnummer_INKASSOKOSTEN                              BDEWArtikelnummer = 24
	BDEWArtikelnummer_BDEWArtikelnummer_BLINDMEHRLEISTUNG                          BDEWArtikelnummer = 25
	BDEWArtikelnummer_BDEWArtikelnummer_ENTGELT_MESSUNG_ABLESUNG                   BDEWArtikelnummer = 26
	BDEWArtikelnummer_BDEWArtikelnummer_ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK BDEWArtikelnummer = 27
	BDEWArtikelnummer_BDEWArtikelnummer_AUSGLEICHSENERGIE                          BDEWArtikelnummer = 28
	BDEWArtikelnummer_BDEWArtikelnummer_ZAEHLEINRICHTUNG                           BDEWArtikelnummer = 29
	BDEWArtikelnummer_BDEWArtikelnummer_WANDLER_MENGENUMWERTER                     BDEWArtikelnummer = 30
	BDEWArtikelnummer_BDEWArtikelnummer_KOMMUNIKATIONSEINRICHTUNG                  BDEWArtikelnummer = 31
	BDEWArtikelnummer_BDEWArtikelnummer_TECHNISCHE_STEUEREINRICHTUNG               BDEWArtikelnummer = 32
	BDEWArtikelnummer_BDEWArtikelnummer_PARAGRAF_19_STROM_NEV_UMLAGE               BDEWArtikelnummer = 33
	BDEWArtikelnummer_BDEWArtikelnummer_BEFESTIGUNGSEINRICHTUNG                    BDEWArtikelnummer = 34
	BDEWArtikelnummer_BDEWArtikelnummer_OFFSHORE_HAFTUNGSUMLAGE                    BDEWArtikelnummer = 35
	BDEWArtikelnummer_BDEWArtikelnummer_FIXE_ARBEITSENTGELTKOMPONENTE              BDEWArtikelnummer = 36
	BDEWArtikelnummer_BDEWArtikelnummer_FIXE_LEISTUNGSENTGELTKOMPONENTE            BDEWArtikelnummer = 37
	BDEWArtikelnummer_BDEWArtikelnummer_UMLAGE_ABSCHALTBARE_LASTEN                 BDEWArtikelnummer = 38
	BDEWArtikelnummer_BDEWArtikelnummer_MEHRMENGE                                  BDEWArtikelnummer = 39
	BDEWArtikelnummer_BDEWArtikelnummer_MINDERMENGE                                BDEWArtikelnummer = 40
	BDEWArtikelnummer_BDEWArtikelnummer_ENERGIESTEUER                              BDEWArtikelnummer = 41
	BDEWArtikelnummer_BDEWArtikelnummer_SMARTMETER_GATEWAY                         BDEWArtikelnummer = 42
	BDEWArtikelnummer_BDEWArtikelnummer_STEUERBOX                                  BDEWArtikelnummer = 43
	BDEWArtikelnummer_BDEWArtikelnummer_MSB_INKL_MESSUNG                           BDEWArtikelnummer = 44
)

// Enum value maps for BDEWArtikelnummer.
var (
	BDEWArtikelnummer_name = map[int32]string{
		0:  "BDEWArtikelnummer_LEISTUNG",
		1:  "BDEWArtikelnummer_LEISTUNG_PAUSCHAL",
		2:  "BDEWArtikelnummer_GRUNDPREIS",
		3:  "BDEWArtikelnummer_REGELENERGIE_ARBEIT",
		4:  "BDEWArtikelnummer_REGELENERGIE_LEISTUNG",
		5:  "BDEWArtikelnummer_NOTSTROMLIEFERUNG_ARBEIT",
		6:  "BDEWArtikelnummer_NOTSTROMLIEFERUNG_LEISTUNG",
		7:  "BDEWArtikelnummer_RESERVENETZKAPAZITAET",
		8:  "BDEWArtikelnummer_RESERVELEISTUNG",
		9:  "BDEWArtikelnummer_ZUSAETZLICHE_ABLESUNG",
		10: "BDEWArtikelnummer_PRUEFGEBUEHREN_AUSSERPLANMAESSIG",
		11: "BDEWArtikelnummer_WIRKARBEIT",
		12: "BDEWArtikelnummer_SINGULAER_GENUTZTE_BETRIEBSMITTEL",
		13: "BDEWArtikelnummer_ABGABE_KWKG",
		14: "BDEWArtikelnummer_ABSCHLAG",
		15: "BDEWArtikelnummer_KONZESSIONSABGABE",
		16: "BDEWArtikelnummer_ENTGELT_FERNAUSLESUNG",
		17: "BDEWArtikelnummer_UNTERMESSUNG",
		18: "BDEWArtikelnummer_BLINDMEHRARBEIT",
		19: "BDEWArtikelnummer_ENTGELT_ABRECHNUNG",
		20: "BDEWArtikelnummer_SPERRKOSTEN",
		21: "BDEWArtikelnummer_ENTSPERRKOSTEN",
		22: "BDEWArtikelnummer_MAHNKOSTEN",
		23: "BDEWArtikelnummer_MEHR_MINDERMENGEN",
		24: "BDEWArtikelnummer_INKASSOKOSTEN",
		25: "BDEWArtikelnummer_BLINDMEHRLEISTUNG",
		26: "BDEWArtikelnummer_ENTGELT_MESSUNG_ABLESUNG",
		27: "BDEWArtikelnummer_ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK",
		28: "BDEWArtikelnummer_AUSGLEICHSENERGIE",
		29: "BDEWArtikelnummer_ZAEHLEINRICHTUNG",
		30: "BDEWArtikelnummer_WANDLER_MENGENUMWERTER",
		31: "BDEWArtikelnummer_KOMMUNIKATIONSEINRICHTUNG",
		32: "BDEWArtikelnummer_TECHNISCHE_STEUEREINRICHTUNG",
		33: "BDEWArtikelnummer_PARAGRAF_19_STROM_NEV_UMLAGE",
		34: "BDEWArtikelnummer_BEFESTIGUNGSEINRICHTUNG",
		35: "BDEWArtikelnummer_OFFSHORE_HAFTUNGSUMLAGE",
		36: "BDEWArtikelnummer_FIXE_ARBEITSENTGELTKOMPONENTE",
		37: "BDEWArtikelnummer_FIXE_LEISTUNGSENTGELTKOMPONENTE",
		38: "BDEWArtikelnummer_UMLAGE_ABSCHALTBARE_LASTEN",
		39: "BDEWArtikelnummer_MEHRMENGE",
		40: "BDEWArtikelnummer_MINDERMENGE",
		41: "BDEWArtikelnummer_ENERGIESTEUER",
		42: "BDEWArtikelnummer_SMARTMETER_GATEWAY",
		43: "BDEWArtikelnummer_STEUERBOX",
		44: "BDEWArtikelnummer_MSB_INKL_MESSUNG",
	}
	BDEWArtikelnummer_value = map[string]int32{
		"BDEWArtikelnummer_LEISTUNG":                                   0,
		"BDEWArtikelnummer_LEISTUNG_PAUSCHAL":                          1,
		"BDEWArtikelnummer_GRUNDPREIS":                                 2,
		"BDEWArtikelnummer_REGELENERGIE_ARBEIT":                        3,
		"BDEWArtikelnummer_REGELENERGIE_LEISTUNG":                      4,
		"BDEWArtikelnummer_NOTSTROMLIEFERUNG_ARBEIT":                   5,
		"BDEWArtikelnummer_NOTSTROMLIEFERUNG_LEISTUNG":                 6,
		"BDEWArtikelnummer_RESERVENETZKAPAZITAET":                      7,
		"BDEWArtikelnummer_RESERVELEISTUNG":                            8,
		"BDEWArtikelnummer_ZUSAETZLICHE_ABLESUNG":                      9,
		"BDEWArtikelnummer_PRUEFGEBUEHREN_AUSSERPLANMAESSIG":           10,
		"BDEWArtikelnummer_WIRKARBEIT":                                 11,
		"BDEWArtikelnummer_SINGULAER_GENUTZTE_BETRIEBSMITTEL":          12,
		"BDEWArtikelnummer_ABGABE_KWKG":                                13,
		"BDEWArtikelnummer_ABSCHLAG":                                   14,
		"BDEWArtikelnummer_KONZESSIONSABGABE":                          15,
		"BDEWArtikelnummer_ENTGELT_FERNAUSLESUNG":                      16,
		"BDEWArtikelnummer_UNTERMESSUNG":                               17,
		"BDEWArtikelnummer_BLINDMEHRARBEIT":                            18,
		"BDEWArtikelnummer_ENTGELT_ABRECHNUNG":                         19,
		"BDEWArtikelnummer_SPERRKOSTEN":                                20,
		"BDEWArtikelnummer_ENTSPERRKOSTEN":                             21,
		"BDEWArtikelnummer_MAHNKOSTEN":                                 22,
		"BDEWArtikelnummer_MEHR_MINDERMENGEN":                          23,
		"BDEWArtikelnummer_INKASSOKOSTEN":                              24,
		"BDEWArtikelnummer_BLINDMEHRLEISTUNG":                          25,
		"BDEWArtikelnummer_ENTGELT_MESSUNG_ABLESUNG":                   26,
		"BDEWArtikelnummer_ENTGELT_EINBAU_BETRIEB_WARTUNG_MESSTECHNIK": 27,
		"BDEWArtikelnummer_AUSGLEICHSENERGIE":                          28,
		"BDEWArtikelnummer_ZAEHLEINRICHTUNG":                           29,
		"BDEWArtikelnummer_WANDLER_MENGENUMWERTER":                     30,
		"BDEWArtikelnummer_KOMMUNIKATIONSEINRICHTUNG":                  31,
		"BDEWArtikelnummer_TECHNISCHE_STEUEREINRICHTUNG":               32,
		"BDEWArtikelnummer_PARAGRAF_19_STROM_NEV_UMLAGE":               33,
		"BDEWArtikelnummer_BEFESTIGUNGSEINRICHTUNG":                    34,
		"BDEWArtikelnummer_OFFSHORE_HAFTUNGSUMLAGE":                    35,
		"BDEWArtikelnummer_FIXE_ARBEITSENTGELTKOMPONENTE":              36,
		"BDEWArtikelnummer_FIXE_LEISTUNGSENTGELTKOMPONENTE":            37,
		"BDEWArtikelnummer_UMLAGE_ABSCHALTBARE_LASTEN":                 38,
		"BDEWArtikelnummer_MEHRMENGE":                                  39,
		"BDEWArtikelnummer_MINDERMENGE":                                40,
		"BDEWArtikelnummer_ENERGIESTEUER":                              41,
		"BDEWArtikelnummer_SMARTMETER_GATEWAY":                         42,
		"BDEWArtikelnummer_STEUERBOX":                                  43,
		"BDEWArtikelnummer_MSB_INKL_MESSUNG":                           44,
	}
)

func (x BDEWArtikelnummer) Enum() *BDEWArtikelnummer {
	p := new(BDEWArtikelnummer)
	*p = x
	return p
}

func (x BDEWArtikelnummer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BDEWArtikelnummer) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[5].Descriptor()
}

func (BDEWArtikelnummer) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[5]
}

func (x BDEWArtikelnummer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BDEWArtikelnummer.Descriptor instead.
func (BDEWArtikelnummer) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{5}
}

type Bearbeitungsstatus int32

const (
	Bearbeitungsstatus_OFFEN          Bearbeitungsstatus = 0
	Bearbeitungsstatus_IN_BEARBEITUNG Bearbeitungsstatus = 1
	Bearbeitungsstatus_ABGESCHLOSSEN  Bearbeitungsstatus = 2
	Bearbeitungsstatus_STORNIERT      Bearbeitungsstatus = 3
	Bearbeitungsstatus_QUITTIERT      Bearbeitungsstatus = 4
	Bearbeitungsstatus_IGNORIERT      Bearbeitungsstatus = 5
)

// Enum value maps for Bearbeitungsstatus.
var (
	Bearbeitungsstatus_name = map[int32]string{
		0: "OFFEN",
		1: "IN_BEARBEITUNG",
		2: "ABGESCHLOSSEN",
		3: "STORNIERT",
		4: "QUITTIERT",
		5: "IGNORIERT",
	}
	Bearbeitungsstatus_value = map[string]int32{
		"OFFEN":          0,
		"IN_BEARBEITUNG": 1,
		"ABGESCHLOSSEN":  2,
		"STORNIERT":      3,
		"QUITTIERT":      4,
		"IGNORIERT":      5,
	}
)

func (x Bearbeitungsstatus) Enum() *Bearbeitungsstatus {
	p := new(Bearbeitungsstatus)
	*p = x
	return p
}

func (x Bearbeitungsstatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bearbeitungsstatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[6].Descriptor()
}

func (Bearbeitungsstatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[6]
}

func (x Bearbeitungsstatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bearbeitungsstatus.Descriptor instead.
func (Bearbeitungsstatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{6}
}

type Bemessungsgroesse int32

const (
	Bemessungsgroesse_Bemessungsgroesse_WIRKARBEIT_EL     Bemessungsgroesse = 0
	Bemessungsgroesse_Bemessungsgroesse_LEISTUNG_EL       Bemessungsgroesse = 1
	Bemessungsgroesse_Bemessungsgroesse_BLINDARBEIT_KAP   Bemessungsgroesse = 2
	Bemessungsgroesse_Bemessungsgroesse_BLINDARBEIT_IND   Bemessungsgroesse = 3
	Bemessungsgroesse_Bemessungsgroesse_BLINDLEISTUNG_KAP Bemessungsgroesse = 4
	Bemessungsgroesse_Bemessungsgroesse_BLINDLEISTUNG_IND Bemessungsgroesse = 5
	Bemessungsgroesse_Bemessungsgroesse_WIRKARBEIT_TH     Bemessungsgroesse = 6
	Bemessungsgroesse_Bemessungsgroesse_LEISTUNG_TH       Bemessungsgroesse = 7
	Bemessungsgroesse_Bemessungsgroesse_VOLUMEN           Bemessungsgroesse = 8
	Bemessungsgroesse_Bemessungsgroesse_VOLUMENSTROM      Bemessungsgroesse = 9
	Bemessungsgroesse_Bemessungsgroesse_BENUTZUNGSDAUER   Bemessungsgroesse = 10
	Bemessungsgroesse_Bemessungsgroesse_ANZAHL            Bemessungsgroesse = 11
)

// Enum value maps for Bemessungsgroesse.
var (
	Bemessungsgroesse_name = map[int32]string{
		0:  "Bemessungsgroesse_WIRKARBEIT_EL",
		1:  "Bemessungsgroesse_LEISTUNG_EL",
		2:  "Bemessungsgroesse_BLINDARBEIT_KAP",
		3:  "Bemessungsgroesse_BLINDARBEIT_IND",
		4:  "Bemessungsgroesse_BLINDLEISTUNG_KAP",
		5:  "Bemessungsgroesse_BLINDLEISTUNG_IND",
		6:  "Bemessungsgroesse_WIRKARBEIT_TH",
		7:  "Bemessungsgroesse_LEISTUNG_TH",
		8:  "Bemessungsgroesse_VOLUMEN",
		9:  "Bemessungsgroesse_VOLUMENSTROM",
		10: "Bemessungsgroesse_BENUTZUNGSDAUER",
		11: "Bemessungsgroesse_ANZAHL",
	}
	Bemessungsgroesse_value = map[string]int32{
		"Bemessungsgroesse_WIRKARBEIT_EL":     0,
		"Bemessungsgroesse_LEISTUNG_EL":       1,
		"Bemessungsgroesse_BLINDARBEIT_KAP":   2,
		"Bemessungsgroesse_BLINDARBEIT_IND":   3,
		"Bemessungsgroesse_BLINDLEISTUNG_KAP": 4,
		"Bemessungsgroesse_BLINDLEISTUNG_IND": 5,
		"Bemessungsgroesse_WIRKARBEIT_TH":     6,
		"Bemessungsgroesse_LEISTUNG_TH":       7,
		"Bemessungsgroesse_VOLUMEN":           8,
		"Bemessungsgroesse_VOLUMENSTROM":      9,
		"Bemessungsgroesse_BENUTZUNGSDAUER":   10,
		"Bemessungsgroesse_ANZAHL":            11,
	}
)

func (x Bemessungsgroesse) Enum() *Bemessungsgroesse {
	p := new(Bemessungsgroesse)
	*p = x
	return p
}

func (x Bemessungsgroesse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bemessungsgroesse) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[7].Descriptor()
}

func (Bemessungsgroesse) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[7]
}

func (x Bemessungsgroesse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bemessungsgroesse.Descriptor instead.
func (Bemessungsgroesse) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{7}
}

type Bilanzierungsmethode int32

const (
	Bilanzierungsmethode_Bilanzierungsmethode_RLM           Bilanzierungsmethode = 0
	Bilanzierungsmethode_Bilanzierungsmethode_SLP           Bilanzierungsmethode = 1
	Bilanzierungsmethode_Bilanzierungsmethode_TLP_GEMEINSAM Bilanzierungsmethode = 2
	Bilanzierungsmethode_Bilanzierungsmethode_TLP_GETRENNT  Bilanzierungsmethode = 3
	Bilanzierungsmethode_Bilanzierungsmethode_PAUSCHAL      Bilanzierungsmethode = 4
	Bilanzierungsmethode_Bilanzierungsmethode_IMS           Bilanzierungsmethode = 5
)

// Enum value maps for Bilanzierungsmethode.
var (
	Bilanzierungsmethode_name = map[int32]string{
		0: "Bilanzierungsmethode_RLM",
		1: "Bilanzierungsmethode_SLP",
		2: "Bilanzierungsmethode_TLP_GEMEINSAM",
		3: "Bilanzierungsmethode_TLP_GETRENNT",
		4: "Bilanzierungsmethode_PAUSCHAL",
		5: "Bilanzierungsmethode_IMS",
	}
	Bilanzierungsmethode_value = map[string]int32{
		"Bilanzierungsmethode_RLM":           0,
		"Bilanzierungsmethode_SLP":           1,
		"Bilanzierungsmethode_TLP_GEMEINSAM": 2,
		"Bilanzierungsmethode_TLP_GETRENNT":  3,
		"Bilanzierungsmethode_PAUSCHAL":      4,
		"Bilanzierungsmethode_IMS":           5,
	}
)

func (x Bilanzierungsmethode) Enum() *Bilanzierungsmethode {
	p := new(Bilanzierungsmethode)
	*p = x
	return p
}

func (x Bilanzierungsmethode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bilanzierungsmethode) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[8].Descriptor()
}

func (Bilanzierungsmethode) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[8]
}

func (x Bilanzierungsmethode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bilanzierungsmethode.Descriptor instead.
func (Bilanzierungsmethode) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{8}
}

type Dienstleistungstyp int32

const (
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_TAEGLICH                Dienstleistungstyp = 0
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_WOECHENTLICH            Dienstleistungstyp = 1
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH               Dienstleistungstyp = 2
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_JAEHRLICH               Dienstleistungstyp = 3
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_HISTORISCHE_LG          Dienstleistungstyp = 4
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_STUENDLICH              Dienstleistungstyp = 5
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_VIERTELJAEHRLICH        Dienstleistungstyp = 6
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_HALBJAEHRLICH           Dienstleistungstyp = 7
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH   Dienstleistungstyp = 8
	Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_EINMALIG                Dienstleistungstyp = 9
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG         Dienstleistungstyp = 10
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_TAEGLICH_FERNAUSLESUNG            Dienstleistungstyp = 11
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_LGK_MANUELL_MSB                   Dienstleistungstyp = 12
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_MONATLICH_SLP_FERNAUSLESUNG       Dienstleistungstyp = 13
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_JAEHRLICH_SLP_FERNAUSLESUNG       Dienstleistungstyp = 14
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_MDE_SLP                           Dienstleistungstyp = 15
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_MONATLICH_SLP                      Dienstleistungstyp = 16
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_VIERTELJAEHRLICH_SLP               Dienstleistungstyp = 17
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_HALBJAEHRLICH_SLP                  Dienstleistungstyp = 18
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_JAEHRLICH_SLP                      Dienstleistungstyp = 19
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_SLP_FERNAUSLESUNG                 Dienstleistungstyp = 20
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_MSB                Dienstleistungstyp = 21
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_KUNDE              Dienstleistungstyp = 22
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_LGK_FERNAUSLESUNG_ZUSAETZLICH_MSB Dienstleistungstyp = 23
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_MOATLICH_FERNAUSLESUNG            Dienstleistungstyp = 24
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_STUENDLICH_FERNAUSLESUNG          Dienstleistungstyp = 25
	Dienstleistungstyp_Dienstleistungstyp_ABLESUNG_MONATLICH_LGK                      Dienstleistungstyp = 26
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_TEMERATURMENGENUMWERTER           Dienstleistungstyp = 27
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_ZUSTANDSMENGENUMWERTER            Dienstleistungstyp = 28
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_SYSTEMMENGENUMWERTER              Dienstleistungstyp = 29
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_VORGANG_SLP                       Dienstleistungstyp = 30
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUUNG_KOMPAKTMENGENUMWERTER            Dienstleistungstyp = 31
	Dienstleistungstyp_Dienstleistungstyp_AUSLESUNG_MDE_LGK                           Dienstleistungstyp = 32
	Dienstleistungstyp_Dienstleistungstyp_SPERRUNG_SLP                                Dienstleistungstyp = 33
	Dienstleistungstyp_Dienstleistungstyp_ENTSPERRUNG_SLP                             Dienstleistungstyp = 34
	Dienstleistungstyp_Dienstleistungstyp_SPERRUNG_RLM                                Dienstleistungstyp = 35
	Dienstleistungstyp_Dienstleistungstyp_ENTSPERRUNG_RLM                             Dienstleistungstyp = 36
	Dienstleistungstyp_Dienstleistungstyp_MAHNKOSTEN                                  Dienstleistungstyp = 37
	Dienstleistungstyp_Dienstleistungstyp_INKASSOKOSTEN                               Dienstleistungstyp = 38
)

// Enum value maps for Dienstleistungstyp.
var (
	Dienstleistungstyp_name = map[int32]string{
		0:  "Dienstleistungstyp_DATENBEREITSTELLUNG_TAEGLICH",
		1:  "Dienstleistungstyp_DATENBEREITSTELLUNG_WOECHENTLICH",
		2:  "Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH",
		3:  "Dienstleistungstyp_DATENBEREITSTELLUNG_JAEHRLICH",
		4:  "Dienstleistungstyp_DATENBEREITSTELLUNG_HISTORISCHE_LG",
		5:  "Dienstleistungstyp_DATENBEREITSTELLUNG_STUENDLICH",
		6:  "Dienstleistungstyp_DATENBEREITSTELLUNG_VIERTELJAEHRLICH",
		7:  "Dienstleistungstyp_DATENBEREITSTELLUNG_HALBJAEHRLICH",
		8:  "Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH",
		9:  "Dienstleistungstyp_DATENBEREITSTELLUNG_EINMALIG",
		10: "Dienstleistungstyp_AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG",
		11: "Dienstleistungstyp_AUSLESUNG_TAEGLICH_FERNAUSLESUNG",
		12: "Dienstleistungstyp_AUSLESUNG_LGK_MANUELL_MSB",
		13: "Dienstleistungstyp_AUSLESUNG_MONATLICH_SLP_FERNAUSLESUNG",
		14: "Dienstleistungstyp_AUSLESUNG_JAEHRLICH_SLP_FERNAUSLESUNG",
		15: "Dienstleistungstyp_AUSLESUNG_MDE_SLP",
		16: "Dienstleistungstyp_ABLESUNG_MONATLICH_SLP",
		17: "Dienstleistungstyp_ABLESUNG_VIERTELJAEHRLICH_SLP",
		18: "Dienstleistungstyp_ABLESUNG_HALBJAEHRLICH_SLP",
		19: "Dienstleistungstyp_ABLESUNG_JAEHRLICH_SLP",
		20: "Dienstleistungstyp_AUSLESUNG_SLP_FERNAUSLESUNG",
		21: "Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_MSB",
		22: "Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_KUNDE",
		23: "Dienstleistungstyp_AUSLESUNG_LGK_FERNAUSLESUNG_ZUSAETZLICH_MSB",
		24: "Dienstleistungstyp_AUSLESUNG_MOATLICH_FERNAUSLESUNG",
		25: "Dienstleistungstyp_AUSLESUNG_STUENDLICH_FERNAUSLESUNG",
		26: "Dienstleistungstyp_ABLESUNG_MONATLICH_LGK",
		27: "Dienstleistungstyp_AUSLESUNG_TEMERATURMENGENUMWERTER",
		28: "Dienstleistungstyp_AUSLESUNG_ZUSTANDSMENGENUMWERTER",
		29: "Dienstleistungstyp_AUSLESUNG_SYSTEMMENGENUMWERTER",
		30: "Dienstleistungstyp_AUSLESUNG_VORGANG_SLP",
		31: "Dienstleistungstyp_AUSLESUUNG_KOMPAKTMENGENUMWERTER",
		32: "Dienstleistungstyp_AUSLESUNG_MDE_LGK",
		33: "Dienstleistungstyp_SPERRUNG_SLP",
		34: "Dienstleistungstyp_ENTSPERRUNG_SLP",
		35: "Dienstleistungstyp_SPERRUNG_RLM",
		36: "Dienstleistungstyp_ENTSPERRUNG_RLM",
		37: "Dienstleistungstyp_MAHNKOSTEN",
		38: "Dienstleistungstyp_INKASSOKOSTEN",
	}
	Dienstleistungstyp_value = map[string]int32{
		"Dienstleistungstyp_DATENBEREITSTELLUNG_TAEGLICH":                0,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_WOECHENTLICH":            1,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH":               2,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_JAEHRLICH":               3,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_HISTORISCHE_LG":          4,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_STUENDLICH":              5,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_VIERTELJAEHRLICH":        6,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_HALBJAEHRLICH":           7,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_MONATLICH_ZUSAETZLICH":   8,
		"Dienstleistungstyp_DATENBEREITSTELLUNG_EINMALIG":                9,
		"Dienstleistungstyp_AUSLESUNG_2X_TAEGLICH_FERNAUSLESUNG":         10,
		"Dienstleistungstyp_AUSLESUNG_TAEGLICH_FERNAUSLESUNG":            11,
		"Dienstleistungstyp_AUSLESUNG_LGK_MANUELL_MSB":                   12,
		"Dienstleistungstyp_AUSLESUNG_MONATLICH_SLP_FERNAUSLESUNG":       13,
		"Dienstleistungstyp_AUSLESUNG_JAEHRLICH_SLP_FERNAUSLESUNG":       14,
		"Dienstleistungstyp_AUSLESUNG_MDE_SLP":                           15,
		"Dienstleistungstyp_ABLESUNG_MONATLICH_SLP":                      16,
		"Dienstleistungstyp_ABLESUNG_VIERTELJAEHRLICH_SLP":               17,
		"Dienstleistungstyp_ABLESUNG_HALBJAEHRLICH_SLP":                  18,
		"Dienstleistungstyp_ABLESUNG_JAEHRLICH_SLP":                      19,
		"Dienstleistungstyp_AUSLESUNG_SLP_FERNAUSLESUNG":                 20,
		"Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_MSB":                21,
		"Dienstleistungstyp_ABLESUNG_SLP_ZUSAETZLICH_KUNDE":              22,
		"Dienstleistungstyp_AUSLESUNG_LGK_FERNAUSLESUNG_ZUSAETZLICH_MSB": 23,
		"Dienstleistungstyp_AUSLESUNG_MOATLICH_FERNAUSLESUNG":            24,
		"Dienstleistungstyp_AUSLESUNG_STUENDLICH_FERNAUSLESUNG":          25,
		"Dienstleistungstyp_ABLESUNG_MONATLICH_LGK":                      26,
		"Dienstleistungstyp_AUSLESUNG_TEMERATURMENGENUMWERTER":           27,
		"Dienstleistungstyp_AUSLESUNG_ZUSTANDSMENGENUMWERTER":            28,
		"Dienstleistungstyp_AUSLESUNG_SYSTEMMENGENUMWERTER":              29,
		"Dienstleistungstyp_AUSLESUNG_VORGANG_SLP":                       30,
		"Dienstleistungstyp_AUSLESUUNG_KOMPAKTMENGENUMWERTER":            31,
		"Dienstleistungstyp_AUSLESUNG_MDE_LGK":                           32,
		"Dienstleistungstyp_SPERRUNG_SLP":                                33,
		"Dienstleistungstyp_ENTSPERRUNG_SLP":                             34,
		"Dienstleistungstyp_SPERRUNG_RLM":                                35,
		"Dienstleistungstyp_ENTSPERRUNG_RLM":                             36,
		"Dienstleistungstyp_MAHNKOSTEN":                                  37,
		"Dienstleistungstyp_INKASSOKOSTEN":                               38,
	}
)

func (x Dienstleistungstyp) Enum() *Dienstleistungstyp {
	p := new(Dienstleistungstyp)
	*p = x
	return p
}

func (x Dienstleistungstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Dienstleistungstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[9].Descriptor()
}

func (Dienstleistungstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[9]
}

func (x Dienstleistungstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Dienstleistungstyp.Descriptor instead.
func (Dienstleistungstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{9}
}

type Energierichtung int32

const (
	Energierichtung_AUSSP Energierichtung = 0
	Energierichtung_EINSP Energierichtung = 1
)

// Enum value maps for Energierichtung.
var (
	Energierichtung_name = map[int32]string{
		0: "AUSSP",
		1: "EINSP",
	}
	Energierichtung_value = map[string]int32{
		"AUSSP": 0,
		"EINSP": 1,
	}
)

func (x Energierichtung) Enum() *Energierichtung {
	p := new(Energierichtung)
	*p = x
	return p
}

func (x Energierichtung) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Energierichtung) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[10].Descriptor()
}

func (Energierichtung) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[10]
}

func (x Energierichtung) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Energierichtung.Descriptor instead.
func (Energierichtung) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{10}
}

type Fernschaltung int32

const (
	Fernschaltung_VORHANDEN       Fernschaltung = 0
	Fernschaltung_NICHT_VORHANDEN Fernschaltung = 1
)

// Enum value maps for Fernschaltung.
var (
	Fernschaltung_name = map[int32]string{
		0: "VORHANDEN",
		1: "NICHT_VORHANDEN",
	}
	Fernschaltung_value = map[string]int32{
		"VORHANDEN":       0,
		"NICHT_VORHANDEN": 1,
	}
)

func (x Fernschaltung) Enum() *Fernschaltung {
	p := new(Fernschaltung)
	*p = x
	return p
}

func (x Fernschaltung) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fernschaltung) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[11].Descriptor()
}

func (Fernschaltung) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[11]
}

func (x Fernschaltung) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fernschaltung.Descriptor instead.
func (Fernschaltung) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{11}
}

type Gasqualitaet int32

const (
	Gasqualitaet_Gasqualitaet_ZERO Gasqualitaet = 0
	Gasqualitaet_H_GAS             Gasqualitaet = 1
	Gasqualitaet_L_GAS             Gasqualitaet = 2
	Gasqualitaet_HGAS              Gasqualitaet = 1
	Gasqualitaet_LGAS              Gasqualitaet = 2
)

// Enum value maps for Gasqualitaet.
var (
	Gasqualitaet_name = map[int32]string{
		0: "Gasqualitaet_ZERO",
		1: "H_GAS",
		2: "L_GAS",
		// Duplicate value: 1: "HGAS",
		// Duplicate value: 2: "LGAS",
	}
	Gasqualitaet_value = map[string]int32{
		"Gasqualitaet_ZERO": 0,
		"H_GAS":             1,
		"L_GAS":             2,
		"HGAS":              1,
		"LGAS":              2,
	}
)

func (x Gasqualitaet) Enum() *Gasqualitaet {
	p := new(Gasqualitaet)
	*p = x
	return p
}

func (x Gasqualitaet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gasqualitaet) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[12].Descriptor()
}

func (Gasqualitaet) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[12]
}

func (x Gasqualitaet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gasqualitaet.Descriptor instead.
func (Gasqualitaet) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{12}
}

type Gebiettyp int32

const (
	Gebiettyp_REGELZONE              Gebiettyp = 0
	Gebiettyp_MARKTGEBIET            Gebiettyp = 1
	Gebiettyp_BILANZIERUNGSGEBIET    Gebiettyp = 2
	Gebiettyp_VERTEILNETZ            Gebiettyp = 3
	Gebiettyp_TRANSPORTNETZ          Gebiettyp = 4
	Gebiettyp_REGIONALNETZ           Gebiettyp = 5
	Gebiettyp_AREALNETZ              Gebiettyp = 6
	Gebiettyp_GRUNDVERSORGUNGSGEBIET Gebiettyp = 7
	Gebiettyp_VERSORGUNGSGEBIET      Gebiettyp = 8
)

// Enum value maps for Gebiettyp.
var (
	Gebiettyp_name = map[int32]string{
		0: "REGELZONE",
		1: "MARKTGEBIET",
		2: "BILANZIERUNGSGEBIET",
		3: "VERTEILNETZ",
		4: "TRANSPORTNETZ",
		5: "REGIONALNETZ",
		6: "AREALNETZ",
		7: "GRUNDVERSORGUNGSGEBIET",
		8: "VERSORGUNGSGEBIET",
	}
	Gebiettyp_value = map[string]int32{
		"REGELZONE":              0,
		"MARKTGEBIET":            1,
		"BILANZIERUNGSGEBIET":    2,
		"VERTEILNETZ":            3,
		"TRANSPORTNETZ":          4,
		"REGIONALNETZ":           5,
		"AREALNETZ":              6,
		"GRUNDVERSORGUNGSGEBIET": 7,
		"VERSORGUNGSGEBIET":      8,
	}
)

func (x Gebiettyp) Enum() *Gebiettyp {
	p := new(Gebiettyp)
	*p = x
	return p
}

func (x Gebiettyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gebiettyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[13].Descriptor()
}

func (Gebiettyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[13]
}

func (x Gebiettyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gebiettyp.Descriptor instead.
func (Gebiettyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{13}
}

type Geraetemerkmal int32

const (
	Geraetemerkmal_Geraetemerkmal_EINTARIF             Geraetemerkmal = 0
	Geraetemerkmal_Geraetemerkmal_ZWEITARIF            Geraetemerkmal = 1
	Geraetemerkmal_Geraetemerkmal_MEHRTARIF            Geraetemerkmal = 2
	Geraetemerkmal_Geraetemerkmal_GAS_G2P5             Geraetemerkmal = 3
	Geraetemerkmal_Geraetemerkmal_GAS_G4               Geraetemerkmal = 4
	Geraetemerkmal_Geraetemerkmal_GAS_G6               Geraetemerkmal = 5
	Geraetemerkmal_Geraetemerkmal_GAS_G10              Geraetemerkmal = 6
	Geraetemerkmal_Geraetemerkmal_GAS_G16              Geraetemerkmal = 7
	Geraetemerkmal_Geraetemerkmal_GAS_G25              Geraetemerkmal = 8
	Geraetemerkmal_Geraetemerkmal_GAS_G40              Geraetemerkmal = 9
	Geraetemerkmal_Geraetemerkmal_GAS_G65              Geraetemerkmal = 10
	Geraetemerkmal_Geraetemerkmal_GAS_G100             Geraetemerkmal = 11
	Geraetemerkmal_Geraetemerkmal_GAS_G160             Geraetemerkmal = 12
	Geraetemerkmal_Geraetemerkmal_GAS_G250             Geraetemerkmal = 13
	Geraetemerkmal_Geraetemerkmal_GAS_G400             Geraetemerkmal = 14
	Geraetemerkmal_Geraetemerkmal_GAS_G650             Geraetemerkmal = 15
	Geraetemerkmal_Geraetemerkmal_GAS_G1000            Geraetemerkmal = 16
	Geraetemerkmal_Geraetemerkmal_GAS_G1600            Geraetemerkmal = 17
	Geraetemerkmal_Geraetemerkmal_GAS_G2500            Geraetemerkmal = 18
	Geraetemerkmal_Geraetemerkmal_IMPULSGEBER_G4_G100  Geraetemerkmal = 19
	Geraetemerkmal_Geraetemerkmal_IMPULSGEBER_G100     Geraetemerkmal = 20
	Geraetemerkmal_Geraetemerkmal_MODEM_GSM            Geraetemerkmal = 21
	Geraetemerkmal_Geraetemerkmal_MODEM_GPRS           Geraetemerkmal = 22
	Geraetemerkmal_Geraetemerkmal_MODEM_FUNK           Geraetemerkmal = 23
	Geraetemerkmal_Geraetemerkmal_MODEM_GSM_O_LG       Geraetemerkmal = 24
	Geraetemerkmal_Geraetemerkmal_MODEM_GSM_M_LG       Geraetemerkmal = 25
	Geraetemerkmal_Geraetemerkmal_MODEM_FESTNETZ       Geraetemerkmal = 26
	Geraetemerkmal_Geraetemerkmal_MODEM_GPRS_M_LG      Geraetemerkmal = 27
	Geraetemerkmal_Geraetemerkmal_PLC_COM              Geraetemerkmal = 28
	Geraetemerkmal_Geraetemerkmal_ETHERNET_KOM         Geraetemerkmal = 29
	Geraetemerkmal_Geraetemerkmal_DSL_KOM              Geraetemerkmal = 30
	Geraetemerkmal_Geraetemerkmal_LTE_KOM              Geraetemerkmal = 31
	Geraetemerkmal_Geraetemerkmal_RUNDSTEUEREMPFAENGER Geraetemerkmal = 32
	Geraetemerkmal_Geraetemerkmal_TARIFSCHALTGERAET    Geraetemerkmal = 33
	Geraetemerkmal_Geraetemerkmal_ZUSTANDS_MU          Geraetemerkmal = 34
	Geraetemerkmal_Geraetemerkmal_TEMPERATUR_MU        Geraetemerkmal = 35
	Geraetemerkmal_Geraetemerkmal_KOMPAKT_MU           Geraetemerkmal = 36
	Geraetemerkmal_Geraetemerkmal_SYSTEM_MU            Geraetemerkmal = 37
	Geraetemerkmal_Geraetemerkmal_UNBESTIMMT           Geraetemerkmal = 38
)

// Enum value maps for Geraetemerkmal.
var (
	Geraetemerkmal_name = map[int32]string{
		0:  "Geraetemerkmal_EINTARIF",
		1:  "Geraetemerkmal_ZWEITARIF",
		2:  "Geraetemerkmal_MEHRTARIF",
		3:  "Geraetemerkmal_GAS_G2P5",
		4:  "Geraetemerkmal_GAS_G4",
		5:  "Geraetemerkmal_GAS_G6",
		6:  "Geraetemerkmal_GAS_G10",
		7:  "Geraetemerkmal_GAS_G16",
		8:  "Geraetemerkmal_GAS_G25",
		9:  "Geraetemerkmal_GAS_G40",
		10: "Geraetemerkmal_GAS_G65",
		11: "Geraetemerkmal_GAS_G100",
		12: "Geraetemerkmal_GAS_G160",
		13: "Geraetemerkmal_GAS_G250",
		14: "Geraetemerkmal_GAS_G400",
		15: "Geraetemerkmal_GAS_G650",
		16: "Geraetemerkmal_GAS_G1000",
		17: "Geraetemerkmal_GAS_G1600",
		18: "Geraetemerkmal_GAS_G2500",
		19: "Geraetemerkmal_IMPULSGEBER_G4_G100",
		20: "Geraetemerkmal_IMPULSGEBER_G100",
		21: "Geraetemerkmal_MODEM_GSM",
		22: "Geraetemerkmal_MODEM_GPRS",
		23: "Geraetemerkmal_MODEM_FUNK",
		24: "Geraetemerkmal_MODEM_GSM_O_LG",
		25: "Geraetemerkmal_MODEM_GSM_M_LG",
		26: "Geraetemerkmal_MODEM_FESTNETZ",
		27: "Geraetemerkmal_MODEM_GPRS_M_LG",
		28: "Geraetemerkmal_PLC_COM",
		29: "Geraetemerkmal_ETHERNET_KOM",
		30: "Geraetemerkmal_DSL_KOM",
		31: "Geraetemerkmal_LTE_KOM",
		32: "Geraetemerkmal_RUNDSTEUEREMPFAENGER",
		33: "Geraetemerkmal_TARIFSCHALTGERAET",
		34: "Geraetemerkmal_ZUSTANDS_MU",
		35: "Geraetemerkmal_TEMPERATUR_MU",
		36: "Geraetemerkmal_KOMPAKT_MU",
		37: "Geraetemerkmal_SYSTEM_MU",
		38: "Geraetemerkmal_UNBESTIMMT",
	}
	Geraetemerkmal_value = map[string]int32{
		"Geraetemerkmal_EINTARIF":             0,
		"Geraetemerkmal_ZWEITARIF":            1,
		"Geraetemerkmal_MEHRTARIF":            2,
		"Geraetemerkmal_GAS_G2P5":             3,
		"Geraetemerkmal_GAS_G4":               4,
		"Geraetemerkmal_GAS_G6":               5,
		"Geraetemerkmal_GAS_G10":              6,
		"Geraetemerkmal_GAS_G16":              7,
		"Geraetemerkmal_GAS_G25":              8,
		"Geraetemerkmal_GAS_G40":              9,
		"Geraetemerkmal_GAS_G65":              10,
		"Geraetemerkmal_GAS_G100":             11,
		"Geraetemerkmal_GAS_G160":             12,
		"Geraetemerkmal_GAS_G250":             13,
		"Geraetemerkmal_GAS_G400":             14,
		"Geraetemerkmal_GAS_G650":             15,
		"Geraetemerkmal_GAS_G1000":            16,
		"Geraetemerkmal_GAS_G1600":            17,
		"Geraetemerkmal_GAS_G2500":            18,
		"Geraetemerkmal_IMPULSGEBER_G4_G100":  19,
		"Geraetemerkmal_IMPULSGEBER_G100":     20,
		"Geraetemerkmal_MODEM_GSM":            21,
		"Geraetemerkmal_MODEM_GPRS":           22,
		"Geraetemerkmal_MODEM_FUNK":           23,
		"Geraetemerkmal_MODEM_GSM_O_LG":       24,
		"Geraetemerkmal_MODEM_GSM_M_LG":       25,
		"Geraetemerkmal_MODEM_FESTNETZ":       26,
		"Geraetemerkmal_MODEM_GPRS_M_LG":      27,
		"Geraetemerkmal_PLC_COM":              28,
		"Geraetemerkmal_ETHERNET_KOM":         29,
		"Geraetemerkmal_DSL_KOM":              30,
		"Geraetemerkmal_LTE_KOM":              31,
		"Geraetemerkmal_RUNDSTEUEREMPFAENGER": 32,
		"Geraetemerkmal_TARIFSCHALTGERAET":    33,
		"Geraetemerkmal_ZUSTANDS_MU":          34,
		"Geraetemerkmal_TEMPERATUR_MU":        35,
		"Geraetemerkmal_KOMPAKT_MU":           36,
		"Geraetemerkmal_SYSTEM_MU":            37,
		"Geraetemerkmal_UNBESTIMMT":           38,
	}
)

func (x Geraetemerkmal) Enum() *Geraetemerkmal {
	p := new(Geraetemerkmal)
	*p = x
	return p
}

func (x Geraetemerkmal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Geraetemerkmal) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[14].Descriptor()
}

func (Geraetemerkmal) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[14]
}

func (x Geraetemerkmal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Geraetemerkmal.Descriptor instead.
func (Geraetemerkmal) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{14}
}

type Geraetetyp int32

const (
	Geraetetyp_Geraetetyp_WECHSELSTROMZAEHLER             Geraetetyp = 0
	Geraetetyp_Geraetetyp_DREHSTROMZAEHLER                Geraetetyp = 1
	Geraetetyp_Geraetetyp_ZWEIRICHTUNGSZAEHLER            Geraetetyp = 2
	Geraetetyp_Geraetetyp_RLM_ZAEHLER                     Geraetetyp = 3
	Geraetetyp_Geraetetyp_IMS_ZAEHLER                     Geraetetyp = 4
	Geraetetyp_Geraetetyp_BALGENGASZAEHLER                Geraetetyp = 5
	Geraetetyp_Geraetetyp_MAXIMUMZAEHLER                  Geraetetyp = 6
	Geraetetyp_Geraetetyp_MULTIPLEXANLAGE                 Geraetetyp = 7
	Geraetetyp_Geraetetyp_PAUSCHALANLAGE                  Geraetetyp = 8
	Geraetetyp_Geraetetyp_VERSTAERKERANLAGE               Geraetetyp = 9
	Geraetetyp_Geraetetyp_SUMMATIONSGERAET                Geraetetyp = 10
	Geraetetyp_Geraetetyp_IMPULSGEBER                     Geraetetyp = 11
	Geraetetyp_Geraetetyp_EDL_21_ZAEHLERAUFSATZ           Geraetetyp = 12
	Geraetetyp_Geraetetyp_VIER_QUADRANTEN_LASTGANGZAEHLER Geraetetyp = 13
	Geraetetyp_Geraetetyp_MENGENUMWERTER                  Geraetetyp = 14
	Geraetetyp_Geraetetyp_STROMWANDLER                    Geraetetyp = 15
	Geraetetyp_Geraetetyp_SPANNUNGSWANDLER                Geraetetyp = 16
	Geraetetyp_Geraetetyp_DATENLOGGER                     Geraetetyp = 17
	Geraetetyp_Geraetetyp_KOMMUNIKATIONSANSCHLUSS         Geraetetyp = 18
	Geraetetyp_Geraetetyp_MODEM                           Geraetetyp = 19
	Geraetetyp_Geraetetyp_TELEKOMMUNIKATIONSEINRICHTUNG   Geraetetyp = 20
	Geraetetyp_Geraetetyp_DREHKOLBENGASZAEHLER            Geraetetyp = 21
	Geraetetyp_Geraetetyp_TURBINENRADGASZAEHLER           Geraetetyp = 22
	Geraetetyp_Geraetetyp_ULTRASCHALLZAEHLER              Geraetetyp = 23
	Geraetetyp_Geraetetyp_WIRBELGASZAEHLER                Geraetetyp = 24
	Geraetetyp_Geraetetyp_MODERNE_MESSEINRICHTUNG         Geraetetyp = 25
	Geraetetyp_Geraetetyp_ELEKTRONISCHER_HAUSHALTSZAEHLER Geraetetyp = 26
	Geraetetyp_Geraetetyp_STEUEREINRICHTUNG               Geraetetyp = 27
	Geraetetyp_Geraetetyp_TECHNISCHESTEUEREINRICHTUNG     Geraetetyp = 28
	Geraetetyp_Geraetetyp_TARIFSCHALTGERAET               Geraetetyp = 29
	Geraetetyp_Geraetetyp_RUNDSTEUEREMPFAENGER            Geraetetyp = 30
	Geraetetyp_Geraetetyp_OPTIONALE_ZUS_ZAEHLEINRICHTUNG  Geraetetyp = 31
	Geraetetyp_Geraetetyp_MESSWANDLERSATZ_IMS_MME         Geraetetyp = 32
	Geraetetyp_Geraetetyp_KOMBIMESSWANDLER_IMS_MME        Geraetetyp = 33
	Geraetetyp_Geraetetyp_TARIFSCHALTGERAET_IMS_MME       Geraetetyp = 34
	Geraetetyp_Geraetetyp_RUNDSTEUEREMPFAENGER_IMS_MME    Geraetetyp = 35
	Geraetetyp_Geraetetyp_TEMPERATUR_KOMPENSATION         Geraetetyp = 36
	Geraetetyp_Geraetetyp_HOECHSTBELASTUNGS_ANZEIGER      Geraetetyp = 37
	Geraetetyp_Geraetetyp_SONSTIGES_GERAET                Geraetetyp = 38
	Geraetetyp_Geraetetyp_SMARTMETERGATEWAY               Geraetetyp = 39
	Geraetetyp_Geraetetyp_STEUERBOX                       Geraetetyp = 40
	Geraetetyp_Geraetetyp_BLOCKSTROMWANDLER               Geraetetyp = 41
	Geraetetyp_Geraetetyp_KOMBIMESSWANDLER                Geraetetyp = 42
)

// Enum value maps for Geraetetyp.
var (
	Geraetetyp_name = map[int32]string{
		0:  "Geraetetyp_WECHSELSTROMZAEHLER",
		1:  "Geraetetyp_DREHSTROMZAEHLER",
		2:  "Geraetetyp_ZWEIRICHTUNGSZAEHLER",
		3:  "Geraetetyp_RLM_ZAEHLER",
		4:  "Geraetetyp_IMS_ZAEHLER",
		5:  "Geraetetyp_BALGENGASZAEHLER",
		6:  "Geraetetyp_MAXIMUMZAEHLER",
		7:  "Geraetetyp_MULTIPLEXANLAGE",
		8:  "Geraetetyp_PAUSCHALANLAGE",
		9:  "Geraetetyp_VERSTAERKERANLAGE",
		10: "Geraetetyp_SUMMATIONSGERAET",
		11: "Geraetetyp_IMPULSGEBER",
		12: "Geraetetyp_EDL_21_ZAEHLERAUFSATZ",
		13: "Geraetetyp_VIER_QUADRANTEN_LASTGANGZAEHLER",
		14: "Geraetetyp_MENGENUMWERTER",
		15: "Geraetetyp_STROMWANDLER",
		16: "Geraetetyp_SPANNUNGSWANDLER",
		17: "Geraetetyp_DATENLOGGER",
		18: "Geraetetyp_KOMMUNIKATIONSANSCHLUSS",
		19: "Geraetetyp_MODEM",
		20: "Geraetetyp_TELEKOMMUNIKATIONSEINRICHTUNG",
		21: "Geraetetyp_DREHKOLBENGASZAEHLER",
		22: "Geraetetyp_TURBINENRADGASZAEHLER",
		23: "Geraetetyp_ULTRASCHALLZAEHLER",
		24: "Geraetetyp_WIRBELGASZAEHLER",
		25: "Geraetetyp_MODERNE_MESSEINRICHTUNG",
		26: "Geraetetyp_ELEKTRONISCHER_HAUSHALTSZAEHLER",
		27: "Geraetetyp_STEUEREINRICHTUNG",
		28: "Geraetetyp_TECHNISCHESTEUEREINRICHTUNG",
		29: "Geraetetyp_TARIFSCHALTGERAET",
		30: "Geraetetyp_RUNDSTEUEREMPFAENGER",
		31: "Geraetetyp_OPTIONALE_ZUS_ZAEHLEINRICHTUNG",
		32: "Geraetetyp_MESSWANDLERSATZ_IMS_MME",
		33: "Geraetetyp_KOMBIMESSWANDLER_IMS_MME",
		34: "Geraetetyp_TARIFSCHALTGERAET_IMS_MME",
		35: "Geraetetyp_RUNDSTEUEREMPFAENGER_IMS_MME",
		36: "Geraetetyp_TEMPERATUR_KOMPENSATION",
		37: "Geraetetyp_HOECHSTBELASTUNGS_ANZEIGER",
		38: "Geraetetyp_SONSTIGES_GERAET",
		39: "Geraetetyp_SMARTMETERGATEWAY",
		40: "Geraetetyp_STEUERBOX",
		41: "Geraetetyp_BLOCKSTROMWANDLER",
		42: "Geraetetyp_KOMBIMESSWANDLER",
	}
	Geraetetyp_value = map[string]int32{
		"Geraetetyp_WECHSELSTROMZAEHLER":             0,
		"Geraetetyp_DREHSTROMZAEHLER":                1,
		"Geraetetyp_ZWEIRICHTUNGSZAEHLER":            2,
		"Geraetetyp_RLM_ZAEHLER":                     3,
		"Geraetetyp_IMS_ZAEHLER":                     4,
		"Geraetetyp_BALGENGASZAEHLER":                5,
		"Geraetetyp_MAXIMUMZAEHLER":                  6,
		"Geraetetyp_MULTIPLEXANLAGE":                 7,
		"Geraetetyp_PAUSCHALANLAGE":                  8,
		"Geraetetyp_VERSTAERKERANLAGE":               9,
		"Geraetetyp_SUMMATIONSGERAET":                10,
		"Geraetetyp_IMPULSGEBER":                     11,
		"Geraetetyp_EDL_21_ZAEHLERAUFSATZ":           12,
		"Geraetetyp_VIER_QUADRANTEN_LASTGANGZAEHLER": 13,
		"Geraetetyp_MENGENUMWERTER":                  14,
		"Geraetetyp_STROMWANDLER":                    15,
		"Geraetetyp_SPANNUNGSWANDLER":                16,
		"Geraetetyp_DATENLOGGER":                     17,
		"Geraetetyp_KOMMUNIKATIONSANSCHLUSS":         18,
		"Geraetetyp_MODEM":                           19,
		"Geraetetyp_TELEKOMMUNIKATIONSEINRICHTUNG":   20,
		"Geraetetyp_DREHKOLBENGASZAEHLER":            21,
		"Geraetetyp_TURBINENRADGASZAEHLER":           22,
		"Geraetetyp_ULTRASCHALLZAEHLER":              23,
		"Geraetetyp_WIRBELGASZAEHLER":                24,
		"Geraetetyp_MODERNE_MESSEINRICHTUNG":         25,
		"Geraetetyp_ELEKTRONISCHER_HAUSHALTSZAEHLER": 26,
		"Geraetetyp_STEUEREINRICHTUNG":               27,
		"Geraetetyp_TECHNISCHESTEUEREINRICHTUNG":     28,
		"Geraetetyp_TARIFSCHALTGERAET":               29,
		"Geraetetyp_RUNDSTEUEREMPFAENGER":            30,
		"Geraetetyp_OPTIONALE_ZUS_ZAEHLEINRICHTUNG":  31,
		"Geraetetyp_MESSWANDLERSATZ_IMS_MME":         32,
		"Geraetetyp_KOMBIMESSWANDLER_IMS_MME":        33,
		"Geraetetyp_TARIFSCHALTGERAET_IMS_MME":       34,
		"Geraetetyp_RUNDSTEUEREMPFAENGER_IMS_MME":    35,
		"Geraetetyp_TEMPERATUR_KOMPENSATION":         36,
		"Geraetetyp_HOECHSTBELASTUNGS_ANZEIGER":      37,
		"Geraetetyp_SONSTIGES_GERAET":                38,
		"Geraetetyp_SMARTMETERGATEWAY":               39,
		"Geraetetyp_STEUERBOX":                       40,
		"Geraetetyp_BLOCKSTROMWANDLER":               41,
		"Geraetetyp_KOMBIMESSWANDLER":                42,
	}
)

func (x Geraetetyp) Enum() *Geraetetyp {
	p := new(Geraetetyp)
	*p = x
	return p
}

func (x Geraetetyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Geraetetyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[15].Descriptor()
}

func (Geraetetyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[15]
}

func (x Geraetetyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Geraetetyp.Descriptor instead.
func (Geraetetyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{15}
}

type Geschaeftspartnerrolle int32

const (
	Geschaeftspartnerrolle_Geschaeftspartnerrolle_LIEFERANT     Geschaeftspartnerrolle = 0
	Geschaeftspartnerrolle_Geschaeftspartnerrolle_DIENSTLEISTER Geschaeftspartnerrolle = 1
	Geschaeftspartnerrolle_Geschaeftspartnerrolle_KUNDE         Geschaeftspartnerrolle = 2
	Geschaeftspartnerrolle_Geschaeftspartnerrolle_INTERESSENT   Geschaeftspartnerrolle = 3
	Geschaeftspartnerrolle_Geschaeftspartnerrolle_MARKTPARTNER  Geschaeftspartnerrolle = 4
)

// Enum value maps for Geschaeftspartnerrolle.
var (
	Geschaeftspartnerrolle_name = map[int32]string{
		0: "Geschaeftspartnerrolle_LIEFERANT",
		1: "Geschaeftspartnerrolle_DIENSTLEISTER",
		2: "Geschaeftspartnerrolle_KUNDE",
		3: "Geschaeftspartnerrolle_INTERESSENT",
		4: "Geschaeftspartnerrolle_MARKTPARTNER",
	}
	Geschaeftspartnerrolle_value = map[string]int32{
		"Geschaeftspartnerrolle_LIEFERANT":     0,
		"Geschaeftspartnerrolle_DIENSTLEISTER": 1,
		"Geschaeftspartnerrolle_KUNDE":         2,
		"Geschaeftspartnerrolle_INTERESSENT":   3,
		"Geschaeftspartnerrolle_MARKTPARTNER":  4,
	}
)

func (x Geschaeftspartnerrolle) Enum() *Geschaeftspartnerrolle {
	p := new(Geschaeftspartnerrolle)
	*p = x
	return p
}

func (x Geschaeftspartnerrolle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Geschaeftspartnerrolle) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[16].Descriptor()
}

func (Geschaeftspartnerrolle) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[16]
}

func (x Geschaeftspartnerrolle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Geschaeftspartnerrolle.Descriptor instead.
func (Geschaeftspartnerrolle) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{16}
}

type Gueltigkeitstyp int32

const (
	Gueltigkeitstyp_NICHT_IN Gueltigkeitstyp = 0
)

// Enum value maps for Gueltigkeitstyp.
var (
	Gueltigkeitstyp_name = map[int32]string{
		0: "NICHT_IN",
	}
	Gueltigkeitstyp_value = map[string]int32{
		"NICHT_IN": 0,
	}
)

func (x Gueltigkeitstyp) Enum() *Gueltigkeitstyp {
	p := new(Gueltigkeitstyp)
	*p = x
	return p
}

func (x Gueltigkeitstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gueltigkeitstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[17].Descriptor()
}

func (Gueltigkeitstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[17]
}

func (x Gueltigkeitstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gueltigkeitstyp.Descriptor instead.
func (Gueltigkeitstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{17}
}

type Kalkulationsmethode int32

const (
	Kalkulationsmethode_KEINE                                                                  Kalkulationsmethode = 0
	Kalkulationsmethode_STAFFELN                                                               Kalkulationsmethode = 1
	Kalkulationsmethode_ZONEN                                                                  Kalkulationsmethode = 2
	Kalkulationsmethode_VORZONEN_GP                                                            Kalkulationsmethode = 3
	Kalkulationsmethode_SIGMOID                                                                Kalkulationsmethode = 4
	Kalkulationsmethode_BLINDARBEIT_GT_50_PROZENT                                              Kalkulationsmethode = 5
	Kalkulationsmethode_BLINDARBEIT_GT_40_PROZENT                                              Kalkulationsmethode = 6
	Kalkulationsmethode_AP_GP_ZONEN                                                            Kalkulationsmethode = 7
	Kalkulationsmethode_LP_INSTALL_LEISTUNG                                                    Kalkulationsmethode = 8
	Kalkulationsmethode_AP_TRANSPORT_ODER_VERTEILNETZ                                          Kalkulationsmethode = 9
	Kalkulationsmethode_AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID                  Kalkulationsmethode = 10
	Kalkulationsmethode_LP_JAHRESVERBRAUCH                                                     Kalkulationsmethode = 11
	Kalkulationsmethode_LP_TRANSPORT_ODER_VERTEILNETZ                                          Kalkulationsmethode = 12
	Kalkulationsmethode_LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID                  Kalkulationsmethode = 13
	Kalkulationsmethode_FUNKTIONEN                                                             Kalkulationsmethode = 14
	Kalkulationsmethode_VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK Kalkulationsmethode = 15
)

// Enum value maps for Kalkulationsmethode.
var (
	Kalkulationsmethode_name = map[int32]string{
		0:  "KEINE",
		1:  "STAFFELN",
		2:  "ZONEN",
		3:  "VORZONEN_GP",
		4:  "SIGMOID",
		5:  "BLINDARBEIT_GT_50_PROZENT",
		6:  "BLINDARBEIT_GT_40_PROZENT",
		7:  "AP_GP_ZONEN",
		8:  "LP_INSTALL_LEISTUNG",
		9:  "AP_TRANSPORT_ODER_VERTEILNETZ",
		10: "AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID",
		11: "LP_JAHRESVERBRAUCH",
		12: "LP_TRANSPORT_ODER_VERTEILNETZ",
		13: "LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID",
		14: "FUNKTIONEN",
		15: "VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK",
	}
	Kalkulationsmethode_value = map[string]int32{
		"KEINE":                         0,
		"STAFFELN":                      1,
		"ZONEN":                         2,
		"VORZONEN_GP":                   3,
		"SIGMOID":                       4,
		"BLINDARBEIT_GT_50_PROZENT":     5,
		"BLINDARBEIT_GT_40_PROZENT":     6,
		"AP_GP_ZONEN":                   7,
		"LP_INSTALL_LEISTUNG":           8,
		"AP_TRANSPORT_ODER_VERTEILNETZ": 9,
		"AP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID": 10,
		"LP_JAHRESVERBRAUCH":                                    11,
		"LP_TRANSPORT_ODER_VERTEILNETZ":                         12,
		"LP_TRANSPORT_ODER_VERTEILNETZ_ORTSVERTEILNETZ_SIGMOID": 13,
		"FUNKTIONEN": 14,
		"VERBRAUCH_UEBER_SLP_GRENZE_FUNKTIONSBEZOGEN_WEITERE_BERECHNUNG_ALS_LGK": 15,
	}
)

func (x Kalkulationsmethode) Enum() *Kalkulationsmethode {
	p := new(Kalkulationsmethode)
	*p = x
	return p
}

func (x Kalkulationsmethode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kalkulationsmethode) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[18].Descriptor()
}

func (Kalkulationsmethode) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[18]
}

func (x Kalkulationsmethode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kalkulationsmethode.Descriptor instead.
func (Kalkulationsmethode) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{18}
}

type Kontaktart int32

const (
	Kontaktart_ANSCHREIBEN Kontaktart = 0
	Kontaktart_TELEFONAT   Kontaktart = 1
	Kontaktart_FAX         Kontaktart = 2
	Kontaktart_E_MAIL      Kontaktart = 3
	Kontaktart_SMS         Kontaktart = 4
)

// Enum value maps for Kontaktart.
var (
	Kontaktart_name = map[int32]string{
		0: "ANSCHREIBEN",
		1: "TELEFONAT",
		2: "FAX",
		3: "E_MAIL",
		4: "SMS",
	}
	Kontaktart_value = map[string]int32{
		"ANSCHREIBEN": 0,
		"TELEFONAT":   1,
		"FAX":         2,
		"E_MAIL":      3,
		"SMS":         4,
	}
)

func (x Kontaktart) Enum() *Kontaktart {
	p := new(Kontaktart)
	*p = x
	return p
}

func (x Kontaktart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kontaktart) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[19].Descriptor()
}

func (Kontaktart) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[19]
}

func (x Kontaktart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kontaktart.Descriptor instead.
func (Kontaktart) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{19}
}

type Kostenklasse int32

const (
	Kostenklasse_Kostenklasse_ZERO Kostenklasse = 0
)

// Enum value maps for Kostenklasse.
var (
	Kostenklasse_name = map[int32]string{
		0: "Kostenklasse_ZERO",
	}
	Kostenklasse_value = map[string]int32{
		"Kostenklasse_ZERO": 0,
	}
)

func (x Kostenklasse) Enum() *Kostenklasse {
	p := new(Kostenklasse)
	*p = x
	return p
}

func (x Kostenklasse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kostenklasse) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[20].Descriptor()
}

func (Kostenklasse) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[20]
}

func (x Kostenklasse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kostenklasse.Descriptor instead.
func (Kostenklasse) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{20}
}

type Landescode int32

const (
	Landescode_Landescode_AC Landescode = 0
	Landescode_Landescode_AD Landescode = 1
	Landescode_Landescode_AE Landescode = 2
	Landescode_Landescode_AF Landescode = 3
	Landescode_Landescode_AG Landescode = 4
	Landescode_Landescode_AI Landescode = 5
	Landescode_Landescode_AL Landescode = 6
	Landescode_Landescode_AM Landescode = 7
	Landescode_Landescode_AN Landescode = 8
	Landescode_Landescode_AO Landescode = 9
	Landescode_Landescode_AQ Landescode = 10
	Landescode_Landescode_AR Landescode = 11
	Landescode_Landescode_AS Landescode = 12
	Landescode_Landescode_AT Landescode = 13
	Landescode_Landescode_AU Landescode = 14
	Landescode_Landescode_AW Landescode = 15
	Landescode_Landescode_AX Landescode = 16
	Landescode_Landescode_AZ Landescode = 17
	Landescode_Landescode_BA Landescode = 18
	Landescode_Landescode_BB Landescode = 19
	Landescode_Landescode_BD Landescode = 20
	Landescode_Landescode_BE Landescode = 21
	Landescode_Landescode_BF Landescode = 22
	Landescode_Landescode_BG Landescode = 23
	Landescode_Landescode_BH Landescode = 24
	Landescode_Landescode_BI Landescode = 25
	Landescode_Landescode_BJ Landescode = 26
	Landescode_Landescode_BL Landescode = 27
	Landescode_Landescode_BM Landescode = 28
	Landescode_Landescode_BN Landescode = 29
	Landescode_Landescode_BO Landescode = 30
	Landescode_Landescode_BQ Landescode = 31
	Landescode_Landescode_BR Landescode = 32
	Landescode_Landescode_BS Landescode = 33
	Landescode_Landescode_BT Landescode = 34
	Landescode_Landescode_BU Landescode = 35
	Landescode_Landescode_BV Landescode = 36
	Landescode_Landescode_BW Landescode = 37
	Landescode_Landescode_BY Landescode = 38
	Landescode_Landescode_BZ Landescode = 39
	Landescode_Landescode_CA Landescode = 40
	Landescode_Landescode_CC Landescode = 41
	Landescode_Landescode_CD Landescode = 42
	Landescode_Landescode_CF Landescode = 43
	Landescode_Landescode_CG Landescode = 44
	Landescode_Landescode_CH Landescode = 45
	Landescode_Landescode_CI Landescode = 46
	Landescode_Landescode_CK Landescode = 47
	Landescode_Landescode_CL Landescode = 48
	Landescode_Landescode_CM Landescode = 49
	Landescode_Landescode_CN Landescode = 50
	Landescode_Landescode_CO Landescode = 51
	Landescode_Landescode_CP Landescode = 52
	Landescode_Landescode_CR Landescode = 53
	Landescode_Landescode_CS Landescode = 54
	Landescode_Landescode_CU Landescode = 55
	Landescode_Landescode_CV Landescode = 56
	Landescode_Landescode_CW Landescode = 57
	Landescode_Landescode_CX Landescode = 58
	Landescode_Landescode_CY Landescode = 59
	Landescode_Landescode_CZ Landescode = 60
	Landescode_Landescode_DE Landescode = 61
	Landescode_Landescode_DG Landescode = 62
	Landescode_Landescode_DJ Landescode = 63
	Landescode_Landescode_DK Landescode = 64
	Landescode_Landescode_DM Landescode = 65
	Landescode_Landescode_DO Landescode = 66
	Landescode_Landescode_DZ Landescode = 67
	Landescode_Landescode_EA Landescode = 68
	Landescode_Landescode_EC Landescode = 69
	Landescode_Landescode_EE Landescode = 70
	Landescode_Landescode_EG Landescode = 71
	Landescode_Landescode_EH Landescode = 72
	Landescode_Landescode_ER Landescode = 73
	Landescode_Landescode_ES Landescode = 74
	Landescode_Landescode_ET Landescode = 75
	Landescode_Landescode_EU Landescode = 76
	Landescode_Landescode_FI Landescode = 77
	Landescode_Landescode_FJ Landescode = 78
	Landescode_Landescode_FK Landescode = 79
	Landescode_Landescode_FM Landescode = 80
	Landescode_Landescode_FO Landescode = 81
	Landescode_Landescode_FR Landescode = 82
	Landescode_Landescode_FX Landescode = 83
	Landescode_Landescode_GA Landescode = 84
	Landescode_Landescode_GB Landescode = 85
	Landescode_Landescode_GD Landescode = 86
	Landescode_Landescode_GE Landescode = 87
	Landescode_Landescode_GF Landescode = 88
	Landescode_Landescode_GG Landescode = 89
	Landescode_Landescode_GH Landescode = 90
	Landescode_Landescode_GI Landescode = 91
	Landescode_Landescode_GL Landescode = 92
	Landescode_Landescode_GM Landescode = 93
	Landescode_Landescode_GN Landescode = 94
	Landescode_Landescode_GP Landescode = 95
	Landescode_Landescode_GQ Landescode = 96
	Landescode_Landescode_GR Landescode = 97
	Landescode_Landescode_GS Landescode = 98
	Landescode_Landescode_GT Landescode = 99
	Landescode_Landescode_GU Landescode = 100
	Landescode_Landescode_GW Landescode = 101
	Landescode_Landescode_GY Landescode = 102
	Landescode_Landescode_HK Landescode = 103
	Landescode_Landescode_HM Landescode = 104
	Landescode_Landescode_HN Landescode = 105
	Landescode_Landescode_HR Landescode = 106
	Landescode_Landescode_HT Landescode = 107
	Landescode_Landescode_HU Landescode = 108
	Landescode_Landescode_IC Landescode = 109
	Landescode_Landescode_ID Landescode = 110
	Landescode_Landescode_IE Landescode = 111
	Landescode_Landescode_IL Landescode = 112
	Landescode_Landescode_IM Landescode = 113
	Landescode_Landescode_IN Landescode = 114
	Landescode_Landescode_IO Landescode = 115
	Landescode_Landescode_IQ Landescode = 116
	Landescode_Landescode_IR Landescode = 117
	Landescode_Landescode_IS Landescode = 118
	Landescode_Landescode_IT Landescode = 119
	Landescode_Landescode_JE Landescode = 120
	Landescode_Landescode_JM Landescode = 121
	Landescode_Landescode_JO Landescode = 122
	Landescode_Landescode_JP Landescode = 123
	Landescode_Landescode_KE Landescode = 124
	Landescode_Landescode_KG Landescode = 125
	Landescode_Landescode_KH Landescode = 126
	Landescode_Landescode_KI Landescode = 127
	Landescode_Landescode_KM Landescode = 128
	Landescode_Landescode_KN Landescode = 129
	Landescode_Landescode_KP Landescode = 130
	Landescode_Landescode_KR Landescode = 131
	Landescode_Landescode_KW Landescode = 132
	Landescode_Landescode_KY Landescode = 133
	Landescode_Landescode_KZ Landescode = 134
	Landescode_Landescode_LA Landescode = 135
	Landescode_Landescode_LB Landescode = 136
	Landescode_Landescode_LC Landescode = 137
	Landescode_Landescode_LI Landescode = 138
	Landescode_Landescode_LK Landescode = 139
	Landescode_Landescode_LR Landescode = 140
	Landescode_Landescode_LS Landescode = 141
	Landescode_Landescode_LT Landescode = 142
	Landescode_Landescode_LU Landescode = 143
	Landescode_Landescode_LV Landescode = 144
	Landescode_Landescode_LY Landescode = 145
	Landescode_Landescode_MA Landescode = 146
	Landescode_Landescode_MC Landescode = 147
	Landescode_Landescode_MD Landescode = 148
	Landescode_Landescode_ME Landescode = 149
	Landescode_Landescode_MF Landescode = 150
	Landescode_Landescode_MG Landescode = 151
	Landescode_Landescode_MH Landescode = 152
	Landescode_Landescode_MK Landescode = 153
	Landescode_Landescode_ML Landescode = 154
	Landescode_Landescode_MM Landescode = 155
	Landescode_Landescode_MN Landescode = 156
	Landescode_Landescode_MO Landescode = 157
	Landescode_Landescode_MP Landescode = 158
	Landescode_Landescode_MQ Landescode = 159
	Landescode_Landescode_MR Landescode = 160
	Landescode_Landescode_MS Landescode = 161
	Landescode_Landescode_MT Landescode = 162
	Landescode_Landescode_MU Landescode = 163
	Landescode_Landescode_MV Landescode = 164
	Landescode_Landescode_MW Landescode = 165
	Landescode_Landescode_MX Landescode = 166
	Landescode_Landescode_MY Landescode = 167
	Landescode_Landescode_MZ Landescode = 168
	Landescode_Landescode_NA Landescode = 169
	Landescode_Landescode_NC Landescode = 170
	Landescode_Landescode_NE Landescode = 171
	Landescode_Landescode_NF Landescode = 172
	Landescode_Landescode_NG Landescode = 173
	Landescode_Landescode_NI Landescode = 174
	Landescode_Landescode_NL Landescode = 175
	Landescode_Landescode_NO Landescode = 176
	Landescode_Landescode_NP Landescode = 177
	Landescode_Landescode_NR Landescode = 178
	Landescode_Landescode_NT Landescode = 179
	Landescode_Landescode_NU Landescode = 180
	Landescode_Landescode_NZ Landescode = 181
	Landescode_Landescode_OM Landescode = 182
	Landescode_Landescode_PA Landescode = 183
	Landescode_Landescode_PE Landescode = 184
	Landescode_Landescode_PF Landescode = 185
	Landescode_Landescode_PG Landescode = 186
	Landescode_Landescode_PH Landescode = 187
	Landescode_Landescode_PK Landescode = 188
	Landescode_Landescode_PL Landescode = 189
	Landescode_Landescode_PM Landescode = 190
	Landescode_Landescode_PN Landescode = 191
	Landescode_Landescode_PR Landescode = 192
	Landescode_Landescode_PS Landescode = 193
	Landescode_Landescode_PT Landescode = 194
	Landescode_Landescode_PW Landescode = 195
	Landescode_Landescode_PY Landescode = 196
	Landescode_Landescode_QA Landescode = 197
	Landescode_Landescode_RE Landescode = 198
	Landescode_Landescode_RO Landescode = 199
	Landescode_Landescode_RS Landescode = 200
	Landescode_Landescode_RU Landescode = 201
	Landescode_Landescode_RW Landescode = 202
	Landescode_Landescode_SA Landescode = 203
	Landescode_Landescode_SB Landescode = 204
	Landescode_Landescode_SC Landescode = 205
	Landescode_Landescode_SD Landescode = 206
	Landescode_Landescode_SE Landescode = 207
	Landescode_Landescode_SF Landescode = 208
	Landescode_Landescode_SG Landescode = 209
	Landescode_Landescode_SH Landescode = 210
	Landescode_Landescode_SI Landescode = 211
	Landescode_Landescode_SJ Landescode = 212
	Landescode_Landescode_SK Landescode = 213
	Landescode_Landescode_SL Landescode = 214
	Landescode_Landescode_SM Landescode = 215
	Landescode_Landescode_SN Landescode = 216
	Landescode_Landescode_SO Landescode = 217
	Landescode_Landescode_SR Landescode = 218
	Landescode_Landescode_SS Landescode = 219
	Landescode_Landescode_ST Landescode = 220
	Landescode_Landescode_SU Landescode = 221
	Landescode_Landescode_SV Landescode = 222
	Landescode_Landescode_SX Landescode = 223
	Landescode_Landescode_SY Landescode = 224
	Landescode_Landescode_SZ Landescode = 225
	Landescode_Landescode_TA Landescode = 226
	Landescode_Landescode_TC Landescode = 227
	Landescode_Landescode_TD Landescode = 228
	Landescode_Landescode_TF Landescode = 229
	Landescode_Landescode_TG Landescode = 230
	Landescode_Landescode_TJ Landescode = 231
	Landescode_Landescode_TK Landescode = 232
	Landescode_Landescode_TL Landescode = 233
	Landescode_Landescode_TM Landescode = 234
	Landescode_Landescode_TN Landescode = 235
	Landescode_Landescode_TO Landescode = 236
	Landescode_Landescode_TP Landescode = 237
	Landescode_Landescode_TR Landescode = 238
	Landescode_Landescode_TT Landescode = 239
	Landescode_Landescode_TV Landescode = 240
	Landescode_Landescode_TW Landescode = 241
	Landescode_Landescode_TZ Landescode = 242
	Landescode_Landescode_UA Landescode = 243
	Landescode_Landescode_UG Landescode = 244
	Landescode_Landescode_UK Landescode = 245
	Landescode_Landescode_UM Landescode = 246
	Landescode_Landescode_US Landescode = 247
	Landescode_Landescode_UY Landescode = 248
	Landescode_Landescode_UZ Landescode = 249
	Landescode_Landescode_VA Landescode = 250
	Landescode_Landescode_VC Landescode = 251
	Landescode_Landescode_VE Landescode = 252
	Landescode_Landescode_VG Landescode = 253
	Landescode_Landescode_VI Landescode = 254
	Landescode_Landescode_VN Landescode = 255
	Landescode_Landescode_VU Landescode = 256
	Landescode_Landescode_WF Landescode = 257
	Landescode_Landescode_WS Landescode = 258
	Landescode_Landescode_XK Landescode = 259
	Landescode_Landescode_YE Landescode = 260
	Landescode_Landescode_YT Landescode = 261
	Landescode_Landescode_YU Landescode = 262
	Landescode_Landescode_ZA Landescode = 263
	Landescode_Landescode_ZM Landescode = 264
	Landescode_Landescode_ZR Landescode = 265
	Landescode_Landescode_ZW Landescode = 266
)

// Enum value maps for Landescode.
var (
	Landescode_name = map[int32]string{
		0:   "Landescode_AC",
		1:   "Landescode_AD",
		2:   "Landescode_AE",
		3:   "Landescode_AF",
		4:   "Landescode_AG",
		5:   "Landescode_AI",
		6:   "Landescode_AL",
		7:   "Landescode_AM",
		8:   "Landescode_AN",
		9:   "Landescode_AO",
		10:  "Landescode_AQ",
		11:  "Landescode_AR",
		12:  "Landescode_AS",
		13:  "Landescode_AT",
		14:  "Landescode_AU",
		15:  "Landescode_AW",
		16:  "Landescode_AX",
		17:  "Landescode_AZ",
		18:  "Landescode_BA",
		19:  "Landescode_BB",
		20:  "Landescode_BD",
		21:  "Landescode_BE",
		22:  "Landescode_BF",
		23:  "Landescode_BG",
		24:  "Landescode_BH",
		25:  "Landescode_BI",
		26:  "Landescode_BJ",
		27:  "Landescode_BL",
		28:  "Landescode_BM",
		29:  "Landescode_BN",
		30:  "Landescode_BO",
		31:  "Landescode_BQ",
		32:  "Landescode_BR",
		33:  "Landescode_BS",
		34:  "Landescode_BT",
		35:  "Landescode_BU",
		36:  "Landescode_BV",
		37:  "Landescode_BW",
		38:  "Landescode_BY",
		39:  "Landescode_BZ",
		40:  "Landescode_CA",
		41:  "Landescode_CC",
		42:  "Landescode_CD",
		43:  "Landescode_CF",
		44:  "Landescode_CG",
		45:  "Landescode_CH",
		46:  "Landescode_CI",
		47:  "Landescode_CK",
		48:  "Landescode_CL",
		49:  "Landescode_CM",
		50:  "Landescode_CN",
		51:  "Landescode_CO",
		52:  "Landescode_CP",
		53:  "Landescode_CR",
		54:  "Landescode_CS",
		55:  "Landescode_CU",
		56:  "Landescode_CV",
		57:  "Landescode_CW",
		58:  "Landescode_CX",
		59:  "Landescode_CY",
		60:  "Landescode_CZ",
		61:  "Landescode_DE",
		62:  "Landescode_DG",
		63:  "Landescode_DJ",
		64:  "Landescode_DK",
		65:  "Landescode_DM",
		66:  "Landescode_DO",
		67:  "Landescode_DZ",
		68:  "Landescode_EA",
		69:  "Landescode_EC",
		70:  "Landescode_EE",
		71:  "Landescode_EG",
		72:  "Landescode_EH",
		73:  "Landescode_ER",
		74:  "Landescode_ES",
		75:  "Landescode_ET",
		76:  "Landescode_EU",
		77:  "Landescode_FI",
		78:  "Landescode_FJ",
		79:  "Landescode_FK",
		80:  "Landescode_FM",
		81:  "Landescode_FO",
		82:  "Landescode_FR",
		83:  "Landescode_FX",
		84:  "Landescode_GA",
		85:  "Landescode_GB",
		86:  "Landescode_GD",
		87:  "Landescode_GE",
		88:  "Landescode_GF",
		89:  "Landescode_GG",
		90:  "Landescode_GH",
		91:  "Landescode_GI",
		92:  "Landescode_GL",
		93:  "Landescode_GM",
		94:  "Landescode_GN",
		95:  "Landescode_GP",
		96:  "Landescode_GQ",
		97:  "Landescode_GR",
		98:  "Landescode_GS",
		99:  "Landescode_GT",
		100: "Landescode_GU",
		101: "Landescode_GW",
		102: "Landescode_GY",
		103: "Landescode_HK",
		104: "Landescode_HM",
		105: "Landescode_HN",
		106: "Landescode_HR",
		107: "Landescode_HT",
		108: "Landescode_HU",
		109: "Landescode_IC",
		110: "Landescode_ID",
		111: "Landescode_IE",
		112: "Landescode_IL",
		113: "Landescode_IM",
		114: "Landescode_IN",
		115: "Landescode_IO",
		116: "Landescode_IQ",
		117: "Landescode_IR",
		118: "Landescode_IS",
		119: "Landescode_IT",
		120: "Landescode_JE",
		121: "Landescode_JM",
		122: "Landescode_JO",
		123: "Landescode_JP",
		124: "Landescode_KE",
		125: "Landescode_KG",
		126: "Landescode_KH",
		127: "Landescode_KI",
		128: "Landescode_KM",
		129: "Landescode_KN",
		130: "Landescode_KP",
		131: "Landescode_KR",
		132: "Landescode_KW",
		133: "Landescode_KY",
		134: "Landescode_KZ",
		135: "Landescode_LA",
		136: "Landescode_LB",
		137: "Landescode_LC",
		138: "Landescode_LI",
		139: "Landescode_LK",
		140: "Landescode_LR",
		141: "Landescode_LS",
		142: "Landescode_LT",
		143: "Landescode_LU",
		144: "Landescode_LV",
		145: "Landescode_LY",
		146: "Landescode_MA",
		147: "Landescode_MC",
		148: "Landescode_MD",
		149: "Landescode_ME",
		150: "Landescode_MF",
		151: "Landescode_MG",
		152: "Landescode_MH",
		153: "Landescode_MK",
		154: "Landescode_ML",
		155: "Landescode_MM",
		156: "Landescode_MN",
		157: "Landescode_MO",
		158: "Landescode_MP",
		159: "Landescode_MQ",
		160: "Landescode_MR",
		161: "Landescode_MS",
		162: "Landescode_MT",
		163: "Landescode_MU",
		164: "Landescode_MV",
		165: "Landescode_MW",
		166: "Landescode_MX",
		167: "Landescode_MY",
		168: "Landescode_MZ",
		169: "Landescode_NA",
		170: "Landescode_NC",
		171: "Landescode_NE",
		172: "Landescode_NF",
		173: "Landescode_NG",
		174: "Landescode_NI",
		175: "Landescode_NL",
		176: "Landescode_NO",
		177: "Landescode_NP",
		178: "Landescode_NR",
		179: "Landescode_NT",
		180: "Landescode_NU",
		181: "Landescode_NZ",
		182: "Landescode_OM",
		183: "Landescode_PA",
		184: "Landescode_PE",
		185: "Landescode_PF",
		186: "Landescode_PG",
		187: "Landescode_PH",
		188: "Landescode_PK",
		189: "Landescode_PL",
		190: "Landescode_PM",
		191: "Landescode_PN",
		192: "Landescode_PR",
		193: "Landescode_PS",
		194: "Landescode_PT",
		195: "Landescode_PW",
		196: "Landescode_PY",
		197: "Landescode_QA",
		198: "Landescode_RE",
		199: "Landescode_RO",
		200: "Landescode_RS",
		201: "Landescode_RU",
		202: "Landescode_RW",
		203: "Landescode_SA",
		204: "Landescode_SB",
		205: "Landescode_SC",
		206: "Landescode_SD",
		207: "Landescode_SE",
		208: "Landescode_SF",
		209: "Landescode_SG",
		210: "Landescode_SH",
		211: "Landescode_SI",
		212: "Landescode_SJ",
		213: "Landescode_SK",
		214: "Landescode_SL",
		215: "Landescode_SM",
		216: "Landescode_SN",
		217: "Landescode_SO",
		218: "Landescode_SR",
		219: "Landescode_SS",
		220: "Landescode_ST",
		221: "Landescode_SU",
		222: "Landescode_SV",
		223: "Landescode_SX",
		224: "Landescode_SY",
		225: "Landescode_SZ",
		226: "Landescode_TA",
		227: "Landescode_TC",
		228: "Landescode_TD",
		229: "Landescode_TF",
		230: "Landescode_TG",
		231: "Landescode_TJ",
		232: "Landescode_TK",
		233: "Landescode_TL",
		234: "Landescode_TM",
		235: "Landescode_TN",
		236: "Landescode_TO",
		237: "Landescode_TP",
		238: "Landescode_TR",
		239: "Landescode_TT",
		240: "Landescode_TV",
		241: "Landescode_TW",
		242: "Landescode_TZ",
		243: "Landescode_UA",
		244: "Landescode_UG",
		245: "Landescode_UK",
		246: "Landescode_UM",
		247: "Landescode_US",
		248: "Landescode_UY",
		249: "Landescode_UZ",
		250: "Landescode_VA",
		251: "Landescode_VC",
		252: "Landescode_VE",
		253: "Landescode_VG",
		254: "Landescode_VI",
		255: "Landescode_VN",
		256: "Landescode_VU",
		257: "Landescode_WF",
		258: "Landescode_WS",
		259: "Landescode_XK",
		260: "Landescode_YE",
		261: "Landescode_YT",
		262: "Landescode_YU",
		263: "Landescode_ZA",
		264: "Landescode_ZM",
		265: "Landescode_ZR",
		266: "Landescode_ZW",
	}
	Landescode_value = map[string]int32{
		"Landescode_AC": 0,
		"Landescode_AD": 1,
		"Landescode_AE": 2,
		"Landescode_AF": 3,
		"Landescode_AG": 4,
		"Landescode_AI": 5,
		"Landescode_AL": 6,
		"Landescode_AM": 7,
		"Landescode_AN": 8,
		"Landescode_AO": 9,
		"Landescode_AQ": 10,
		"Landescode_AR": 11,
		"Landescode_AS": 12,
		"Landescode_AT": 13,
		"Landescode_AU": 14,
		"Landescode_AW": 15,
		"Landescode_AX": 16,
		"Landescode_AZ": 17,
		"Landescode_BA": 18,
		"Landescode_BB": 19,
		"Landescode_BD": 20,
		"Landescode_BE": 21,
		"Landescode_BF": 22,
		"Landescode_BG": 23,
		"Landescode_BH": 24,
		"Landescode_BI": 25,
		"Landescode_BJ": 26,
		"Landescode_BL": 27,
		"Landescode_BM": 28,
		"Landescode_BN": 29,
		"Landescode_BO": 30,
		"Landescode_BQ": 31,
		"Landescode_BR": 32,
		"Landescode_BS": 33,
		"Landescode_BT": 34,
		"Landescode_BU": 35,
		"Landescode_BV": 36,
		"Landescode_BW": 37,
		"Landescode_BY": 38,
		"Landescode_BZ": 39,
		"Landescode_CA": 40,
		"Landescode_CC": 41,
		"Landescode_CD": 42,
		"Landescode_CF": 43,
		"Landescode_CG": 44,
		"Landescode_CH": 45,
		"Landescode_CI": 46,
		"Landescode_CK": 47,
		"Landescode_CL": 48,
		"Landescode_CM": 49,
		"Landescode_CN": 50,
		"Landescode_CO": 51,
		"Landescode_CP": 52,
		"Landescode_CR": 53,
		"Landescode_CS": 54,
		"Landescode_CU": 55,
		"Landescode_CV": 56,
		"Landescode_CW": 57,
		"Landescode_CX": 58,
		"Landescode_CY": 59,
		"Landescode_CZ": 60,
		"Landescode_DE": 61,
		"Landescode_DG": 62,
		"Landescode_DJ": 63,
		"Landescode_DK": 64,
		"Landescode_DM": 65,
		"Landescode_DO": 66,
		"Landescode_DZ": 67,
		"Landescode_EA": 68,
		"Landescode_EC": 69,
		"Landescode_EE": 70,
		"Landescode_EG": 71,
		"Landescode_EH": 72,
		"Landescode_ER": 73,
		"Landescode_ES": 74,
		"Landescode_ET": 75,
		"Landescode_EU": 76,
		"Landescode_FI": 77,
		"Landescode_FJ": 78,
		"Landescode_FK": 79,
		"Landescode_FM": 80,
		"Landescode_FO": 81,
		"Landescode_FR": 82,
		"Landescode_FX": 83,
		"Landescode_GA": 84,
		"Landescode_GB": 85,
		"Landescode_GD": 86,
		"Landescode_GE": 87,
		"Landescode_GF": 88,
		"Landescode_GG": 89,
		"Landescode_GH": 90,
		"Landescode_GI": 91,
		"Landescode_GL": 92,
		"Landescode_GM": 93,
		"Landescode_GN": 94,
		"Landescode_GP": 95,
		"Landescode_GQ": 96,
		"Landescode_GR": 97,
		"Landescode_GS": 98,
		"Landescode_GT": 99,
		"Landescode_GU": 100,
		"Landescode_GW": 101,
		"Landescode_GY": 102,
		"Landescode_HK": 103,
		"Landescode_HM": 104,
		"Landescode_HN": 105,
		"Landescode_HR": 106,
		"Landescode_HT": 107,
		"Landescode_HU": 108,
		"Landescode_IC": 109,
		"Landescode_ID": 110,
		"Landescode_IE": 111,
		"Landescode_IL": 112,
		"Landescode_IM": 113,
		"Landescode_IN": 114,
		"Landescode_IO": 115,
		"Landescode_IQ": 116,
		"Landescode_IR": 117,
		"Landescode_IS": 118,
		"Landescode_IT": 119,
		"Landescode_JE": 120,
		"Landescode_JM": 121,
		"Landescode_JO": 122,
		"Landescode_JP": 123,
		"Landescode_KE": 124,
		"Landescode_KG": 125,
		"Landescode_KH": 126,
		"Landescode_KI": 127,
		"Landescode_KM": 128,
		"Landescode_KN": 129,
		"Landescode_KP": 130,
		"Landescode_KR": 131,
		"Landescode_KW": 132,
		"Landescode_KY": 133,
		"Landescode_KZ": 134,
		"Landescode_LA": 135,
		"Landescode_LB": 136,
		"Landescode_LC": 137,
		"Landescode_LI": 138,
		"Landescode_LK": 139,
		"Landescode_LR": 140,
		"Landescode_LS": 141,
		"Landescode_LT": 142,
		"Landescode_LU": 143,
		"Landescode_LV": 144,
		"Landescode_LY": 145,
		"Landescode_MA": 146,
		"Landescode_MC": 147,
		"Landescode_MD": 148,
		"Landescode_ME": 149,
		"Landescode_MF": 150,
		"Landescode_MG": 151,
		"Landescode_MH": 152,
		"Landescode_MK": 153,
		"Landescode_ML": 154,
		"Landescode_MM": 155,
		"Landescode_MN": 156,
		"Landescode_MO": 157,
		"Landescode_MP": 158,
		"Landescode_MQ": 159,
		"Landescode_MR": 160,
		"Landescode_MS": 161,
		"Landescode_MT": 162,
		"Landescode_MU": 163,
		"Landescode_MV": 164,
		"Landescode_MW": 165,
		"Landescode_MX": 166,
		"Landescode_MY": 167,
		"Landescode_MZ": 168,
		"Landescode_NA": 169,
		"Landescode_NC": 170,
		"Landescode_NE": 171,
		"Landescode_NF": 172,
		"Landescode_NG": 173,
		"Landescode_NI": 174,
		"Landescode_NL": 175,
		"Landescode_NO": 176,
		"Landescode_NP": 177,
		"Landescode_NR": 178,
		"Landescode_NT": 179,
		"Landescode_NU": 180,
		"Landescode_NZ": 181,
		"Landescode_OM": 182,
		"Landescode_PA": 183,
		"Landescode_PE": 184,
		"Landescode_PF": 185,
		"Landescode_PG": 186,
		"Landescode_PH": 187,
		"Landescode_PK": 188,
		"Landescode_PL": 189,
		"Landescode_PM": 190,
		"Landescode_PN": 191,
		"Landescode_PR": 192,
		"Landescode_PS": 193,
		"Landescode_PT": 194,
		"Landescode_PW": 195,
		"Landescode_PY": 196,
		"Landescode_QA": 197,
		"Landescode_RE": 198,
		"Landescode_RO": 199,
		"Landescode_RS": 200,
		"Landescode_RU": 201,
		"Landescode_RW": 202,
		"Landescode_SA": 203,
		"Landescode_SB": 204,
		"Landescode_SC": 205,
		"Landescode_SD": 206,
		"Landescode_SE": 207,
		"Landescode_SF": 208,
		"Landescode_SG": 209,
		"Landescode_SH": 210,
		"Landescode_SI": 211,
		"Landescode_SJ": 212,
		"Landescode_SK": 213,
		"Landescode_SL": 214,
		"Landescode_SM": 215,
		"Landescode_SN": 216,
		"Landescode_SO": 217,
		"Landescode_SR": 218,
		"Landescode_SS": 219,
		"Landescode_ST": 220,
		"Landescode_SU": 221,
		"Landescode_SV": 222,
		"Landescode_SX": 223,
		"Landescode_SY": 224,
		"Landescode_SZ": 225,
		"Landescode_TA": 226,
		"Landescode_TC": 227,
		"Landescode_TD": 228,
		"Landescode_TF": 229,
		"Landescode_TG": 230,
		"Landescode_TJ": 231,
		"Landescode_TK": 232,
		"Landescode_TL": 233,
		"Landescode_TM": 234,
		"Landescode_TN": 235,
		"Landescode_TO": 236,
		"Landescode_TP": 237,
		"Landescode_TR": 238,
		"Landescode_TT": 239,
		"Landescode_TV": 240,
		"Landescode_TW": 241,
		"Landescode_TZ": 242,
		"Landescode_UA": 243,
		"Landescode_UG": 244,
		"Landescode_UK": 245,
		"Landescode_UM": 246,
		"Landescode_US": 247,
		"Landescode_UY": 248,
		"Landescode_UZ": 249,
		"Landescode_VA": 250,
		"Landescode_VC": 251,
		"Landescode_VE": 252,
		"Landescode_VG": 253,
		"Landescode_VI": 254,
		"Landescode_VN": 255,
		"Landescode_VU": 256,
		"Landescode_WF": 257,
		"Landescode_WS": 258,
		"Landescode_XK": 259,
		"Landescode_YE": 260,
		"Landescode_YT": 261,
		"Landescode_YU": 262,
		"Landescode_ZA": 263,
		"Landescode_ZM": 264,
		"Landescode_ZR": 265,
		"Landescode_ZW": 266,
	}
)

func (x Landescode) Enum() *Landescode {
	p := new(Landescode)
	*p = x
	return p
}

func (x Landescode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Landescode) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[21].Descriptor()
}

func (Landescode) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[21]
}

func (x Landescode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Landescode.Descriptor instead.
func (Landescode) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{21}
}

type Leistungstyp int32

const (
	Leistungstyp_ARBEITSPREIS_WIRKARBEIT         Leistungstyp = 0
	Leistungstyp_LEISTUNGSPREIS_WIRKLEISTUNG     Leistungstyp = 1
	Leistungstyp_ARBEITSPREIS_BLINDARBEIT_IND    Leistungstyp = 2
	Leistungstyp_ARBEITSPREIS_BLINDARBEIT_KAP    Leistungstyp = 3
	Leistungstyp_GRUNDPREIS                      Leistungstyp = 4
	Leistungstyp_MEHRMINDERMENGE                 Leistungstyp = 5
	Leistungstyp_MESSSTELLENBETRIEB              Leistungstyp = 6
	Leistungstyp_MESSDIENSTLEISTUNG              Leistungstyp = 7
	Leistungstyp_MESSDIENSTLEISTUNG_INKL_MESSUNG Leistungstyp = 8
	Leistungstyp_ABRECHNUNG                      Leistungstyp = 9
	Leistungstyp_KONZESSIONS_ABGABE              Leistungstyp = 10
	Leistungstyp_KWK_UMLAGE                      Leistungstyp = 11
	Leistungstyp_OFFSHORE_UMLAGE                 Leistungstyp = 12
	Leistungstyp_ABLAV_UMLAGE                    Leistungstyp = 13
	Leistungstyp_REGELENERGIE_UMLAGE             Leistungstyp = 14
	Leistungstyp_BILANZIERUNG_UMLAGE             Leistungstyp = 15
	Leistungstyp_AUSLESUNG_ZUSAETZLICH           Leistungstyp = 16
	Leistungstyp_ABLESUNG_ZUSAETZLICH            Leistungstyp = 17
	Leistungstyp_ABRECHNUNG_ZUSAETZLICH          Leistungstyp = 18
	Leistungstyp_SPERRUNG                        Leistungstyp = 19
	Leistungstyp_ENTSPERRUNG                     Leistungstyp = 20
	Leistungstyp_MAHNKOSTEN                      Leistungstyp = 21
	Leistungstyp_INKASSOKOSTEN                   Leistungstyp = 22
)

// Enum value maps for Leistungstyp.
var (
	Leistungstyp_name = map[int32]string{
		0:  "ARBEITSPREIS_WIRKARBEIT",
		1:  "LEISTUNGSPREIS_WIRKLEISTUNG",
		2:  "ARBEITSPREIS_BLINDARBEIT_IND",
		3:  "ARBEITSPREIS_BLINDARBEIT_KAP",
		4:  "GRUNDPREIS",
		5:  "MEHRMINDERMENGE",
		6:  "MESSSTELLENBETRIEB",
		7:  "MESSDIENSTLEISTUNG",
		8:  "MESSDIENSTLEISTUNG_INKL_MESSUNG",
		9:  "ABRECHNUNG",
		10: "KONZESSIONS_ABGABE",
		11: "KWK_UMLAGE",
		12: "OFFSHORE_UMLAGE",
		13: "ABLAV_UMLAGE",
		14: "REGELENERGIE_UMLAGE",
		15: "BILANZIERUNG_UMLAGE",
		16: "AUSLESUNG_ZUSAETZLICH",
		17: "ABLESUNG_ZUSAETZLICH",
		18: "ABRECHNUNG_ZUSAETZLICH",
		19: "SPERRUNG",
		20: "ENTSPERRUNG",
		21: "MAHNKOSTEN",
		22: "INKASSOKOSTEN",
	}
	Leistungstyp_value = map[string]int32{
		"ARBEITSPREIS_WIRKARBEIT":         0,
		"LEISTUNGSPREIS_WIRKLEISTUNG":     1,
		"ARBEITSPREIS_BLINDARBEIT_IND":    2,
		"ARBEITSPREIS_BLINDARBEIT_KAP":    3,
		"GRUNDPREIS":                      4,
		"MEHRMINDERMENGE":                 5,
		"MESSSTELLENBETRIEB":              6,
		"MESSDIENSTLEISTUNG":              7,
		"MESSDIENSTLEISTUNG_INKL_MESSUNG": 8,
		"ABRECHNUNG":                      9,
		"KONZESSIONS_ABGABE":              10,
		"KWK_UMLAGE":                      11,
		"OFFSHORE_UMLAGE":                 12,
		"ABLAV_UMLAGE":                    13,
		"REGELENERGIE_UMLAGE":             14,
		"BILANZIERUNG_UMLAGE":             15,
		"AUSLESUNG_ZUSAETZLICH":           16,
		"ABLESUNG_ZUSAETZLICH":            17,
		"ABRECHNUNG_ZUSAETZLICH":          18,
		"SPERRUNG":                        19,
		"ENTSPERRUNG":                     20,
		"MAHNKOSTEN":                      21,
		"INKASSOKOSTEN":                   22,
	}
)

func (x Leistungstyp) Enum() *Leistungstyp {
	p := new(Leistungstyp)
	*p = x
	return p
}

func (x Leistungstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Leistungstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[22].Descriptor()
}

func (Leistungstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[22]
}

func (x Leistungstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Leistungstyp.Descriptor instead.
func (Leistungstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{22}
}

type Lokationstyp int32

const (
	Lokationstyp_MaLo Lokationstyp = 0
	Lokationstyp_MeLo Lokationstyp = 1
)

// Enum value maps for Lokationstyp.
var (
	Lokationstyp_name = map[int32]string{
		0: "MaLo",
		1: "MeLo",
	}
	Lokationstyp_value = map[string]int32{
		"MaLo": 0,
		"MeLo": 1,
	}
)

func (x Lokationstyp) Enum() *Lokationstyp {
	p := new(Lokationstyp)
	*p = x
	return p
}

func (x Lokationstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lokationstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[23].Descriptor()
}

func (Lokationstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[23]
}

func (x Lokationstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Lokationstyp.Descriptor instead.
func (Lokationstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{23}
}

type Marktrolle int32

const (
	Marktrolle_NB              Marktrolle = 0
	Marktrolle_LF              Marktrolle = 1
	Marktrolle_MSB             Marktrolle = 2
	Marktrolle_MDL             Marktrolle = 3
	Marktrolle_DL              Marktrolle = 4
	Marktrolle_BKV             Marktrolle = 5
	Marktrolle_BIKO            Marktrolle = 6
	Marktrolle_UENB            Marktrolle = 7
	Marktrolle_KUNDE_SELBST_NN Marktrolle = 8
	Marktrolle_MGV             Marktrolle = 9
	Marktrolle_EIV             Marktrolle = 10
	Marktrolle_RB              Marktrolle = 11
	Marktrolle_KUNDE           Marktrolle = 12
	Marktrolle_INTERESSENT     Marktrolle = 13
)

// Enum value maps for Marktrolle.
var (
	Marktrolle_name = map[int32]string{
		0:  "NB",
		1:  "LF",
		2:  "MSB",
		3:  "MDL",
		4:  "DL",
		5:  "BKV",
		6:  "BIKO",
		7:  "UENB",
		8:  "KUNDE_SELBST_NN",
		9:  "MGV",
		10: "EIV",
		11: "RB",
		12: "KUNDE",
		13: "INTERESSENT",
	}
	Marktrolle_value = map[string]int32{
		"NB":              0,
		"LF":              1,
		"MSB":             2,
		"MDL":             3,
		"DL":              4,
		"BKV":             5,
		"BIKO":            6,
		"UENB":            7,
		"KUNDE_SELBST_NN": 8,
		"MGV":             9,
		"EIV":             10,
		"RB":              11,
		"KUNDE":           12,
		"INTERESSENT":     13,
	}
)

func (x Marktrolle) Enum() *Marktrolle {
	p := new(Marktrolle)
	*p = x
	return p
}

func (x Marktrolle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Marktrolle) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[24].Descriptor()
}

func (Marktrolle) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[24]
}

func (x Marktrolle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Marktrolle.Descriptor instead.
func (Marktrolle) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{24}
}

type Mengeneinheit int32

const (
	Mengeneinheit_Mengeneinheit_ZERO Mengeneinheit = 0
	Mengeneinheit_WH                 Mengeneinheit = 2
	Mengeneinheit_KW                 Mengeneinheit = 3
	Mengeneinheit_KWH                Mengeneinheit = 2000
	Mengeneinheit_MW                 Mengeneinheit = 3000
	Mengeneinheit_MWH                Mengeneinheit = 2000000
	Mengeneinheit_ANZAHL             Mengeneinheit = 7
	Mengeneinheit_KUBIKMETER         Mengeneinheit = 11
	Mengeneinheit_STUNDE             Mengeneinheit = 13
	Mengeneinheit_TAG                Mengeneinheit = 17
	Mengeneinheit_MONAT              Mengeneinheit = 19
	Mengeneinheit_JAHR               Mengeneinheit = 228
	Mengeneinheit_VAR                Mengeneinheit = 23
	Mengeneinheit_KVAR               Mengeneinheit = 23000
	Mengeneinheit_VARH               Mengeneinheit = 29
	Mengeneinheit_KVARH              Mengeneinheit = 29000
)

// Enum value maps for Mengeneinheit.
var (
	Mengeneinheit_name = map[int32]string{
		0:       "Mengeneinheit_ZERO",
		2:       "WH",
		3:       "KW",
		2000:    "KWH",
		3000:    "MW",
		2000000: "MWH",
		7:       "ANZAHL",
		11:      "KUBIKMETER",
		13:      "STUNDE",
		17:      "TAG",
		19:      "MONAT",
		228:     "JAHR",
		23:      "VAR",
		23000:   "KVAR",
		29:      "VARH",
		29000:   "KVARH",
	}
	Mengeneinheit_value = map[string]int32{
		"Mengeneinheit_ZERO": 0,
		"WH":                 2,
		"KW":                 3,
		"KWH":                2000,
		"MW":                 3000,
		"MWH":                2000000,
		"ANZAHL":             7,
		"KUBIKMETER":         11,
		"STUNDE":             13,
		"TAG":                17,
		"MONAT":              19,
		"JAHR":               228,
		"VAR":                23,
		"KVAR":               23000,
		"VARH":               29,
		"KVARH":              29000,
	}
)

func (x Mengeneinheit) Enum() *Mengeneinheit {
	p := new(Mengeneinheit)
	*p = x
	return p
}

func (x Mengeneinheit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mengeneinheit) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[25].Descriptor()
}

func (Mengeneinheit) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[25]
}

func (x Mengeneinheit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mengeneinheit.Descriptor instead.
func (Mengeneinheit) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{25}
}

type Mengenoperator int32

const (
	Mengenoperator_KLEINER_ALS  Mengenoperator = 0
	Mengenoperator_GROESSER_ALS Mengenoperator = 1
	Mengenoperator_GLEICH       Mengenoperator = 2
)

// Enum value maps for Mengenoperator.
var (
	Mengenoperator_name = map[int32]string{
		0: "KLEINER_ALS",
		1: "GROESSER_ALS",
		2: "GLEICH",
	}
	Mengenoperator_value = map[string]int32{
		"KLEINER_ALS":  0,
		"GROESSER_ALS": 1,
		"GLEICH":       2,
	}
)

func (x Mengenoperator) Enum() *Mengenoperator {
	p := new(Mengenoperator)
	*p = x
	return p
}

func (x Mengenoperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mengenoperator) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[26].Descriptor()
}

func (Mengenoperator) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[26]
}

func (x Mengenoperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mengenoperator.Descriptor instead.
func (Mengenoperator) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{26}
}

type Messwerterfassung int32

const (
	Messwerterfassung_FERNAUSLESBAR       Messwerterfassung = 0
	Messwerterfassung_MANUELL_AUSGELESENE Messwerterfassung = 1
)

// Enum value maps for Messwerterfassung.
var (
	Messwerterfassung_name = map[int32]string{
		0: "FERNAUSLESBAR",
		1: "MANUELL_AUSGELESENE",
	}
	Messwerterfassung_value = map[string]int32{
		"FERNAUSLESBAR":       0,
		"MANUELL_AUSGELESENE": 1,
	}
)

func (x Messwerterfassung) Enum() *Messwerterfassung {
	p := new(Messwerterfassung)
	*p = x
	return p
}

func (x Messwerterfassung) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Messwerterfassung) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[27].Descriptor()
}

func (Messwerterfassung) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[27]
}

func (x Messwerterfassung) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Messwerterfassung.Descriptor instead.
func (Messwerterfassung) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{27}
}

type Netzebene int32

const (
	Netzebene_NSP          Netzebene = 0
	Netzebene_MSP          Netzebene = 1
	Netzebene_HSP          Netzebene = 2
	Netzebene_HSS          Netzebene = 3
	Netzebene_MSP_NSP_UMSP Netzebene = 4
	Netzebene_HSP_MSP_UMSP Netzebene = 5
	Netzebene_HSS_HSP_UMSP Netzebene = 6
	Netzebene_HD           Netzebene = 7
	Netzebene_MD           Netzebene = 8
	Netzebene_ND           Netzebene = 9
)

// Enum value maps for Netzebene.
var (
	Netzebene_name = map[int32]string{
		0: "NSP",
		1: "MSP",
		2: "HSP",
		3: "HSS",
		4: "MSP_NSP_UMSP",
		5: "HSP_MSP_UMSP",
		6: "HSS_HSP_UMSP",
		7: "HD",
		8: "MD",
		9: "ND",
	}
	Netzebene_value = map[string]int32{
		"NSP":          0,
		"MSP":          1,
		"HSP":          2,
		"HSS":          3,
		"MSP_NSP_UMSP": 4,
		"HSP_MSP_UMSP": 5,
		"HSS_HSP_UMSP": 6,
		"HD":           7,
		"MD":           8,
		"ND":           9,
	}
)

func (x Netzebene) Enum() *Netzebene {
	p := new(Netzebene)
	*p = x
	return p
}

func (x Netzebene) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Netzebene) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[28].Descriptor()
}

func (Netzebene) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[28]
}

func (x Netzebene) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Netzebene.Descriptor instead.
func (Netzebene) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{28}
}

type NetznutzungsVertrag int32

const (
	NetznutzungsVertrag_KUNDEN_NB      NetznutzungsVertrag = 0
	NetznutzungsVertrag_LIEFERANTEN_NB NetznutzungsVertrag = 1
)

// Enum value maps for NetznutzungsVertrag.
var (
	NetznutzungsVertrag_name = map[int32]string{
		0: "KUNDEN_NB",
		1: "LIEFERANTEN_NB",
	}
	NetznutzungsVertrag_value = map[string]int32{
		"KUNDEN_NB":      0,
		"LIEFERANTEN_NB": 1,
	}
)

func (x NetznutzungsVertrag) Enum() *NetznutzungsVertrag {
	p := new(NetznutzungsVertrag)
	*p = x
	return p
}

func (x NetznutzungsVertrag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetznutzungsVertrag) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[29].Descriptor()
}

func (NetznutzungsVertrag) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[29]
}

func (x NetznutzungsVertrag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetznutzungsVertrag.Descriptor instead.
func (NetznutzungsVertrag) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{29}
}

type Netznutzungsabrechnungsgrundlage int32

const (
	Netznutzungsabrechnungsgrundlage_LIEFERSCHEIN          Netznutzungsabrechnungsgrundlage = 0
	Netznutzungsabrechnungsgrundlage_ABWEICHENDE_GRUNDLAGE Netznutzungsabrechnungsgrundlage = 1
)

// Enum value maps for Netznutzungsabrechnungsgrundlage.
var (
	Netznutzungsabrechnungsgrundlage_name = map[int32]string{
		0: "LIEFERSCHEIN",
		1: "ABWEICHENDE_GRUNDLAGE",
	}
	Netznutzungsabrechnungsgrundlage_value = map[string]int32{
		"LIEFERSCHEIN":          0,
		"ABWEICHENDE_GRUNDLAGE": 1,
	}
)

func (x Netznutzungsabrechnungsgrundlage) Enum() *Netznutzungsabrechnungsgrundlage {
	p := new(Netznutzungsabrechnungsgrundlage)
	*p = x
	return p
}

func (x Netznutzungsabrechnungsgrundlage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Netznutzungsabrechnungsgrundlage) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[30].Descriptor()
}

func (Netznutzungsabrechnungsgrundlage) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[30]
}

func (x Netznutzungsabrechnungsgrundlage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Netznutzungsabrechnungsgrundlage.Descriptor instead.
func (Netznutzungsabrechnungsgrundlage) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{30}
}

type Netznutzungsabrechnungsvariante int32

const (
	Netznutzungsabrechnungsvariante_ARBEITSPREIS_GRUNDPREIS     Netznutzungsabrechnungsvariante = 0
	Netznutzungsabrechnungsvariante_ARBEITSPREIS_LEISTUNGSPREIS Netznutzungsabrechnungsvariante = 1
)

// Enum value maps for Netznutzungsabrechnungsvariante.
var (
	Netznutzungsabrechnungsvariante_name = map[int32]string{
		0: "ARBEITSPREIS_GRUNDPREIS",
		1: "ARBEITSPREIS_LEISTUNGSPREIS",
	}
	Netznutzungsabrechnungsvariante_value = map[string]int32{
		"ARBEITSPREIS_GRUNDPREIS":     0,
		"ARBEITSPREIS_LEISTUNGSPREIS": 1,
	}
)

func (x Netznutzungsabrechnungsvariante) Enum() *Netznutzungsabrechnungsvariante {
	p := new(Netznutzungsabrechnungsvariante)
	*p = x
	return p
}

func (x Netznutzungsabrechnungsvariante) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Netznutzungsabrechnungsvariante) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[31].Descriptor()
}

func (Netznutzungsabrechnungsvariante) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[31]
}

func (x Netznutzungsabrechnungsvariante) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Netznutzungsabrechnungsvariante.Descriptor instead.
func (Netznutzungsabrechnungsvariante) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{31}
}

type Netznutzungszahler int32

const (
	Netznutzungszahler_Netznutzungszahler_KUNDE     Netznutzungszahler = 0
	Netznutzungszahler_Netznutzungszahler_LIEFERANT Netznutzungszahler = 1
)

// Enum value maps for Netznutzungszahler.
var (
	Netznutzungszahler_name = map[int32]string{
		0: "Netznutzungszahler_KUNDE",
		1: "Netznutzungszahler_LIEFERANT",
	}
	Netznutzungszahler_value = map[string]int32{
		"Netznutzungszahler_KUNDE":     0,
		"Netznutzungszahler_LIEFERANT": 1,
	}
)

func (x Netznutzungszahler) Enum() *Netznutzungszahler {
	p := new(Netznutzungszahler)
	*p = x
	return p
}

func (x Netznutzungszahler) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Netznutzungszahler) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[32].Descriptor()
}

func (Netznutzungszahler) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[32]
}

func (x Netznutzungszahler) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Netznutzungszahler.Descriptor instead.
func (Netznutzungszahler) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{32}
}

type Preisstatus int32

const (
	Preisstatus_VORLAEUFIG Preisstatus = 0
	Preisstatus_ENDGUELTIG Preisstatus = 1
)

// Enum value maps for Preisstatus.
var (
	Preisstatus_name = map[int32]string{
		0: "VORLAEUFIG",
		1: "ENDGUELTIG",
	}
	Preisstatus_value = map[string]int32{
		"VORLAEUFIG": 0,
		"ENDGUELTIG": 1,
	}
)

func (x Preisstatus) Enum() *Preisstatus {
	p := new(Preisstatus)
	*p = x
	return p
}

func (x Preisstatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Preisstatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[33].Descriptor()
}

func (Preisstatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[33]
}

func (x Preisstatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Preisstatus.Descriptor instead.
func (Preisstatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{33}
}

type Prioritaet int32

const (
	Prioritaet_SEHR_NIEDRIG Prioritaet = 0
	Prioritaet_NIEDRIG      Prioritaet = 1
	Prioritaet_NORMAL       Prioritaet = 2
	Prioritaet_HOCH         Prioritaet = 3
	Prioritaet_SEHR_HOCH    Prioritaet = 4
)

// Enum value maps for Prioritaet.
var (
	Prioritaet_name = map[int32]string{
		0: "SEHR_NIEDRIG",
		1: "NIEDRIG",
		2: "NORMAL",
		3: "HOCH",
		4: "SEHR_HOCH",
	}
	Prioritaet_value = map[string]int32{
		"SEHR_NIEDRIG": 0,
		"NIEDRIG":      1,
		"NORMAL":       2,
		"HOCH":         3,
		"SEHR_HOCH":    4,
	}
)

func (x Prioritaet) Enum() *Prioritaet {
	p := new(Prioritaet)
	*p = x
	return p
}

func (x Prioritaet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Prioritaet) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[34].Descriptor()
}

func (Prioritaet) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[34]
}

func (x Prioritaet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Prioritaet.Descriptor instead.
func (Prioritaet) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{34}
}

type RechnungspositionsStatus int32

const (
	RechnungspositionsStatus_ROH                     RechnungspositionsStatus = 0
	RechnungspositionsStatus_ROH_AUSGENOMMEN         RechnungspositionsStatus = 1
	RechnungspositionsStatus_ABRECHENBAR             RechnungspositionsStatus = 2
	RechnungspositionsStatus_ABRECHENBAR_AUSGENOMMEN RechnungspositionsStatus = 3
	RechnungspositionsStatus_ABGERECHNET             RechnungspositionsStatus = 4
)

// Enum value maps for RechnungspositionsStatus.
var (
	RechnungspositionsStatus_name = map[int32]string{
		0: "ROH",
		1: "ROH_AUSGENOMMEN",
		2: "ABRECHENBAR",
		3: "ABRECHENBAR_AUSGENOMMEN",
		4: "ABGERECHNET",
	}
	RechnungspositionsStatus_value = map[string]int32{
		"ROH":                     0,
		"ROH_AUSGENOMMEN":         1,
		"ABRECHENBAR":             2,
		"ABRECHENBAR_AUSGENOMMEN": 3,
		"ABGERECHNET":             4,
	}
)

func (x RechnungspositionsStatus) Enum() *RechnungspositionsStatus {
	p := new(RechnungspositionsStatus)
	*p = x
	return p
}

func (x RechnungspositionsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RechnungspositionsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[35].Descriptor()
}

func (RechnungspositionsStatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[35]
}

func (x RechnungspositionsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RechnungspositionsStatus.Descriptor instead.
func (RechnungspositionsStatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{35}
}

type Rechnungsstatus int32

const (
	Rechnungsstatus_GEPRUEFT_OK         Rechnungsstatus = 0
	Rechnungsstatus_GEPRUEFT_FEHLERHAFT Rechnungsstatus = 1
	Rechnungsstatus_GEBUCHT             Rechnungsstatus = 2
	Rechnungsstatus_BEZAHLT             Rechnungsstatus = 3
)

// Enum value maps for Rechnungsstatus.
var (
	Rechnungsstatus_name = map[int32]string{
		0: "GEPRUEFT_OK",
		1: "GEPRUEFT_FEHLERHAFT",
		2: "GEBUCHT",
		3: "BEZAHLT",
	}
	Rechnungsstatus_value = map[string]int32{
		"GEPRUEFT_OK":         0,
		"GEPRUEFT_FEHLERHAFT": 1,
		"GEBUCHT":             2,
		"BEZAHLT":             3,
	}
)

func (x Rechnungsstatus) Enum() *Rechnungsstatus {
	p := new(Rechnungsstatus)
	*p = x
	return p
}

func (x Rechnungsstatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rechnungsstatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[36].Descriptor()
}

func (Rechnungsstatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[36]
}

func (x Rechnungsstatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rechnungsstatus.Descriptor instead.
func (Rechnungsstatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{36}
}

type Rechnungstyp int32

const (
	Rechnungstyp_ABSCHLAGSRECHNUNG          Rechnungstyp = 0
	Rechnungstyp_TURNUSRECHNUNG             Rechnungstyp = 1
	Rechnungstyp_MONATSRECHNUNG             Rechnungstyp = 2
	Rechnungstyp_WIMRECHNUNG                Rechnungstyp = 3
	Rechnungstyp_ZWISCHENRECHNUNG           Rechnungstyp = 4
	Rechnungstyp_INTEGRIERTE_13TE_RECHNUNG  Rechnungstyp = 5
	Rechnungstyp_ZUSAETZLICHE_13TE_RECHNUNG Rechnungstyp = 6
	Rechnungstyp_MEHRMINDERMENGENRECHNUNG   Rechnungstyp = 7
)

// Enum value maps for Rechnungstyp.
var (
	Rechnungstyp_name = map[int32]string{
		0: "ABSCHLAGSRECHNUNG",
		1: "TURNUSRECHNUNG",
		2: "MONATSRECHNUNG",
		3: "WIMRECHNUNG",
		4: "ZWISCHENRECHNUNG",
		5: "INTEGRIERTE_13TE_RECHNUNG",
		6: "ZUSAETZLICHE_13TE_RECHNUNG",
		7: "MEHRMINDERMENGENRECHNUNG",
	}
	Rechnungstyp_value = map[string]int32{
		"ABSCHLAGSRECHNUNG":          0,
		"TURNUSRECHNUNG":             1,
		"MONATSRECHNUNG":             2,
		"WIMRECHNUNG":                3,
		"ZWISCHENRECHNUNG":           4,
		"INTEGRIERTE_13TE_RECHNUNG":  5,
		"ZUSAETZLICHE_13TE_RECHNUNG": 6,
		"MEHRMINDERMENGENRECHNUNG":   7,
	}
)

func (x Rechnungstyp) Enum() *Rechnungstyp {
	p := new(Rechnungstyp)
	*p = x
	return p
}

func (x Rechnungstyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rechnungstyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[37].Descriptor()
}

func (Rechnungstyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[37]
}

func (x Rechnungstyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rechnungstyp.Descriptor instead.
func (Rechnungstyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{37}
}

type Regionskriteriumtyp int32

const (
	Regionskriteriumtyp_BUNDESLANDKENNZIFFER        Regionskriteriumtyp = 0
	Regionskriteriumtyp_BUNDESLAND_NAME             Regionskriteriumtyp = 1
	Regionskriteriumtyp_MARKTGEBIET_NUMMER          Regionskriteriumtyp = 2
	Regionskriteriumtyp_MARKTGEBIET_NAME            Regionskriteriumtyp = 3
	Regionskriteriumtyp_REGELGEBIET_NUMMER          Regionskriteriumtyp = 4
	Regionskriteriumtyp_REGELGEBIET_NAME            Regionskriteriumtyp = 5
	Regionskriteriumtyp_NETZBETREIBER_NUMMER        Regionskriteriumtyp = 6
	Regionskriteriumtyp_NETZBETREIBER_NAME          Regionskriteriumtyp = 7
	Regionskriteriumtyp_BILANZIERUNGS_GEBIET_NUMMER Regionskriteriumtyp = 8
	Regionskriteriumtyp_MSB_NUMMER                  Regionskriteriumtyp = 9
	Regionskriteriumtyp_MSB_NAME                    Regionskriteriumtyp = 10
	Regionskriteriumtyp_VERSORGER_NUMMER            Regionskriteriumtyp = 11
	Regionskriteriumtyp_VERSORGER_NAME              Regionskriteriumtyp = 12
	Regionskriteriumtyp_GRUNDVERSORGER_NUMMER       Regionskriteriumtyp = 13
	Regionskriteriumtyp_GRUNDVERSORGER_NAME         Regionskriteriumtyp = 14
	Regionskriteriumtyp_KREIS_NAME                  Regionskriteriumtyp = 15
	Regionskriteriumtyp_KREISKENNZIFFER             Regionskriteriumtyp = 16
	Regionskriteriumtyp_GEMEINDE_NAME               Regionskriteriumtyp = 17
	Regionskriteriumtyp_GEMEINDEKENNZIFFER          Regionskriteriumtyp = 18
	Regionskriteriumtyp_POSTLEITZAHL                Regionskriteriumtyp = 19
	Regionskriteriumtyp_ORT                         Regionskriteriumtyp = 20
	Regionskriteriumtyp_EINWOHNERZAHL_GEMEINDE      Regionskriteriumtyp = 21
	Regionskriteriumtyp_EINWOHNERZAHL_ORT           Regionskriteriumtyp = 22
	Regionskriteriumtyp_KM_UMKREIS                  Regionskriteriumtyp = 23
	Regionskriteriumtyp_BUNDESWEIT                  Regionskriteriumtyp = 24
)

// Enum value maps for Regionskriteriumtyp.
var (
	Regionskriteriumtyp_name = map[int32]string{
		0:  "BUNDESLANDKENNZIFFER",
		1:  "BUNDESLAND_NAME",
		2:  "MARKTGEBIET_NUMMER",
		3:  "MARKTGEBIET_NAME",
		4:  "REGELGEBIET_NUMMER",
		5:  "REGELGEBIET_NAME",
		6:  "NETZBETREIBER_NUMMER",
		7:  "NETZBETREIBER_NAME",
		8:  "BILANZIERUNGS_GEBIET_NUMMER",
		9:  "MSB_NUMMER",
		10: "MSB_NAME",
		11: "VERSORGER_NUMMER",
		12: "VERSORGER_NAME",
		13: "GRUNDVERSORGER_NUMMER",
		14: "GRUNDVERSORGER_NAME",
		15: "KREIS_NAME",
		16: "KREISKENNZIFFER",
		17: "GEMEINDE_NAME",
		18: "GEMEINDEKENNZIFFER",
		19: "POSTLEITZAHL",
		20: "ORT",
		21: "EINWOHNERZAHL_GEMEINDE",
		22: "EINWOHNERZAHL_ORT",
		23: "KM_UMKREIS",
		24: "BUNDESWEIT",
	}
	Regionskriteriumtyp_value = map[string]int32{
		"BUNDESLANDKENNZIFFER":        0,
		"BUNDESLAND_NAME":             1,
		"MARKTGEBIET_NUMMER":          2,
		"MARKTGEBIET_NAME":            3,
		"REGELGEBIET_NUMMER":          4,
		"REGELGEBIET_NAME":            5,
		"NETZBETREIBER_NUMMER":        6,
		"NETZBETREIBER_NAME":          7,
		"BILANZIERUNGS_GEBIET_NUMMER": 8,
		"MSB_NUMMER":                  9,
		"MSB_NAME":                    10,
		"VERSORGER_NUMMER":            11,
		"VERSORGER_NAME":              12,
		"GRUNDVERSORGER_NUMMER":       13,
		"GRUNDVERSORGER_NAME":         14,
		"KREIS_NAME":                  15,
		"KREISKENNZIFFER":             16,
		"GEMEINDE_NAME":               17,
		"GEMEINDEKENNZIFFER":          18,
		"POSTLEITZAHL":                19,
		"ORT":                         20,
		"EINWOHNERZAHL_GEMEINDE":      21,
		"EINWOHNERZAHL_ORT":           22,
		"KM_UMKREIS":                  23,
		"BUNDESWEIT":                  24,
	}
)

func (x Regionskriteriumtyp) Enum() *Regionskriteriumtyp {
	p := new(Regionskriteriumtyp)
	*p = x
	return p
}

func (x Regionskriteriumtyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Regionskriteriumtyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[38].Descriptor()
}

func (Regionskriteriumtyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[38]
}

func (x Regionskriteriumtyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Regionskriteriumtyp.Descriptor instead.
func (Regionskriteriumtyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{38}
}

type Rufnummernart int32

const (
	Rufnummernart_RUF_ZENTRALE  Rufnummernart = 0
	Rufnummernart_FAX_ZENTRALE  Rufnummernart = 1
	Rufnummernart_SAMMELRUF     Rufnummernart = 2
	Rufnummernart_SAMMELFAX     Rufnummernart = 3
	Rufnummernart_ABTEILUNGRUF  Rufnummernart = 4
	Rufnummernart_ABTEILUNGFAX  Rufnummernart = 5
	Rufnummernart_RUF_DURCHWAHL Rufnummernart = 6
	Rufnummernart_FAX_DURCHWAHL Rufnummernart = 7
	Rufnummernart_MOBIL_NUMMER  Rufnummernart = 8
)

// Enum value maps for Rufnummernart.
var (
	Rufnummernart_name = map[int32]string{
		0: "RUF_ZENTRALE",
		1: "FAX_ZENTRALE",
		2: "SAMMELRUF",
		3: "SAMMELFAX",
		4: "ABTEILUNGRUF",
		5: "ABTEILUNGFAX",
		6: "RUF_DURCHWAHL",
		7: "FAX_DURCHWAHL",
		8: "MOBIL_NUMMER",
	}
	Rufnummernart_value = map[string]int32{
		"RUF_ZENTRALE":  0,
		"FAX_ZENTRALE":  1,
		"SAMMELRUF":     2,
		"SAMMELFAX":     3,
		"ABTEILUNGRUF":  4,
		"ABTEILUNGFAX":  5,
		"RUF_DURCHWAHL": 6,
		"FAX_DURCHWAHL": 7,
		"MOBIL_NUMMER":  8,
	}
)

func (x Rufnummernart) Enum() *Rufnummernart {
	p := new(Rufnummernart)
	*p = x
	return p
}

func (x Rufnummernart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rufnummernart) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[39].Descriptor()
}

func (Rufnummernart) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[39]
}

func (x Rufnummernart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rufnummernart.Descriptor instead.
func (Rufnummernart) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{39}
}

type Schwachlastfaehig int32

const (
	Schwachlastfaehig_NICHT_SCHWACHLASTFAEHIG Schwachlastfaehig = 0
	Schwachlastfaehig_SCHWACHLASTFAEHIG       Schwachlastfaehig = 1
)

// Enum value maps for Schwachlastfaehig.
var (
	Schwachlastfaehig_name = map[int32]string{
		0: "NICHT_SCHWACHLASTFAEHIG",
		1: "SCHWACHLASTFAEHIG",
	}
	Schwachlastfaehig_value = map[string]int32{
		"NICHT_SCHWACHLASTFAEHIG": 0,
		"SCHWACHLASTFAEHIG":       1,
	}
)

func (x Schwachlastfaehig) Enum() *Schwachlastfaehig {
	p := new(Schwachlastfaehig)
	*p = x
	return p
}

func (x Schwachlastfaehig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schwachlastfaehig) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[40].Descriptor()
}

func (Schwachlastfaehig) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[40]
}

func (x Schwachlastfaehig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schwachlastfaehig.Descriptor instead.
func (Schwachlastfaehig) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{40}
}

type Sparte int32

const (
	Sparte_Sparte_STROM      Sparte = 0
	Sparte_Sparte_GAS        Sparte = 1
	Sparte_Sparte_FERNWAERME Sparte = 2
	Sparte_Sparte_NAHWAERME  Sparte = 3
	Sparte_Sparte_WASSER     Sparte = 4
	Sparte_Sparte_ABWASSER   Sparte = 5
)

// Enum value maps for Sparte.
var (
	Sparte_name = map[int32]string{
		0: "Sparte_STROM",
		1: "Sparte_GAS",
		2: "Sparte_FERNWAERME",
		3: "Sparte_NAHWAERME",
		4: "Sparte_WASSER",
		5: "Sparte_ABWASSER",
	}
	Sparte_value = map[string]int32{
		"Sparte_STROM":      0,
		"Sparte_GAS":        1,
		"Sparte_FERNWAERME": 2,
		"Sparte_NAHWAERME":  3,
		"Sparte_WASSER":     4,
		"Sparte_ABWASSER":   5,
	}
)

func (x Sparte) Enum() *Sparte {
	p := new(Sparte)
	*p = x
	return p
}

func (x Sparte) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sparte) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[41].Descriptor()
}

func (Sparte) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[41]
}

func (x Sparte) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sparte.Descriptor instead.
func (Sparte) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{41}
}

type Steuerkennzeichen int32

const (
	Steuerkennzeichen_UST_19 Steuerkennzeichen = 0
	Steuerkennzeichen_UST_7  Steuerkennzeichen = 1
	Steuerkennzeichen_VST_0  Steuerkennzeichen = 2
	Steuerkennzeichen_VST_19 Steuerkennzeichen = 3
	Steuerkennzeichen_VST_7  Steuerkennzeichen = 4
	Steuerkennzeichen_RCV    Steuerkennzeichen = 5
)

// Enum value maps for Steuerkennzeichen.
var (
	Steuerkennzeichen_name = map[int32]string{
		0: "UST_19",
		1: "UST_7",
		2: "VST_0",
		3: "VST_19",
		4: "VST_7",
		5: "RCV",
	}
	Steuerkennzeichen_value = map[string]int32{
		"UST_19": 0,
		"UST_7":  1,
		"VST_0":  2,
		"VST_19": 3,
		"VST_7":  4,
		"RCV":    5,
	}
)

func (x Steuerkennzeichen) Enum() *Steuerkennzeichen {
	p := new(Steuerkennzeichen)
	*p = x
	return p
}

func (x Steuerkennzeichen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Steuerkennzeichen) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[42].Descriptor()
}

func (Steuerkennzeichen) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[42]
}

func (x Steuerkennzeichen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Steuerkennzeichen.Descriptor instead.
func (Steuerkennzeichen) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{42}
}

type Tarifart int32

const (
	Tarifart_EINTARIF          Tarifart = 0
	Tarifart_ZWEITARIF         Tarifart = 1
	Tarifart_MEHRTARIF         Tarifart = 2
	Tarifart_SMART_METER       Tarifart = 3
	Tarifart_LEISTUNGSGEMESSEN Tarifart = 4
)

// Enum value maps for Tarifart.
var (
	Tarifart_name = map[int32]string{
		0: "EINTARIF",
		1: "ZWEITARIF",
		2: "MEHRTARIF",
		3: "SMART_METER",
		4: "LEISTUNGSGEMESSEN",
	}
	Tarifart_value = map[string]int32{
		"EINTARIF":          0,
		"ZWEITARIF":         1,
		"MEHRTARIF":         2,
		"SMART_METER":       3,
		"LEISTUNGSGEMESSEN": 4,
	}
)

func (x Tarifart) Enum() *Tarifart {
	p := new(Tarifart)
	*p = x
	return p
}

func (x Tarifart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tarifart) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[43].Descriptor()
}

func (Tarifart) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[43]
}

func (x Tarifart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tarifart.Descriptor instead.
func (Tarifart) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{43}
}

type Tarifzeit int32

const (
	Tarifzeit_TZ_STANDARD Tarifzeit = 0
	Tarifzeit_TZ_HT       Tarifzeit = 1
	Tarifzeit_TZ_NT       Tarifzeit = 2
)

// Enum value maps for Tarifzeit.
var (
	Tarifzeit_name = map[int32]string{
		0: "TZ_STANDARD",
		1: "TZ_HT",
		2: "TZ_NT",
	}
	Tarifzeit_value = map[string]int32{
		"TZ_STANDARD": 0,
		"TZ_HT":       1,
		"TZ_NT":       2,
	}
)

func (x Tarifzeit) Enum() *Tarifzeit {
	p := new(Tarifzeit)
	*p = x
	return p
}

func (x Tarifzeit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tarifzeit) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[44].Descriptor()
}

func (Tarifzeit) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[44]
}

func (x Tarifzeit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tarifzeit.Descriptor instead.
func (Tarifzeit) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{44}
}

type Titel int32

const (
	Titel_DR      Titel = 0
	Titel_PROF    Titel = 1
	Titel_PROF_DR Titel = 2
)

// Enum value maps for Titel.
var (
	Titel_name = map[int32]string{
		0: "DR",
		1: "PROF",
		2: "PROF_DR",
	}
	Titel_value = map[string]int32{
		"DR":      0,
		"PROF":    1,
		"PROF_DR": 2,
	}
)

func (x Titel) Enum() *Titel {
	p := new(Titel)
	*p = x
	return p
}

func (x Titel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Titel) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[45].Descriptor()
}

func (Titel) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[45]
}

func (x Titel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Titel.Descriptor instead.
func (Titel) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{45}
}

type Unterbrechbarkeit int32

const (
	Unterbrechbarkeit_UV  Unterbrechbarkeit = 0
	Unterbrechbarkeit_NUV Unterbrechbarkeit = 1
)

// Enum value maps for Unterbrechbarkeit.
var (
	Unterbrechbarkeit_name = map[int32]string{
		0: "UV",
		1: "NUV",
	}
	Unterbrechbarkeit_value = map[string]int32{
		"UV":  0,
		"NUV": 1,
	}
)

func (x Unterbrechbarkeit) Enum() *Unterbrechbarkeit {
	p := new(Unterbrechbarkeit)
	*p = x
	return p
}

func (x Unterbrechbarkeit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Unterbrechbarkeit) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[46].Descriptor()
}

func (Unterbrechbarkeit) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[46]
}

func (x Unterbrechbarkeit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Unterbrechbarkeit.Descriptor instead.
func (Unterbrechbarkeit) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{46}
}

type Verbrauchsart int32

const (
	Verbrauchsart_KL   Verbrauchsart = 0
	Verbrauchsart_KLW  Verbrauchsart = 1
	Verbrauchsart_KLWS Verbrauchsart = 2
	Verbrauchsart_W    Verbrauchsart = 3
	Verbrauchsart_WS   Verbrauchsart = 4
)

// Enum value maps for Verbrauchsart.
var (
	Verbrauchsart_name = map[int32]string{
		0: "KL",
		1: "KLW",
		2: "KLWS",
		3: "W",
		4: "WS",
	}
	Verbrauchsart_value = map[string]int32{
		"KL":   0,
		"KLW":  1,
		"KLWS": 2,
		"W":    3,
		"WS":   4,
	}
)

func (x Verbrauchsart) Enum() *Verbrauchsart {
	p := new(Verbrauchsart)
	*p = x
	return p
}

func (x Verbrauchsart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verbrauchsart) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[47].Descriptor()
}

func (Verbrauchsart) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[47]
}

func (x Verbrauchsart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verbrauchsart.Descriptor instead.
func (Verbrauchsart) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{47}
}

type Verbrauchsmengetyp int32

const (
	Verbrauchsmengetyp_ARBEITLEISTUNGTAGESPARAMETERABHMALO Verbrauchsmengetyp = 0
	Verbrauchsmengetyp_VERANSCHLAGTEJAHRESMENGE            Verbrauchsmengetyp = 1
	Verbrauchsmengetyp_TUMKUNDENWERT                       Verbrauchsmengetyp = 2
)

// Enum value maps for Verbrauchsmengetyp.
var (
	Verbrauchsmengetyp_name = map[int32]string{
		0: "ARBEITLEISTUNGTAGESPARAMETERABHMALO",
		1: "VERANSCHLAGTEJAHRESMENGE",
		2: "TUMKUNDENWERT",
	}
	Verbrauchsmengetyp_value = map[string]int32{
		"ARBEITLEISTUNGTAGESPARAMETERABHMALO": 0,
		"VERANSCHLAGTEJAHRESMENGE":            1,
		"TUMKUNDENWERT":                       2,
	}
)

func (x Verbrauchsmengetyp) Enum() *Verbrauchsmengetyp {
	p := new(Verbrauchsmengetyp)
	*p = x
	return p
}

func (x Verbrauchsmengetyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verbrauchsmengetyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[48].Descriptor()
}

func (Verbrauchsmengetyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[48]
}

func (x Verbrauchsmengetyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verbrauchsmengetyp.Descriptor instead.
func (Verbrauchsmengetyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{48}
}

type Vertragsart int32

const (
	Vertragsart_ENERGIELIEFERVERTRAG       Vertragsart = 0
	Vertragsart_NETZNUTZUNGSVERTRAG        Vertragsart = 1
	Vertragsart_BILANZIERUNGSVERTRAG       Vertragsart = 2
	Vertragsart_MESSSTELLENBETRIEBSVERTRAG Vertragsart = 3
	Vertragsart_BUENDELVERTRAG             Vertragsart = 4
)

// Enum value maps for Vertragsart.
var (
	Vertragsart_name = map[int32]string{
		0: "ENERGIELIEFERVERTRAG",
		1: "NETZNUTZUNGSVERTRAG",
		2: "BILANZIERUNGSVERTRAG",
		3: "MESSSTELLENBETRIEBSVERTRAG",
		4: "BUENDELVERTRAG",
	}
	Vertragsart_value = map[string]int32{
		"ENERGIELIEFERVERTRAG":       0,
		"NETZNUTZUNGSVERTRAG":        1,
		"BILANZIERUNGSVERTRAG":       2,
		"MESSSTELLENBETRIEBSVERTRAG": 3,
		"BUENDELVERTRAG":             4,
	}
)

func (x Vertragsart) Enum() *Vertragsart {
	p := new(Vertragsart)
	*p = x
	return p
}

func (x Vertragsart) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vertragsart) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[49].Descriptor()
}

func (Vertragsart) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[49]
}

func (x Vertragsart) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vertragsart.Descriptor instead.
func (Vertragsart) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{49}
}

type Vertragstatus int32

const (
	Vertragstatus_Vertragstatus_IN_ARBEIT    Vertragstatus = 0
	Vertragstatus_Vertragstatus_UEBERMITTELT Vertragstatus = 1
	Vertragstatus_Vertragstatus_ANGENOMMEN   Vertragstatus = 2
	Vertragstatus_Vertragstatus_AKTIV        Vertragstatus = 3
	Vertragstatus_Vertragstatus_ABGELEHNT    Vertragstatus = 4
	Vertragstatus_Vertragstatus_WIDERRUFEN   Vertragstatus = 5
	Vertragstatus_Vertragstatus_STORNIERT    Vertragstatus = 6
	Vertragstatus_Vertragstatus_GEKUENDIGT   Vertragstatus = 7
	Vertragstatus_Vertragstatus_BEENDET      Vertragstatus = 8
)

// Enum value maps for Vertragstatus.
var (
	Vertragstatus_name = map[int32]string{
		0: "Vertragstatus_IN_ARBEIT",
		1: "Vertragstatus_UEBERMITTELT",
		2: "Vertragstatus_ANGENOMMEN",
		3: "Vertragstatus_AKTIV",
		4: "Vertragstatus_ABGELEHNT",
		5: "Vertragstatus_WIDERRUFEN",
		6: "Vertragstatus_STORNIERT",
		7: "Vertragstatus_GEKUENDIGT",
		8: "Vertragstatus_BEENDET",
	}
	Vertragstatus_value = map[string]int32{
		"Vertragstatus_IN_ARBEIT":    0,
		"Vertragstatus_UEBERMITTELT": 1,
		"Vertragstatus_ANGENOMMEN":   2,
		"Vertragstatus_AKTIV":        3,
		"Vertragstatus_ABGELEHNT":    4,
		"Vertragstatus_WIDERRUFEN":   5,
		"Vertragstatus_STORNIERT":    6,
		"Vertragstatus_GEKUENDIGT":   7,
		"Vertragstatus_BEENDET":      8,
	}
)

func (x Vertragstatus) Enum() *Vertragstatus {
	p := new(Vertragstatus)
	*p = x
	return p
}

func (x Vertragstatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vertragstatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[50].Descriptor()
}

func (Vertragstatus) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[50]
}

func (x Vertragstatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vertragstatus.Descriptor instead.
func (Vertragstatus) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{50}
}

type Verwendungszweck int32

const (
	Verwendungszweck_NETZNUTZUNGSABRECHNUNG      Verwendungszweck = 0
	Verwendungszweck_BILANZKREISABRECHNUNG       Verwendungszweck = 1
	Verwendungszweck_MEHRMINDERMBENGENABRECHNUNG Verwendungszweck = 2
	Verwendungszweck_ENDKUNDENABRECHNUNG         Verwendungszweck = 3
)

// Enum value maps for Verwendungszweck.
var (
	Verwendungszweck_name = map[int32]string{
		0: "NETZNUTZUNGSABRECHNUNG",
		1: "BILANZKREISABRECHNUNG",
		2: "MEHRMINDERMBENGENABRECHNUNG",
		3: "ENDKUNDENABRECHNUNG",
	}
	Verwendungszweck_value = map[string]int32{
		"NETZNUTZUNGSABRECHNUNG":      0,
		"BILANZKREISABRECHNUNG":       1,
		"MEHRMINDERMBENGENABRECHNUNG": 2,
		"ENDKUNDENABRECHNUNG":         3,
	}
)

func (x Verwendungszweck) Enum() *Verwendungszweck {
	p := new(Verwendungszweck)
	*p = x
	return p
}

func (x Verwendungszweck) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verwendungszweck) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[51].Descriptor()
}

func (Verwendungszweck) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[51]
}

func (x Verwendungszweck) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verwendungszweck.Descriptor instead.
func (Verwendungszweck) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{51}
}

type Waehrungscode int32

const (
	Waehrungscode_AFN               Waehrungscode = 0
	Waehrungscode_ALL               Waehrungscode = 1
	Waehrungscode_AMD               Waehrungscode = 2
	Waehrungscode_ANG               Waehrungscode = 3
	Waehrungscode_AOA               Waehrungscode = 4
	Waehrungscode_ARS               Waehrungscode = 5
	Waehrungscode_AUD               Waehrungscode = 6
	Waehrungscode_AWG               Waehrungscode = 7
	Waehrungscode_AZN               Waehrungscode = 8
	Waehrungscode_BAM               Waehrungscode = 9
	Waehrungscode_BBD               Waehrungscode = 10
	Waehrungscode_BDT               Waehrungscode = 11
	Waehrungscode_BGN               Waehrungscode = 12
	Waehrungscode_BHD               Waehrungscode = 13
	Waehrungscode_BIF               Waehrungscode = 14
	Waehrungscode_BMD               Waehrungscode = 15
	Waehrungscode_BND               Waehrungscode = 16
	Waehrungscode_BOB               Waehrungscode = 17
	Waehrungscode_BOV               Waehrungscode = 18
	Waehrungscode_BRL               Waehrungscode = 19
	Waehrungscode_BSD               Waehrungscode = 20
	Waehrungscode_BTN               Waehrungscode = 21
	Waehrungscode_BWP               Waehrungscode = 22
	Waehrungscode_BYN               Waehrungscode = 23
	Waehrungscode_BYR               Waehrungscode = 24
	Waehrungscode_BZD               Waehrungscode = 25
	Waehrungscode_CAD               Waehrungscode = 26
	Waehrungscode_CDF               Waehrungscode = 27
	Waehrungscode_CHE               Waehrungscode = 28
	Waehrungscode_CHF               Waehrungscode = 29
	Waehrungscode_CHW               Waehrungscode = 30
	Waehrungscode_CLF               Waehrungscode = 31
	Waehrungscode_CLP               Waehrungscode = 32
	Waehrungscode_CNY               Waehrungscode = 33
	Waehrungscode_COP               Waehrungscode = 34
	Waehrungscode_COU               Waehrungscode = 35
	Waehrungscode_CRC               Waehrungscode = 36
	Waehrungscode_CUC               Waehrungscode = 37
	Waehrungscode_CUP               Waehrungscode = 38
	Waehrungscode_CVE               Waehrungscode = 39
	Waehrungscode_CZK               Waehrungscode = 40
	Waehrungscode_DJF               Waehrungscode = 41
	Waehrungscode_DKK               Waehrungscode = 42
	Waehrungscode_DOP               Waehrungscode = 43
	Waehrungscode_DZD               Waehrungscode = 44
	Waehrungscode_EGP               Waehrungscode = 45
	Waehrungscode_ERN               Waehrungscode = 46
	Waehrungscode_ETB               Waehrungscode = 47
	Waehrungscode_EUR               Waehrungscode = 48
	Waehrungscode_FJD               Waehrungscode = 49
	Waehrungscode_FKP               Waehrungscode = 50
	Waehrungscode_GBP               Waehrungscode = 51
	Waehrungscode_GEL               Waehrungscode = 52
	Waehrungscode_GHS               Waehrungscode = 53
	Waehrungscode_GIP               Waehrungscode = 54
	Waehrungscode_GMD               Waehrungscode = 55
	Waehrungscode_GNF               Waehrungscode = 56
	Waehrungscode_GTQ               Waehrungscode = 57
	Waehrungscode_GYD               Waehrungscode = 58
	Waehrungscode_HKD               Waehrungscode = 59
	Waehrungscode_HNL               Waehrungscode = 60
	Waehrungscode_HRK               Waehrungscode = 61
	Waehrungscode_HTG               Waehrungscode = 62
	Waehrungscode_HUF               Waehrungscode = 63
	Waehrungscode_IDR               Waehrungscode = 64
	Waehrungscode_ILS               Waehrungscode = 65
	Waehrungscode_INR               Waehrungscode = 66
	Waehrungscode_IQD               Waehrungscode = 67
	Waehrungscode_IRR               Waehrungscode = 68
	Waehrungscode_ISK               Waehrungscode = 69
	Waehrungscode_JMD               Waehrungscode = 70
	Waehrungscode_JOD               Waehrungscode = 71
	Waehrungscode_JPY               Waehrungscode = 72
	Waehrungscode_KES               Waehrungscode = 73
	Waehrungscode_KGS               Waehrungscode = 74
	Waehrungscode_KHR               Waehrungscode = 75
	Waehrungscode_KMF               Waehrungscode = 76
	Waehrungscode_KPW               Waehrungscode = 77
	Waehrungscode_KRW               Waehrungscode = 78
	Waehrungscode_KWD               Waehrungscode = 79
	Waehrungscode_KYD               Waehrungscode = 80
	Waehrungscode_KZT               Waehrungscode = 81
	Waehrungscode_LAK               Waehrungscode = 82
	Waehrungscode_LBP               Waehrungscode = 83
	Waehrungscode_LKR               Waehrungscode = 84
	Waehrungscode_LRD               Waehrungscode = 85
	Waehrungscode_LSL               Waehrungscode = 86
	Waehrungscode_LTL               Waehrungscode = 87
	Waehrungscode_LYD               Waehrungscode = 88
	Waehrungscode_MAD               Waehrungscode = 89
	Waehrungscode_Waehrungscode_MDL Waehrungscode = 90
	Waehrungscode_MGA               Waehrungscode = 91
	Waehrungscode_MKD               Waehrungscode = 92
	Waehrungscode_MMK               Waehrungscode = 93
	Waehrungscode_MNT               Waehrungscode = 94
	Waehrungscode_MOP               Waehrungscode = 95
	Waehrungscode_MRO               Waehrungscode = 96
	Waehrungscode_MUR               Waehrungscode = 97
	Waehrungscode_MVR               Waehrungscode = 98
	Waehrungscode_MWK               Waehrungscode = 99
	Waehrungscode_MXN               Waehrungscode = 100
	Waehrungscode_MXV               Waehrungscode = 101
	Waehrungscode_MYR               Waehrungscode = 102
	Waehrungscode_MZN               Waehrungscode = 103
	Waehrungscode_NAD               Waehrungscode = 104
	Waehrungscode_NGN               Waehrungscode = 105
	Waehrungscode_NIO               Waehrungscode = 106
	Waehrungscode_NOK               Waehrungscode = 107
	Waehrungscode_NPR               Waehrungscode = 108
	Waehrungscode_NZD               Waehrungscode = 109
	Waehrungscode_OMR               Waehrungscode = 110
	Waehrungscode_PAB               Waehrungscode = 111
	Waehrungscode_PEN               Waehrungscode = 112
	Waehrungscode_PGK               Waehrungscode = 113
	Waehrungscode_PHP               Waehrungscode = 114
	Waehrungscode_PKR               Waehrungscode = 115
	Waehrungscode_PLN               Waehrungscode = 116
	Waehrungscode_PYG               Waehrungscode = 117
	Waehrungscode_QAR               Waehrungscode = 118
	Waehrungscode_RON               Waehrungscode = 119
	Waehrungscode_RSD               Waehrungscode = 120
	Waehrungscode_RUB               Waehrungscode = 121
	Waehrungscode_RUR               Waehrungscode = 122
	Waehrungscode_RWF               Waehrungscode = 123
	Waehrungscode_SAR               Waehrungscode = 124
	Waehrungscode_SBD               Waehrungscode = 125
	Waehrungscode_SCR               Waehrungscode = 126
	Waehrungscode_SDG               Waehrungscode = 127
	Waehrungscode_SEK               Waehrungscode = 128
	Waehrungscode_SGD               Waehrungscode = 129
	Waehrungscode_SHP               Waehrungscode = 130
	Waehrungscode_SLL               Waehrungscode = 131
	Waehrungscode_SOS               Waehrungscode = 132
	Waehrungscode_SRD               Waehrungscode = 133
	Waehrungscode_SSP               Waehrungscode = 134
	Waehrungscode_STD               Waehrungscode = 135
	Waehrungscode_SVC               Waehrungscode = 136
	Waehrungscode_SYP               Waehrungscode = 137
	Waehrungscode_SZL               Waehrungscode = 138
	Waehrungscode_THB               Waehrungscode = 139
	Waehrungscode_TJS               Waehrungscode = 140
	Waehrungscode_TMT               Waehrungscode = 141
	Waehrungscode_TND               Waehrungscode = 142
	Waehrungscode_TOP               Waehrungscode = 143
	Waehrungscode_TRY               Waehrungscode = 144
	Waehrungscode_TTD               Waehrungscode = 145
	Waehrungscode_TWD               Waehrungscode = 146
	Waehrungscode_TZS               Waehrungscode = 147
	Waehrungscode_UAH               Waehrungscode = 148
	Waehrungscode_UGX               Waehrungscode = 149
	Waehrungscode_USD               Waehrungscode = 150
	Waehrungscode_USN               Waehrungscode = 151
	Waehrungscode_USS               Waehrungscode = 152
	Waehrungscode_UYI               Waehrungscode = 153
	Waehrungscode_UYU               Waehrungscode = 154
	Waehrungscode_UZS               Waehrungscode = 155
	Waehrungscode_VEF               Waehrungscode = 156
	Waehrungscode_VND               Waehrungscode = 157
	Waehrungscode_VUV               Waehrungscode = 158
	Waehrungscode_WST               Waehrungscode = 159
	Waehrungscode_XAF               Waehrungscode = 160
	Waehrungscode_XAG               Waehrungscode = 161
	Waehrungscode_XAU               Waehrungscode = 162
	Waehrungscode_XBA               Waehrungscode = 163
	Waehrungscode_XBB               Waehrungscode = 164
	Waehrungscode_XBC               Waehrungscode = 165
	Waehrungscode_XBD               Waehrungscode = 166
	Waehrungscode_XCD               Waehrungscode = 167
	Waehrungscode_XDR               Waehrungscode = 168
	Waehrungscode_XOF               Waehrungscode = 169
	Waehrungscode_XPD               Waehrungscode = 170
	Waehrungscode_XPF               Waehrungscode = 171
	Waehrungscode_XPT               Waehrungscode = 172
	Waehrungscode_XSU               Waehrungscode = 173
	Waehrungscode_XTS               Waehrungscode = 174
	Waehrungscode_XUA               Waehrungscode = 175
	Waehrungscode_XXX               Waehrungscode = 176
	Waehrungscode_YER               Waehrungscode = 177
	Waehrungscode_ZAR               Waehrungscode = 178
	Waehrungscode_ZMW               Waehrungscode = 179
	Waehrungscode_ZWL               Waehrungscode = 180
)

// Enum value maps for Waehrungscode.
var (
	Waehrungscode_name = map[int32]string{
		0:   "AFN",
		1:   "ALL",
		2:   "AMD",
		3:   "ANG",
		4:   "AOA",
		5:   "ARS",
		6:   "AUD",
		7:   "AWG",
		8:   "AZN",
		9:   "BAM",
		10:  "BBD",
		11:  "BDT",
		12:  "BGN",
		13:  "BHD",
		14:  "BIF",
		15:  "BMD",
		16:  "BND",
		17:  "BOB",
		18:  "BOV",
		19:  "BRL",
		20:  "BSD",
		21:  "BTN",
		22:  "BWP",
		23:  "BYN",
		24:  "BYR",
		25:  "BZD",
		26:  "CAD",
		27:  "CDF",
		28:  "CHE",
		29:  "CHF",
		30:  "CHW",
		31:  "CLF",
		32:  "CLP",
		33:  "CNY",
		34:  "COP",
		35:  "COU",
		36:  "CRC",
		37:  "CUC",
		38:  "CUP",
		39:  "CVE",
		40:  "CZK",
		41:  "DJF",
		42:  "DKK",
		43:  "DOP",
		44:  "DZD",
		45:  "EGP",
		46:  "ERN",
		47:  "ETB",
		48:  "EUR",
		49:  "FJD",
		50:  "FKP",
		51:  "GBP",
		52:  "GEL",
		53:  "GHS",
		54:  "GIP",
		55:  "GMD",
		56:  "GNF",
		57:  "GTQ",
		58:  "GYD",
		59:  "HKD",
		60:  "HNL",
		61:  "HRK",
		62:  "HTG",
		63:  "HUF",
		64:  "IDR",
		65:  "ILS",
		66:  "INR",
		67:  "IQD",
		68:  "IRR",
		69:  "ISK",
		70:  "JMD",
		71:  "JOD",
		72:  "JPY",
		73:  "KES",
		74:  "KGS",
		75:  "KHR",
		76:  "KMF",
		77:  "KPW",
		78:  "KRW",
		79:  "KWD",
		80:  "KYD",
		81:  "KZT",
		82:  "LAK",
		83:  "LBP",
		84:  "LKR",
		85:  "LRD",
		86:  "LSL",
		87:  "LTL",
		88:  "LYD",
		89:  "MAD",
		90:  "Waehrungscode_MDL",
		91:  "MGA",
		92:  "MKD",
		93:  "MMK",
		94:  "MNT",
		95:  "MOP",
		96:  "MRO",
		97:  "MUR",
		98:  "MVR",
		99:  "MWK",
		100: "MXN",
		101: "MXV",
		102: "MYR",
		103: "MZN",
		104: "NAD",
		105: "NGN",
		106: "NIO",
		107: "NOK",
		108: "NPR",
		109: "NZD",
		110: "OMR",
		111: "PAB",
		112: "PEN",
		113: "PGK",
		114: "PHP",
		115: "PKR",
		116: "PLN",
		117: "PYG",
		118: "QAR",
		119: "RON",
		120: "RSD",
		121: "RUB",
		122: "RUR",
		123: "RWF",
		124: "SAR",
		125: "SBD",
		126: "SCR",
		127: "SDG",
		128: "SEK",
		129: "SGD",
		130: "SHP",
		131: "SLL",
		132: "SOS",
		133: "SRD",
		134: "SSP",
		135: "STD",
		136: "SVC",
		137: "SYP",
		138: "SZL",
		139: "THB",
		140: "TJS",
		141: "TMT",
		142: "TND",
		143: "TOP",
		144: "TRY",
		145: "TTD",
		146: "TWD",
		147: "TZS",
		148: "UAH",
		149: "UGX",
		150: "USD",
		151: "USN",
		152: "USS",
		153: "UYI",
		154: "UYU",
		155: "UZS",
		156: "VEF",
		157: "VND",
		158: "VUV",
		159: "WST",
		160: "XAF",
		161: "XAG",
		162: "XAU",
		163: "XBA",
		164: "XBB",
		165: "XBC",
		166: "XBD",
		167: "XCD",
		168: "XDR",
		169: "XOF",
		170: "XPD",
		171: "XPF",
		172: "XPT",
		173: "XSU",
		174: "XTS",
		175: "XUA",
		176: "XXX",
		177: "YER",
		178: "ZAR",
		179: "ZMW",
		180: "ZWL",
	}
	Waehrungscode_value = map[string]int32{
		"AFN":               0,
		"ALL":               1,
		"AMD":               2,
		"ANG":               3,
		"AOA":               4,
		"ARS":               5,
		"AUD":               6,
		"AWG":               7,
		"AZN":               8,
		"BAM":               9,
		"BBD":               10,
		"BDT":               11,
		"BGN":               12,
		"BHD":               13,
		"BIF":               14,
		"BMD":               15,
		"BND":               16,
		"BOB":               17,
		"BOV":               18,
		"BRL":               19,
		"BSD":               20,
		"BTN":               21,
		"BWP":               22,
		"BYN":               23,
		"BYR":               24,
		"BZD":               25,
		"CAD":               26,
		"CDF":               27,
		"CHE":               28,
		"CHF":               29,
		"CHW":               30,
		"CLF":               31,
		"CLP":               32,
		"CNY":               33,
		"COP":               34,
		"COU":               35,
		"CRC":               36,
		"CUC":               37,
		"CUP":               38,
		"CVE":               39,
		"CZK":               40,
		"DJF":               41,
		"DKK":               42,
		"DOP":               43,
		"DZD":               44,
		"EGP":               45,
		"ERN":               46,
		"ETB":               47,
		"EUR":               48,
		"FJD":               49,
		"FKP":               50,
		"GBP":               51,
		"GEL":               52,
		"GHS":               53,
		"GIP":               54,
		"GMD":               55,
		"GNF":               56,
		"GTQ":               57,
		"GYD":               58,
		"HKD":               59,
		"HNL":               60,
		"HRK":               61,
		"HTG":               62,
		"HUF":               63,
		"IDR":               64,
		"ILS":               65,
		"INR":               66,
		"IQD":               67,
		"IRR":               68,
		"ISK":               69,
		"JMD":               70,
		"JOD":               71,
		"JPY":               72,
		"KES":               73,
		"KGS":               74,
		"KHR":               75,
		"KMF":               76,
		"KPW":               77,
		"KRW":               78,
		"KWD":               79,
		"KYD":               80,
		"KZT":               81,
		"LAK":               82,
		"LBP":               83,
		"LKR":               84,
		"LRD":               85,
		"LSL":               86,
		"LTL":               87,
		"LYD":               88,
		"MAD":               89,
		"Waehrungscode_MDL": 90,
		"MGA":               91,
		"MKD":               92,
		"MMK":               93,
		"MNT":               94,
		"MOP":               95,
		"MRO":               96,
		"MUR":               97,
		"MVR":               98,
		"MWK":               99,
		"MXN":               100,
		"MXV":               101,
		"MYR":               102,
		"MZN":               103,
		"NAD":               104,
		"NGN":               105,
		"NIO":               106,
		"NOK":               107,
		"NPR":               108,
		"NZD":               109,
		"OMR":               110,
		"PAB":               111,
		"PEN":               112,
		"PGK":               113,
		"PHP":               114,
		"PKR":               115,
		"PLN":               116,
		"PYG":               117,
		"QAR":               118,
		"RON":               119,
		"RSD":               120,
		"RUB":               121,
		"RUR":               122,
		"RWF":               123,
		"SAR":               124,
		"SBD":               125,
		"SCR":               126,
		"SDG":               127,
		"SEK":               128,
		"SGD":               129,
		"SHP":               130,
		"SLL":               131,
		"SOS":               132,
		"SRD":               133,
		"SSP":               134,
		"STD":               135,
		"SVC":               136,
		"SYP":               137,
		"SZL":               138,
		"THB":               139,
		"TJS":               140,
		"TMT":               141,
		"TND":               142,
		"TOP":               143,
		"TRY":               144,
		"TTD":               145,
		"TWD":               146,
		"TZS":               147,
		"UAH":               148,
		"UGX":               149,
		"USD":               150,
		"USN":               151,
		"USS":               152,
		"UYI":               153,
		"UYU":               154,
		"UZS":               155,
		"VEF":               156,
		"VND":               157,
		"VUV":               158,
		"WST":               159,
		"XAF":               160,
		"XAG":               161,
		"XAU":               162,
		"XBA":               163,
		"XBB":               164,
		"XBC":               165,
		"XBD":               166,
		"XCD":               167,
		"XDR":               168,
		"XOF":               169,
		"XPD":               170,
		"XPF":               171,
		"XPT":               172,
		"XSU":               173,
		"XTS":               174,
		"XUA":               175,
		"XXX":               176,
		"YER":               177,
		"ZAR":               178,
		"ZMW":               179,
		"ZWL":               180,
	}
)

func (x Waehrungscode) Enum() *Waehrungscode {
	p := new(Waehrungscode)
	*p = x
	return p
}

func (x Waehrungscode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Waehrungscode) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[52].Descriptor()
}

func (Waehrungscode) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[52]
}

func (x Waehrungscode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Waehrungscode.Descriptor instead.
func (Waehrungscode) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{52}
}

type Waehrungseinheit int32

const (
	Waehrungseinheit_Waehrungseinheit_EUR Waehrungseinheit = 0
	Waehrungseinheit_CT                   Waehrungseinheit = 1
)

// Enum value maps for Waehrungseinheit.
var (
	Waehrungseinheit_name = map[int32]string{
		0: "Waehrungseinheit_EUR",
		1: "CT",
	}
	Waehrungseinheit_value = map[string]int32{
		"Waehrungseinheit_EUR": 0,
		"CT":                   1,
	}
)

func (x Waehrungseinheit) Enum() *Waehrungseinheit {
	p := new(Waehrungseinheit)
	*p = x
	return p
}

func (x Waehrungseinheit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Waehrungseinheit) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[53].Descriptor()
}

func (Waehrungseinheit) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[53]
}

func (x Waehrungseinheit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Waehrungseinheit.Descriptor instead.
func (Waehrungseinheit) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{53}
}

type Waermenutzung int32

const (
	Waermenutzung_SPEICHERHEIZUNG Waermenutzung = 0
	Waermenutzung_WAERMEPUMPE     Waermenutzung = 1
	Waermenutzung_DIREKTHEIZUNG   Waermenutzung = 2
)

// Enum value maps for Waermenutzung.
var (
	Waermenutzung_name = map[int32]string{
		0: "SPEICHERHEIZUNG",
		1: "WAERMEPUMPE",
		2: "DIREKTHEIZUNG",
	}
	Waermenutzung_value = map[string]int32{
		"SPEICHERHEIZUNG": 0,
		"WAERMEPUMPE":     1,
		"DIREKTHEIZUNG":   2,
	}
)

func (x Waermenutzung) Enum() *Waermenutzung {
	p := new(Waermenutzung)
	*p = x
	return p
}

func (x Waermenutzung) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Waermenutzung) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[54].Descriptor()
}

func (Waermenutzung) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[54]
}

func (x Waermenutzung) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Waermenutzung.Descriptor instead.
func (Waermenutzung) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{54}
}

type Wertermittlungsverfahren int32

const (
	Wertermittlungsverfahren_PROGNOSE Wertermittlungsverfahren = 0
	Wertermittlungsverfahren_MESSUNG  Wertermittlungsverfahren = 1
)

// Enum value maps for Wertermittlungsverfahren.
var (
	Wertermittlungsverfahren_name = map[int32]string{
		0: "PROGNOSE",
		1: "MESSUNG",
	}
	Wertermittlungsverfahren_value = map[string]int32{
		"PROGNOSE": 0,
		"MESSUNG":  1,
	}
)

func (x Wertermittlungsverfahren) Enum() *Wertermittlungsverfahren {
	p := new(Wertermittlungsverfahren)
	*p = x
	return p
}

func (x Wertermittlungsverfahren) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Wertermittlungsverfahren) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[55].Descriptor()
}

func (Wertermittlungsverfahren) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[55]
}

func (x Wertermittlungsverfahren) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Wertermittlungsverfahren.Descriptor instead.
func (Wertermittlungsverfahren) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{55}
}

type Zaehlerauspraegung int32

const (
	Zaehlerauspraegung_EINRICHTUNGSZAEHLER  Zaehlerauspraegung = 0
	Zaehlerauspraegung_ZWEIRICHTUNGSZAEHLER Zaehlerauspraegung = 1
)

// Enum value maps for Zaehlerauspraegung.
var (
	Zaehlerauspraegung_name = map[int32]string{
		0: "EINRICHTUNGSZAEHLER",
		1: "ZWEIRICHTUNGSZAEHLER",
	}
	Zaehlerauspraegung_value = map[string]int32{
		"EINRICHTUNGSZAEHLER":  0,
		"ZWEIRICHTUNGSZAEHLER": 1,
	}
)

func (x Zaehlerauspraegung) Enum() *Zaehlerauspraegung {
	p := new(Zaehlerauspraegung)
	*p = x
	return p
}

func (x Zaehlerauspraegung) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zaehlerauspraegung) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[56].Descriptor()
}

func (Zaehlerauspraegung) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[56]
}

func (x Zaehlerauspraegung) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zaehlerauspraegung.Descriptor instead.
func (Zaehlerauspraegung) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{56}
}

type Zaehlertyp int32

const (
	Zaehlertyp_DREHSTROMZAEHLER      Zaehlertyp = 0
	Zaehlertyp_BALGENGASZAEHLER      Zaehlertyp = 1
	Zaehlertyp_DREHKOLBENZAEHLER     Zaehlertyp = 2
	Zaehlertyp_SMARTMETER            Zaehlertyp = 3
	Zaehlertyp_LEISTUNGSZAEHLER      Zaehlertyp = 4
	Zaehlertyp_MAXIMUMZAEHLER        Zaehlertyp = 5
	Zaehlertyp_TURBINENRADGASZAEHLER Zaehlertyp = 6
	Zaehlertyp_ULTRASCHALLGASZAEHLER Zaehlertyp = 7
	Zaehlertyp_WECHSELSTROMZAEHLER   Zaehlertyp = 8
)

// Enum value maps for Zaehlertyp.
var (
	Zaehlertyp_name = map[int32]string{
		0: "DREHSTROMZAEHLER",
		1: "BALGENGASZAEHLER",
		2: "DREHKOLBENZAEHLER",
		3: "SMARTMETER",
		4: "LEISTUNGSZAEHLER",
		5: "MAXIMUMZAEHLER",
		6: "TURBINENRADGASZAEHLER",
		7: "ULTRASCHALLGASZAEHLER",
		8: "WECHSELSTROMZAEHLER",
	}
	Zaehlertyp_value = map[string]int32{
		"DREHSTROMZAEHLER":      0,
		"BALGENGASZAEHLER":      1,
		"DREHKOLBENZAEHLER":     2,
		"SMARTMETER":            3,
		"LEISTUNGSZAEHLER":      4,
		"MAXIMUMZAEHLER":        5,
		"TURBINENRADGASZAEHLER": 6,
		"ULTRASCHALLGASZAEHLER": 7,
		"WECHSELSTROMZAEHLER":   8,
	}
)

func (x Zaehlertyp) Enum() *Zaehlertyp {
	p := new(Zaehlertyp)
	*p = x
	return p
}

func (x Zaehlertyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zaehlertyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[57].Descriptor()
}

func (Zaehlertyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[57]
}

func (x Zaehlertyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zaehlertyp.Descriptor instead.
func (Zaehlertyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{57}
}

type Zeiteinheit int32

const (
	Zeiteinheit_Zeiteinheit_SEKUNDE        Zeiteinheit = 0
	Zeiteinheit_Zeiteinheit_MINUTE         Zeiteinheit = 1
	Zeiteinheit_Zeiteinheit_STUNDE         Zeiteinheit = 2
	Zeiteinheit_Zeiteinheit_VIERTEL_STUNDE Zeiteinheit = 3
	Zeiteinheit_Zeiteinheit_TAG            Zeiteinheit = 4
	Zeiteinheit_Zeiteinheit_WOCHE          Zeiteinheit = 5
	Zeiteinheit_Zeiteinheit_MONAT          Zeiteinheit = 6
	Zeiteinheit_Zeiteinheit_QUARTAL        Zeiteinheit = 7
	Zeiteinheit_Zeiteinheit_HALBJAHR       Zeiteinheit = 8
	Zeiteinheit_Zeiteinheit_JAHR           Zeiteinheit = 9
)

// Enum value maps for Zeiteinheit.
var (
	Zeiteinheit_name = map[int32]string{
		0: "Zeiteinheit_SEKUNDE",
		1: "Zeiteinheit_MINUTE",
		2: "Zeiteinheit_STUNDE",
		3: "Zeiteinheit_VIERTEL_STUNDE",
		4: "Zeiteinheit_TAG",
		5: "Zeiteinheit_WOCHE",
		6: "Zeiteinheit_MONAT",
		7: "Zeiteinheit_QUARTAL",
		8: "Zeiteinheit_HALBJAHR",
		9: "Zeiteinheit_JAHR",
	}
	Zeiteinheit_value = map[string]int32{
		"Zeiteinheit_SEKUNDE":        0,
		"Zeiteinheit_MINUTE":         1,
		"Zeiteinheit_STUNDE":         2,
		"Zeiteinheit_VIERTEL_STUNDE": 3,
		"Zeiteinheit_TAG":            4,
		"Zeiteinheit_WOCHE":          5,
		"Zeiteinheit_MONAT":          6,
		"Zeiteinheit_QUARTAL":        7,
		"Zeiteinheit_HALBJAHR":       8,
		"Zeiteinheit_JAHR":           9,
	}
)

func (x Zeiteinheit) Enum() *Zeiteinheit {
	p := new(Zeiteinheit)
	*p = x
	return p
}

func (x Zeiteinheit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zeiteinheit) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[58].Descriptor()
}

func (Zeiteinheit) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[58]
}

func (x Zeiteinheit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zeiteinheit.Descriptor instead.
func (Zeiteinheit) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{58}
}

type Zeitreihentyp int32

const (
	Zeitreihentyp_EGS Zeitreihentyp = 0
	Zeitreihentyp_LGS Zeitreihentyp = 1
	Zeitreihentyp_NZR Zeitreihentyp = 2
	Zeitreihentyp_SES Zeitreihentyp = 3
	Zeitreihentyp_SLS Zeitreihentyp = 4
	Zeitreihentyp_TES Zeitreihentyp = 5
	Zeitreihentyp_TLS Zeitreihentyp = 6
)

// Enum value maps for Zeitreihentyp.
var (
	Zeitreihentyp_name = map[int32]string{
		0: "EGS",
		1: "LGS",
		2: "NZR",
		3: "SES",
		4: "SLS",
		5: "TES",
		6: "TLS",
	}
	Zeitreihentyp_value = map[string]int32{
		"EGS": 0,
		"LGS": 1,
		"NZR": 2,
		"SES": 3,
		"SLS": 4,
		"TES": 5,
		"TLS": 6,
	}
)

func (x Zeitreihentyp) Enum() *Zeitreihentyp {
	p := new(Zeitreihentyp)
	*p = x
	return p
}

func (x Zeitreihentyp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zeitreihentyp) Descriptor() protoreflect.EnumDescriptor {
	return file_bo4e_proto_enumTypes[59].Descriptor()
}

func (Zeitreihentyp) Type() protoreflect.EnumType {
	return &file_bo4e_proto_enumTypes[59]
}

func (x Zeitreihentyp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zeitreihentyp.Descriptor instead.
func (Zeitreihentyp) EnumDescriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{59}
}

type Adresse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Postleitzahl string     `protobuf:"bytes,3,opt,name=Postleitzahl,proto3" json:"Postleitzahl,omitempty"`
	Ort          string     `protobuf:"bytes,4,opt,name=Ort,proto3" json:"Ort,omitempty"`
	Strasse      string     `protobuf:"bytes,5,opt,name=Strasse,proto3" json:"Strasse,omitempty"`
	Hausnummer   string     `protobuf:"bytes,6,opt,name=Hausnummer,proto3" json:"Hausnummer,omitempty"`
	Postfach     string     `protobuf:"bytes,7,opt,name=Postfach,proto3" json:"Postfach,omitempty"`
	Adresszusatz string     `protobuf:"bytes,8,opt,name=Adresszusatz,proto3" json:"Adresszusatz,omitempty"`
	CoErgaenzung string     `protobuf:"bytes,9,opt,name=CoErgaenzung,proto3" json:"CoErgaenzung,omitempty"`
	Landescode   Landescode `protobuf:"varint,10,opt,name=Landescode,proto3,enum=bo4e.Landescode" json:"Landescode,omitempty"`
}

func (x *Adresse) Reset() {
	*x = Adresse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adresse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adresse) ProtoMessage() {}

func (x *Adresse) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adresse.ProtoReflect.Descriptor instead.
func (*Adresse) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{0}
}

func (x *Adresse) GetPostleitzahl() string {
	if x != nil {
		return x.Postleitzahl
	}
	return ""
}

func (x *Adresse) GetOrt() string {
	if x != nil {
		return x.Ort
	}
	return ""
}

func (x *Adresse) GetStrasse() string {
	if x != nil {
		return x.Strasse
	}
	return ""
}

func (x *Adresse) GetHausnummer() string {
	if x != nil {
		return x.Hausnummer
	}
	return ""
}

func (x *Adresse) GetPostfach() string {
	if x != nil {
		return x.Postfach
	}
	return ""
}

func (x *Adresse) GetAdresszusatz() string {
	if x != nil {
		return x.Adresszusatz
	}
	return ""
}

func (x *Adresse) GetCoErgaenzung() string {
	if x != nil {
		return x.CoErgaenzung
	}
	return ""
}

func (x *Adresse) GetLandescode() Landescode {
	if x != nil {
		return x.Landescode
	}
	return Landescode_Landescode_AC
}

type Angebot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angebotsnummer              string              `protobuf:"bytes,4,opt,name=Angebotsnummer,proto3" json:"Angebotsnummer,omitempty"`
	Anfragereferenz             string              `protobuf:"bytes,5,opt,name=Anfragereferenz,proto3" json:"Anfragereferenz,omitempty"`
	Angebotsdatum               *DateTimeOffset     `protobuf:"bytes,6,opt,name=Angebotsdatum,proto3" json:"Angebotsdatum,omitempty"`
	Sparte                      Sparte              `protobuf:"varint,7,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	Bindefrist                  *DateTimeOffset     `protobuf:"bytes,8,opt,name=Bindefrist,proto3" json:"Bindefrist,omitempty"`
	Angebotgeber                *Geschaeftspartner  `protobuf:"bytes,9,opt,name=Angebotgeber,proto3" json:"Angebotgeber,omitempty"`
	Angebotnehmer               *Geschaeftspartner  `protobuf:"bytes,10,opt,name=Angebotnehmer,proto3" json:"Angebotnehmer,omitempty"`
	UnterzeichnerAngebotsnehmer *Ansprechpartner    `protobuf:"bytes,11,opt,name=UnterzeichnerAngebotsnehmer,proto3" json:"UnterzeichnerAngebotsnehmer,omitempty"`
	UnterzeichnerAngebotsgeber  *Ansprechpartner    `protobuf:"bytes,12,opt,name=UnterzeichnerAngebotsgeber,proto3" json:"UnterzeichnerAngebotsgeber,omitempty"`
	Varianten                   []*Angebotsvariante `protobuf:"bytes,13,rep,name=Varianten,proto3" json:"Varianten,omitempty"`
}

func (x *Angebot) Reset() {
	*x = Angebot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Angebot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Angebot) ProtoMessage() {}

func (x *Angebot) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Angebot.ProtoReflect.Descriptor instead.
func (*Angebot) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{1}
}

func (x *Angebot) GetAngebotsnummer() string {
	if x != nil {
		return x.Angebotsnummer
	}
	return ""
}

func (x *Angebot) GetAnfragereferenz() string {
	if x != nil {
		return x.Anfragereferenz
	}
	return ""
}

func (x *Angebot) GetAngebotsdatum() *DateTimeOffset {
	if x != nil {
		return x.Angebotsdatum
	}
	return nil
}

func (x *Angebot) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Angebot) GetBindefrist() *DateTimeOffset {
	if x != nil {
		return x.Bindefrist
	}
	return nil
}

func (x *Angebot) GetAngebotgeber() *Geschaeftspartner {
	if x != nil {
		return x.Angebotgeber
	}
	return nil
}

func (x *Angebot) GetAngebotnehmer() *Geschaeftspartner {
	if x != nil {
		return x.Angebotnehmer
	}
	return nil
}

func (x *Angebot) GetUnterzeichnerAngebotsnehmer() *Ansprechpartner {
	if x != nil {
		return x.UnterzeichnerAngebotsnehmer
	}
	return nil
}

func (x *Angebot) GetUnterzeichnerAngebotsgeber() *Ansprechpartner {
	if x != nil {
		return x.UnterzeichnerAngebotsgeber
	}
	return nil
}

func (x *Angebot) GetVarianten() []*Angebotsvariante {
	if x != nil {
		return x.Varianten
	}
	return nil
}

type Angebotsposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positionsbezeichung string  `protobuf:"bytes,3,opt,name=Positionsbezeichung,proto3" json:"Positionsbezeichung,omitempty"`
	Positionsmenge      *Menge  `protobuf:"bytes,4,opt,name=Positionsmenge,proto3" json:"Positionsmenge,omitempty"`
	Positionspreis      *Preis  `protobuf:"bytes,5,opt,name=Positionspreis,proto3" json:"Positionspreis,omitempty"`
	Positionsbetrag     *Betrag `protobuf:"bytes,6,opt,name=Positionsbetrag,proto3" json:"Positionsbetrag,omitempty"`
}

func (x *Angebotsposition) Reset() {
	*x = Angebotsposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Angebotsposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Angebotsposition) ProtoMessage() {}

func (x *Angebotsposition) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Angebotsposition.ProtoReflect.Descriptor instead.
func (*Angebotsposition) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{2}
}

func (x *Angebotsposition) GetPositionsbezeichung() string {
	if x != nil {
		return x.Positionsbezeichung
	}
	return ""
}

func (x *Angebotsposition) GetPositionsmenge() *Menge {
	if x != nil {
		return x.Positionsmenge
	}
	return nil
}

func (x *Angebotsposition) GetPositionspreis() *Preis {
	if x != nil {
		return x.Positionspreis
	}
	return nil
}

func (x *Angebotsposition) GetPositionsbetrag() *Betrag {
	if x != nil {
		return x.Positionsbetrag
	}
	return nil
}

type Angebotsteil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnfrageSubreferenz        string              `protobuf:"bytes,3,opt,name=AnfrageSubreferenz,proto3" json:"AnfrageSubreferenz,omitempty"`
	Lieferstellenangebotsteil []*Marktlokation    `protobuf:"bytes,4,rep,name=Lieferstellenangebotsteil,proto3" json:"Lieferstellenangebotsteil,omitempty"`
	Gesamtmengeangebotsteil   *Menge              `protobuf:"bytes,5,opt,name=Gesamtmengeangebotsteil,proto3" json:"Gesamtmengeangebotsteil,omitempty"`
	Gesamtkostenangebotsteil  *Betrag             `protobuf:"bytes,6,opt,name=Gesamtkostenangebotsteil,proto3" json:"Gesamtkostenangebotsteil,omitempty"`
	Positionen                []*Angebotsposition `protobuf:"bytes,7,rep,name=Positionen,proto3" json:"Positionen,omitempty"`
}

func (x *Angebotsteil) Reset() {
	*x = Angebotsteil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Angebotsteil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Angebotsteil) ProtoMessage() {}

func (x *Angebotsteil) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Angebotsteil.ProtoReflect.Descriptor instead.
func (*Angebotsteil) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{3}
}

func (x *Angebotsteil) GetAnfrageSubreferenz() string {
	if x != nil {
		return x.AnfrageSubreferenz
	}
	return ""
}

func (x *Angebotsteil) GetLieferstellenangebotsteil() []*Marktlokation {
	if x != nil {
		return x.Lieferstellenangebotsteil
	}
	return nil
}

func (x *Angebotsteil) GetGesamtmengeangebotsteil() *Menge {
	if x != nil {
		return x.Gesamtmengeangebotsteil
	}
	return nil
}

func (x *Angebotsteil) GetGesamtkostenangebotsteil() *Betrag {
	if x != nil {
		return x.Gesamtkostenangebotsteil
	}
	return nil
}

func (x *Angebotsteil) GetPositionen() []*Angebotsposition {
	if x != nil {
		return x.Positionen
	}
	return nil
}

type Angebotsvariante struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angebotsstatus Angebotsstatus  `protobuf:"varint,4,opt,name=Angebotsstatus,proto3,enum=bo4e.Angebotsstatus" json:"Angebotsstatus,omitempty"`
	Beschreibung   string          `protobuf:"bytes,5,opt,name=Beschreibung,proto3" json:"Beschreibung,omitempty"`
	Erstelldatum   *DateTimeOffset `protobuf:"bytes,6,opt,name=Erstelldatum,proto3" json:"Erstelldatum,omitempty"`
	Bindefrist     *DateTimeOffset `protobuf:"bytes,7,opt,name=Bindefrist,proto3" json:"Bindefrist,omitempty"`
	Gesamtmenge    *Menge          `protobuf:"bytes,8,opt,name=Gesamtmenge,proto3" json:"Gesamtmenge,omitempty"`
	Gesamtkosten   *Betrag         `protobuf:"bytes,9,opt,name=Gesamtkosten,proto3" json:"Gesamtkosten,omitempty"`
	Teile          []*Angebotsteil `protobuf:"bytes,10,rep,name=Teile,proto3" json:"Teile,omitempty"`
}

func (x *Angebotsvariante) Reset() {
	*x = Angebotsvariante{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Angebotsvariante) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Angebotsvariante) ProtoMessage() {}

func (x *Angebotsvariante) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Angebotsvariante.ProtoReflect.Descriptor instead.
func (*Angebotsvariante) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{4}
}

func (x *Angebotsvariante) GetAngebotsstatus() Angebotsstatus {
	if x != nil {
		return x.Angebotsstatus
	}
	return Angebotsstatus_KONZEPTION
}

func (x *Angebotsvariante) GetBeschreibung() string {
	if x != nil {
		return x.Beschreibung
	}
	return ""
}

func (x *Angebotsvariante) GetErstelldatum() *DateTimeOffset {
	if x != nil {
		return x.Erstelldatum
	}
	return nil
}

func (x *Angebotsvariante) GetBindefrist() *DateTimeOffset {
	if x != nil {
		return x.Bindefrist
	}
	return nil
}

func (x *Angebotsvariante) GetGesamtmenge() *Menge {
	if x != nil {
		return x.Gesamtmenge
	}
	return nil
}

func (x *Angebotsvariante) GetGesamtkosten() *Betrag {
	if x != nil {
		return x.Gesamtkosten
	}
	return nil
}

func (x *Angebotsvariante) GetTeile() []*Angebotsteil {
	if x != nil {
		return x.Teile
	}
	return nil
}

type Ansprechpartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anrede             Anrede             `protobuf:"varint,4,opt,name=Anrede,proto3,enum=bo4e.Anrede" json:"Anrede,omitempty"`
	IndividuelleAnrede string             `protobuf:"bytes,5,opt,name=IndividuelleAnrede,proto3" json:"IndividuelleAnrede,omitempty"`
	Titel              Titel              `protobuf:"varint,6,opt,name=Titel,proto3,enum=bo4e.Titel" json:"Titel,omitempty"`
	Vorname            string             `protobuf:"bytes,7,opt,name=Vorname,proto3" json:"Vorname,omitempty"`
	Nachname           string             `protobuf:"bytes,8,opt,name=Nachname,proto3" json:"Nachname,omitempty"`
	EMailAdresse       string             `protobuf:"bytes,9,opt,name=EMailAdresse,proto3" json:"EMailAdresse,omitempty"`
	Kommentar          string             `protobuf:"bytes,10,opt,name=Kommentar,proto3" json:"Kommentar,omitempty"`
	Geschaeftspartner  *Geschaeftspartner `protobuf:"bytes,11,opt,name=Geschaeftspartner,proto3" json:"Geschaeftspartner,omitempty"`
	Adresse            *Adresse           `protobuf:"bytes,12,opt,name=Adresse,proto3" json:"Adresse,omitempty"`
	Rufnummern         []*Rufnummer       `protobuf:"bytes,13,rep,name=Rufnummern,proto3" json:"Rufnummern,omitempty"`
	Zustaendigkeit     []*Zustaendigkeit  `protobuf:"bytes,14,rep,name=Zustaendigkeit,proto3" json:"Zustaendigkeit,omitempty"`
}

func (x *Ansprechpartner) Reset() {
	*x = Ansprechpartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ansprechpartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ansprechpartner) ProtoMessage() {}

func (x *Ansprechpartner) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ansprechpartner.ProtoReflect.Descriptor instead.
func (*Ansprechpartner) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{5}
}

func (x *Ansprechpartner) GetAnrede() Anrede {
	if x != nil {
		return x.Anrede
	}
	return Anrede_HERR
}

func (x *Ansprechpartner) GetIndividuelleAnrede() string {
	if x != nil {
		return x.IndividuelleAnrede
	}
	return ""
}

func (x *Ansprechpartner) GetTitel() Titel {
	if x != nil {
		return x.Titel
	}
	return Titel_DR
}

func (x *Ansprechpartner) GetVorname() string {
	if x != nil {
		return x.Vorname
	}
	return ""
}

func (x *Ansprechpartner) GetNachname() string {
	if x != nil {
		return x.Nachname
	}
	return ""
}

func (x *Ansprechpartner) GetEMailAdresse() string {
	if x != nil {
		return x.EMailAdresse
	}
	return ""
}

func (x *Ansprechpartner) GetKommentar() string {
	if x != nil {
		return x.Kommentar
	}
	return ""
}

func (x *Ansprechpartner) GetGeschaeftspartner() *Geschaeftspartner {
	if x != nil {
		return x.Geschaeftspartner
	}
	return nil
}

func (x *Ansprechpartner) GetAdresse() *Adresse {
	if x != nil {
		return x.Adresse
	}
	return nil
}

func (x *Ansprechpartner) GetRufnummern() []*Rufnummer {
	if x != nil {
		return x.Rufnummern
	}
	return nil
}

func (x *Ansprechpartner) GetZustaendigkeit() []*Zustaendigkeit {
	if x != nil {
		return x.Zustaendigkeit
	}
	return nil
}

type Aufgabe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AufgabenId            string          `protobuf:"bytes,3,opt,name=AufgabenId,proto3" json:"AufgabenId,omitempty"`
	Beschreibung          string          `protobuf:"bytes,4,opt,name=Beschreibung,proto3" json:"Beschreibung,omitempty"`
	Deadline              *DateTimeOffset `protobuf:"bytes,5,opt,name=Deadline,proto3" json:"Deadline,omitempty"`
	Ausgefuehrt           bool            `protobuf:"varint,6,opt,name=Ausgefuehrt,proto3" json:"Ausgefuehrt,omitempty"`
	Ausfuehrungszeitpunkt *DateTimeOffset `protobuf:"bytes,7,opt,name=Ausfuehrungszeitpunkt,proto3" json:"Ausfuehrungszeitpunkt,omitempty"`
	Ausfuehrender         string          `protobuf:"bytes,8,opt,name=Ausfuehrender,proto3" json:"Ausfuehrender,omitempty"`
}

func (x *Aufgabe) Reset() {
	*x = Aufgabe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aufgabe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aufgabe) ProtoMessage() {}

func (x *Aufgabe) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aufgabe.ProtoReflect.Descriptor instead.
func (*Aufgabe) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{6}
}

func (x *Aufgabe) GetAufgabenId() string {
	if x != nil {
		return x.AufgabenId
	}
	return ""
}

func (x *Aufgabe) GetBeschreibung() string {
	if x != nil {
		return x.Beschreibung
	}
	return ""
}

func (x *Aufgabe) GetDeadline() *DateTimeOffset {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Aufgabe) GetAusgefuehrt() bool {
	if x != nil {
		return x.Ausgefuehrt
	}
	return false
}

func (x *Aufgabe) GetAusfuehrungszeitpunkt() *DateTimeOffset {
	if x != nil {
		return x.Ausfuehrungszeitpunkt
	}
	return nil
}

func (x *Aufgabe) GetAusfuehrender() string {
	if x != nil {
		return x.Ausfuehrender
	}
	return ""
}

type Benachrichtigung struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BenachrichtigungsId  string                     `protobuf:"bytes,4,opt,name=BenachrichtigungsId,proto3" json:"BenachrichtigungsId,omitempty"`
	Prioritaet           Prioritaet                 `protobuf:"varint,5,opt,name=Prioritaet,proto3,enum=bo4e.Prioritaet" json:"Prioritaet,omitempty"` // default value could not be applied: NORMAL
	Bearbeitungsstatus   Bearbeitungsstatus         `protobuf:"varint,6,opt,name=Bearbeitungsstatus,proto3,enum=bo4e.Bearbeitungsstatus" json:"Bearbeitungsstatus,omitempty"`
	Kurztext             string                     `protobuf:"bytes,7,opt,name=Kurztext,proto3" json:"Kurztext,omitempty"`
	ErstellungsZeitpunkt *DateTimeOffset            `protobuf:"bytes,8,opt,name=ErstellungsZeitpunkt,proto3" json:"ErstellungsZeitpunkt,omitempty"`
	Kategorie            string                     `protobuf:"bytes,9,opt,name=Kategorie,proto3" json:"Kategorie,omitempty"`
	Bearbeiter           string                     `protobuf:"bytes,10,opt,name=Bearbeiter,proto3" json:"Bearbeiter,omitempty"`
	Notizen              []*Notiz                   `protobuf:"bytes,11,rep,name=Notizen,proto3" json:"Notizen,omitempty"`
	Deadline             *DateTimeOffset            `protobuf:"bytes,12,opt,name=Deadline,proto3" json:"Deadline,omitempty"`
	Aufgaben             []*Aufgabe                 `protobuf:"bytes,13,rep,name=Aufgaben,proto3" json:"Aufgaben,omitempty"`
	Infos                []*GenericStringStringInfo `protobuf:"bytes,14,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *Benachrichtigung) Reset() {
	*x = Benachrichtigung{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Benachrichtigung) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Benachrichtigung) ProtoMessage() {}

func (x *Benachrichtigung) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Benachrichtigung.ProtoReflect.Descriptor instead.
func (*Benachrichtigung) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{7}
}

func (x *Benachrichtigung) GetBenachrichtigungsId() string {
	if x != nil {
		return x.BenachrichtigungsId
	}
	return ""
}

func (x *Benachrichtigung) GetPrioritaet() Prioritaet {
	if x != nil {
		return x.Prioritaet
	}
	return Prioritaet_SEHR_NIEDRIG
}

func (x *Benachrichtigung) GetBearbeitungsstatus() Bearbeitungsstatus {
	if x != nil {
		return x.Bearbeitungsstatus
	}
	return Bearbeitungsstatus_OFFEN
}

func (x *Benachrichtigung) GetKurztext() string {
	if x != nil {
		return x.Kurztext
	}
	return ""
}

func (x *Benachrichtigung) GetErstellungsZeitpunkt() *DateTimeOffset {
	if x != nil {
		return x.ErstellungsZeitpunkt
	}
	return nil
}

func (x *Benachrichtigung) GetKategorie() string {
	if x != nil {
		return x.Kategorie
	}
	return ""
}

func (x *Benachrichtigung) GetBearbeiter() string {
	if x != nil {
		return x.Bearbeiter
	}
	return ""
}

func (x *Benachrichtigung) GetNotizen() []*Notiz {
	if x != nil {
		return x.Notizen
	}
	return nil
}

func (x *Benachrichtigung) GetDeadline() *DateTimeOffset {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Benachrichtigung) GetAufgaben() []*Aufgabe {
	if x != nil {
		return x.Aufgaben
	}
	return nil
}

func (x *Benachrichtigung) GetInfos() []*GenericStringStringInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type Betrag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wert     string        `protobuf:"bytes,3,opt,name=Wert,proto3" json:"Wert,omitempty"`
	Waehrung Waehrungscode `protobuf:"varint,4,opt,name=Waehrung,proto3,enum=bo4e.Waehrungscode" json:"Waehrung,omitempty"`
}

func (x *Betrag) Reset() {
	*x = Betrag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Betrag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Betrag) ProtoMessage() {}

func (x *Betrag) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Betrag.ProtoReflect.Descriptor instead.
func (*Betrag) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{8}
}

func (x *Betrag) GetWert() string {
	if x != nil {
		return x.Wert
	}
	return ""
}

func (x *Betrag) GetWaehrung() Waehrungscode {
	if x != nil {
		return x.Waehrung
	}
	return Waehrungscode_AFN
}

type DateTimeOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DateTimeOffset) Reset() {
	*x = DateTimeOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeOffset) ProtoMessage() {}

func (x *DateTimeOffset) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeOffset.ProtoReflect.Descriptor instead.
func (*DateTimeOffset) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{9}
}

type Dienstleistung struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dienstleistungstyp Dienstleistungstyp `protobuf:"varint,3,opt,name=Dienstleistungstyp,proto3,enum=bo4e.Dienstleistungstyp" json:"Dienstleistungstyp,omitempty"`
	Bezeichnung        string             `protobuf:"bytes,4,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
}

func (x *Dienstleistung) Reset() {
	*x = Dienstleistung{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dienstleistung) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dienstleistung) ProtoMessage() {}

func (x *Dienstleistung) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dienstleistung.ProtoReflect.Descriptor instead.
func (*Dienstleistung) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{10}
}

func (x *Dienstleistung) GetDienstleistungstyp() Dienstleistungstyp {
	if x != nil {
		return x.Dienstleistungstyp
	}
	return Dienstleistungstyp_Dienstleistungstyp_DATENBEREITSTELLUNG_TAEGLICH
}

func (x *Dienstleistung) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

type Energiemenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LokationsId      string       `protobuf:"bytes,4,opt,name=LokationsId,proto3" json:"LokationsId,omitempty"` // default value could not be applied: |null|
	LokationsTyp     Lokationstyp `protobuf:"varint,5,opt,name=LokationsTyp,proto3,enum=bo4e.Lokationstyp" json:"LokationsTyp,omitempty"`
	Energieverbrauch []*Verbrauch `protobuf:"bytes,6,rep,name=Energieverbrauch,proto3" json:"Energieverbrauch,omitempty"`
}

func (x *Energiemenge) Reset() {
	*x = Energiemenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Energiemenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Energiemenge) ProtoMessage() {}

func (x *Energiemenge) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Energiemenge.ProtoReflect.Descriptor instead.
func (*Energiemenge) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{11}
}

func (x *Energiemenge) GetLokationsId() string {
	if x != nil {
		return x.LokationsId
	}
	return ""
}

func (x *Energiemenge) GetLokationsTyp() Lokationstyp {
	if x != nil {
		return x.LokationsTyp
	}
	return Lokationstyp_MaLo
}

func (x *Energiemenge) GetEnergieverbrauch() []*Verbrauch {
	if x != nil {
		return x.Energieverbrauch
	}
	return nil
}

type GenericStringStringInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyColumn string `protobuf:"bytes,3,opt,name=KeyColumn,proto3" json:"KeyColumn,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *GenericStringStringInfo) Reset() {
	*x = GenericStringStringInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericStringStringInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericStringStringInfo) ProtoMessage() {}

func (x *GenericStringStringInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericStringStringInfo.ProtoReflect.Descriptor instead.
func (*GenericStringStringInfo) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{12}
}

func (x *GenericStringStringInfo) GetKeyColumn() string {
	if x != nil {
		return x.KeyColumn
	}
	return ""
}

func (x *GenericStringStringInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Geokoordinaten struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Breitengrad string `protobuf:"bytes,3,opt,name=Breitengrad,proto3" json:"Breitengrad,omitempty"`
	Laengengrad string `protobuf:"bytes,4,opt,name=Laengengrad,proto3" json:"Laengengrad,omitempty"`
}

func (x *Geokoordinaten) Reset() {
	*x = Geokoordinaten{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geokoordinaten) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geokoordinaten) ProtoMessage() {}

func (x *Geokoordinaten) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geokoordinaten.ProtoReflect.Descriptor instead.
func (*Geokoordinaten) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{13}
}

func (x *Geokoordinaten) GetBreitengrad() string {
	if x != nil {
		return x.Breitengrad
	}
	return ""
}

func (x *Geokoordinaten) GetLaengengrad() string {
	if x != nil {
		return x.Laengengrad
	}
	return ""
}

type Geraeteeigenschaften struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geraetetyp     Geraetetyp        `protobuf:"varint,3,opt,name=Geraetetyp,proto3,enum=bo4e.Geraetetyp" json:"Geraetetyp,omitempty"`
	Geraetemerkmal Geraetemerkmal    `protobuf:"varint,4,opt,name=Geraetemerkmal,proto3,enum=bo4e.Geraetemerkmal" json:"Geraetemerkmal,omitempty"`
	Parameter      map[string]string `protobuf:"bytes,1005,rep,name=Parameter,proto3" json:"Parameter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Geraeteeigenschaften) Reset() {
	*x = Geraeteeigenschaften{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geraeteeigenschaften) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geraeteeigenschaften) ProtoMessage() {}

func (x *Geraeteeigenschaften) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geraeteeigenschaften.ProtoReflect.Descriptor instead.
func (*Geraeteeigenschaften) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{14}
}

func (x *Geraeteeigenschaften) GetGeraetetyp() Geraetetyp {
	if x != nil {
		return x.Geraetetyp
	}
	return Geraetetyp_Geraetetyp_WECHSELSTROMZAEHLER
}

func (x *Geraeteeigenschaften) GetGeraetemerkmal() Geraetemerkmal {
	if x != nil {
		return x.Geraetemerkmal
	}
	return Geraetemerkmal_Geraetemerkmal_EINTARIF
}

func (x *Geraeteeigenschaften) GetParameter() map[string]string {
	if x != nil {
		return x.Parameter
	}
	return nil
}

type Geschaeftspartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Anrede                 Anrede                   `protobuf:"varint,4,opt,name=Anrede,proto3,enum=bo4e.Anrede" json:"Anrede,omitempty"`
	Name1                  string                   `protobuf:"bytes,6,opt,name=Name1,proto3" json:"Name1,omitempty"`
	Name2                  string                   `protobuf:"bytes,7,opt,name=Name2,proto3" json:"Name2,omitempty"`
	Name3                  string                   `protobuf:"bytes,8,opt,name=Name3,proto3" json:"Name3,omitempty"`
	Gewerbekennzeichnung   bool                     `protobuf:"varint,9,opt,name=Gewerbekennzeichnung,proto3" json:"Gewerbekennzeichnung,omitempty"`
	Hrnummer               string                   `protobuf:"bytes,10,opt,name=Hrnummer,proto3" json:"Hrnummer,omitempty"`
	Amtsgericht            string                   `protobuf:"bytes,11,opt,name=Amtsgericht,proto3" json:"Amtsgericht,omitempty"`
	Kontaktweg             []Kontaktart             `protobuf:"varint,12,rep,name=Kontaktweg,proto3,enum=bo4e.Kontaktart" json:"Kontaktweg,omitempty"`
	UmsatzsteuerId         string                   `protobuf:"bytes,13,opt,name=UmsatzsteuerId,proto3" json:"UmsatzsteuerId,omitempty"`
	GlaeubigerId           string                   `protobuf:"bytes,14,opt,name=GlaeubigerId,proto3" json:"GlaeubigerId,omitempty"`
	EMailAdresse           string                   `protobuf:"bytes,15,opt,name=EMailAdresse,proto3" json:"EMailAdresse,omitempty"`
	Website                string                   `protobuf:"bytes,16,opt,name=Website,proto3" json:"Website,omitempty"`
	Geschaeftspartnerrolle []Geschaeftspartnerrolle `protobuf:"varint,17,rep,name=Geschaeftspartnerrolle,proto3,enum=bo4e.Geschaeftspartnerrolle" json:"Geschaeftspartnerrolle,omitempty"`
	Partneradresse         *Adresse                 `protobuf:"bytes,18,opt,name=Partneradresse,proto3" json:"Partneradresse,omitempty"`
	Title                  string                   `protobuf:"bytes,1001,opt,name=Title,proto3" json:"Title,omitempty"`
}

func (x *Geschaeftspartner) Reset() {
	*x = Geschaeftspartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geschaeftspartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geschaeftspartner) ProtoMessage() {}

func (x *Geschaeftspartner) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geschaeftspartner.ProtoReflect.Descriptor instead.
func (*Geschaeftspartner) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{15}
}

func (x *Geschaeftspartner) GetAnrede() Anrede {
	if x != nil {
		return x.Anrede
	}
	return Anrede_HERR
}

func (x *Geschaeftspartner) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *Geschaeftspartner) GetName2() string {
	if x != nil {
		return x.Name2
	}
	return ""
}

func (x *Geschaeftspartner) GetName3() string {
	if x != nil {
		return x.Name3
	}
	return ""
}

func (x *Geschaeftspartner) GetGewerbekennzeichnung() bool {
	if x != nil {
		return x.Gewerbekennzeichnung
	}
	return false
}

func (x *Geschaeftspartner) GetHrnummer() string {
	if x != nil {
		return x.Hrnummer
	}
	return ""
}

func (x *Geschaeftspartner) GetAmtsgericht() string {
	if x != nil {
		return x.Amtsgericht
	}
	return ""
}

func (x *Geschaeftspartner) GetKontaktweg() []Kontaktart {
	if x != nil {
		return x.Kontaktweg
	}
	return nil
}

func (x *Geschaeftspartner) GetUmsatzsteuerId() string {
	if x != nil {
		return x.UmsatzsteuerId
	}
	return ""
}

func (x *Geschaeftspartner) GetGlaeubigerId() string {
	if x != nil {
		return x.GlaeubigerId
	}
	return ""
}

func (x *Geschaeftspartner) GetEMailAdresse() string {
	if x != nil {
		return x.EMailAdresse
	}
	return ""
}

func (x *Geschaeftspartner) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Geschaeftspartner) GetGeschaeftspartnerrolle() []Geschaeftspartnerrolle {
	if x != nil {
		return x.Geschaeftspartnerrolle
	}
	return nil
}

func (x *Geschaeftspartner) GetPartneradresse() *Adresse {
	if x != nil {
		return x.Partneradresse
	}
	return nil
}

func (x *Geschaeftspartner) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type Hardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geraetetyp           Geraetetyp            `protobuf:"varint,3,opt,name=Geraetetyp,proto3,enum=bo4e.Geraetetyp" json:"Geraetetyp,omitempty"`
	Bezeichnung          string                `protobuf:"bytes,4,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
	Geraeteeigenschaften *Geraeteeigenschaften `protobuf:"bytes,1005,opt,name=Geraeteeigenschaften,proto3" json:"Geraeteeigenschaften,omitempty"`
	Geraetenummer        string                `protobuf:"bytes,1006,opt,name=Geraetenummer,proto3" json:"Geraetenummer,omitempty"`
	Geraetereferenz      string                `protobuf:"bytes,1007,opt,name=Geraetereferenz,proto3" json:"Geraetereferenz,omitempty"`
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{16}
}

func (x *Hardware) GetGeraetetyp() Geraetetyp {
	if x != nil {
		return x.Geraetetyp
	}
	return Geraetetyp_Geraetetyp_WECHSELSTROMZAEHLER
}

func (x *Hardware) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

func (x *Hardware) GetGeraeteeigenschaften() *Geraeteeigenschaften {
	if x != nil {
		return x.Geraeteeigenschaften
	}
	return nil
}

func (x *Hardware) GetGeraetenummer() string {
	if x != nil {
		return x.Geraetenummer
	}
	return ""
}

func (x *Hardware) GetGeraetereferenz() string {
	if x != nil {
		return x.Geraetereferenz
	}
	return ""
}

type Katasteradresse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GemarkungFlur string `protobuf:"bytes,3,opt,name=Gemarkung_flur,json=GemarkungFlur,proto3" json:"Gemarkung_flur,omitempty"`
	Flurstueck    string `protobuf:"bytes,4,opt,name=Flurstueck,proto3" json:"Flurstueck,omitempty"`
}

func (x *Katasteradresse) Reset() {
	*x = Katasteradresse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Katasteradresse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Katasteradresse) ProtoMessage() {}

func (x *Katasteradresse) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Katasteradresse.ProtoReflect.Descriptor instead.
func (*Katasteradresse) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{17}
}

func (x *Katasteradresse) GetGemarkungFlur() string {
	if x != nil {
		return x.GemarkungFlur
	}
	return ""
}

func (x *Katasteradresse) GetFlurstueck() string {
	if x != nil {
		return x.Flurstueck
	}
	return ""
}

type Konzessionsabgabe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Satz      AbgabeArt `protobuf:"varint,3,opt,name=Satz,proto3,enum=bo4e.AbgabeArt" json:"Satz,omitempty"`
	Kosten    string    `protobuf:"bytes,4,opt,name=Kosten,proto3" json:"Kosten,omitempty"`
	Kategorie string    `protobuf:"bytes,5,opt,name=Kategorie,proto3" json:"Kategorie,omitempty"`
}

func (x *Konzessionsabgabe) Reset() {
	*x = Konzessionsabgabe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Konzessionsabgabe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Konzessionsabgabe) ProtoMessage() {}

func (x *Konzessionsabgabe) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Konzessionsabgabe.ProtoReflect.Descriptor instead.
func (*Konzessionsabgabe) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{18}
}

func (x *Konzessionsabgabe) GetSatz() AbgabeArt {
	if x != nil {
		return x.Satz
	}
	return AbgabeArt_KAS
}

func (x *Konzessionsabgabe) GetKosten() string {
	if x != nil {
		return x.Kosten
	}
	return ""
}

func (x *Konzessionsabgabe) GetKategorie() string {
	if x != nil {
		return x.Kategorie
	}
	return ""
}

type Kosten struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kostenklasse     Kostenklasse      `protobuf:"varint,4,opt,name=Kostenklasse,proto3,enum=bo4e.Kostenklasse" json:"Kostenklasse,omitempty"`
	Gueltigkeit      *Zeitraum         `protobuf:"bytes,5,opt,name=Gueltigkeit,proto3" json:"Gueltigkeit,omitempty"`
	SummeKosten      []*Betrag         `protobuf:"bytes,6,rep,name=SummeKosten,proto3" json:"SummeKosten,omitempty"`
	Kostenbloecke    []*Kostenblock    `protobuf:"bytes,7,rep,name=Kostenbloecke,proto3" json:"Kostenbloecke,omitempty"`
	Kostenpositionen []*Kostenposition `protobuf:"bytes,8,rep,name=Kostenpositionen,proto3" json:"Kostenpositionen,omitempty"`
}

func (x *Kosten) Reset() {
	*x = Kosten{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kosten) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kosten) ProtoMessage() {}

func (x *Kosten) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kosten.ProtoReflect.Descriptor instead.
func (*Kosten) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{19}
}

func (x *Kosten) GetKostenklasse() Kostenklasse {
	if x != nil {
		return x.Kostenklasse
	}
	return Kostenklasse_Kostenklasse_ZERO
}

func (x *Kosten) GetGueltigkeit() *Zeitraum {
	if x != nil {
		return x.Gueltigkeit
	}
	return nil
}

func (x *Kosten) GetSummeKosten() []*Betrag {
	if x != nil {
		return x.SummeKosten
	}
	return nil
}

func (x *Kosten) GetKostenbloecke() []*Kostenblock {
	if x != nil {
		return x.Kostenbloecke
	}
	return nil
}

func (x *Kosten) GetKostenpositionen() []*Kostenposition {
	if x != nil {
		return x.Kostenpositionen
	}
	return nil
}

type Kostenblock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kostenblockbezeichnung string            `protobuf:"bytes,3,opt,name=Kostenblockbezeichnung,proto3" json:"Kostenblockbezeichnung,omitempty"`
	SummeKostenblock       *Betrag           `protobuf:"bytes,4,opt,name=SummeKostenblock,proto3" json:"SummeKostenblock,omitempty"`
	Kostenpositionen       []*Kostenposition `protobuf:"bytes,5,rep,name=Kostenpositionen,proto3" json:"Kostenpositionen,omitempty"`
}

func (x *Kostenblock) Reset() {
	*x = Kostenblock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kostenblock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kostenblock) ProtoMessage() {}

func (x *Kostenblock) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kostenblock.ProtoReflect.Descriptor instead.
func (*Kostenblock) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{20}
}

func (x *Kostenblock) GetKostenblockbezeichnung() string {
	if x != nil {
		return x.Kostenblockbezeichnung
	}
	return ""
}

func (x *Kostenblock) GetSummeKostenblock() *Betrag {
	if x != nil {
		return x.SummeKostenblock
	}
	return nil
}

func (x *Kostenblock) GetKostenpositionen() []*Kostenposition {
	if x != nil {
		return x.Kostenpositionen
	}
	return nil
}

type Kostenposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positionstitel       string          `protobuf:"bytes,3,opt,name=Positionstitel,proto3" json:"Positionstitel,omitempty"`
	Von                  *DateTimeOffset `protobuf:"bytes,4,opt,name=Von,proto3" json:"Von,omitempty"`
	Bis                  *DateTimeOffset `protobuf:"bytes,5,opt,name=Bis,proto3" json:"Bis,omitempty"`
	Artikelbezeichnung   string          `protobuf:"bytes,6,opt,name=Artikelbezeichnung,proto3" json:"Artikelbezeichnung,omitempty"`
	Artikeldetail        string          `protobuf:"bytes,7,opt,name=Artikeldetail,proto3" json:"Artikeldetail,omitempty"`
	Menge                *Menge          `protobuf:"bytes,8,opt,name=Menge,proto3" json:"Menge,omitempty"`
	Zeitmenge            *Menge          `protobuf:"bytes,9,opt,name=Zeitmenge,proto3" json:"Zeitmenge,omitempty"`
	Einzelpreis          *Preis          `protobuf:"bytes,10,opt,name=Einzelpreis,proto3" json:"Einzelpreis,omitempty"`
	BetragKostenposition *Betrag         `protobuf:"bytes,11,opt,name=BetragKostenposition,proto3" json:"BetragKostenposition,omitempty"`
}

func (x *Kostenposition) Reset() {
	*x = Kostenposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kostenposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kostenposition) ProtoMessage() {}

func (x *Kostenposition) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kostenposition.ProtoReflect.Descriptor instead.
func (*Kostenposition) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{21}
}

func (x *Kostenposition) GetPositionstitel() string {
	if x != nil {
		return x.Positionstitel
	}
	return ""
}

func (x *Kostenposition) GetVon() *DateTimeOffset {
	if x != nil {
		return x.Von
	}
	return nil
}

func (x *Kostenposition) GetBis() *DateTimeOffset {
	if x != nil {
		return x.Bis
	}
	return nil
}

func (x *Kostenposition) GetArtikelbezeichnung() string {
	if x != nil {
		return x.Artikelbezeichnung
	}
	return ""
}

func (x *Kostenposition) GetArtikeldetail() string {
	if x != nil {
		return x.Artikeldetail
	}
	return ""
}

func (x *Kostenposition) GetMenge() *Menge {
	if x != nil {
		return x.Menge
	}
	return nil
}

func (x *Kostenposition) GetZeitmenge() *Menge {
	if x != nil {
		return x.Zeitmenge
	}
	return nil
}

func (x *Kostenposition) GetEinzelpreis() *Preis {
	if x != nil {
		return x.Einzelpreis
	}
	return nil
}

func (x *Kostenposition) GetBetragKostenposition() *Betrag {
	if x != nil {
		return x.BetragKostenposition
	}
	return nil
}

type Marktlokation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarktlokationsId          string                    `protobuf:"bytes,4,opt,name=MarktlokationsId,proto3" json:"MarktlokationsId,omitempty"` // default value could not be applied: |null|
	Sparte                    Sparte                    `protobuf:"varint,5,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	Energierichtung           Energierichtung           `protobuf:"varint,6,opt,name=Energierichtung,proto3,enum=bo4e.Energierichtung" json:"Energierichtung,omitempty"`
	Bilanzierungsmethode      Bilanzierungsmethode      `protobuf:"varint,7,opt,name=Bilanzierungsmethode,proto3,enum=bo4e.Bilanzierungsmethode" json:"Bilanzierungsmethode,omitempty"`
	Verbrauchsart             Verbrauchsart             `protobuf:"varint,8,opt,name=Verbrauchsart,proto3,enum=bo4e.Verbrauchsart" json:"Verbrauchsart,omitempty"`
	Unterbrechbar             bool                      `protobuf:"varint,9,opt,name=Unterbrechbar,proto3" json:"Unterbrechbar,omitempty"`
	Netzebene                 Netzebene                 `protobuf:"varint,10,opt,name=Netzebene,proto3,enum=bo4e.Netzebene" json:"Netzebene,omitempty"`
	NetzbetreiberCodeNr       string                    `protobuf:"bytes,11,opt,name=NetzbetreiberCodeNr,proto3" json:"NetzbetreiberCodeNr,omitempty"`
	GebietType                Gebiettyp                 `protobuf:"varint,12,opt,name=GebietType,proto3,enum=bo4e.Gebiettyp" json:"GebietType,omitempty"`
	NetzgebietNr              string                    `protobuf:"bytes,13,opt,name=NetzgebietNr,proto3" json:"NetzgebietNr,omitempty"`
	Bilanzierungsgebiet       string                    `protobuf:"bytes,14,opt,name=Bilanzierungsgebiet,proto3" json:"Bilanzierungsgebiet,omitempty"`
	GrundversorgerCodeNr      string                    `protobuf:"bytes,15,opt,name=GrundversorgerCodeNr,proto3" json:"GrundversorgerCodeNr,omitempty"`
	Gasqualitaet              Gasqualitaet              `protobuf:"varint,16,opt,name=Gasqualitaet,proto3,enum=bo4e.Gasqualitaet" json:"Gasqualitaet,omitempty"`
	Endkunde                  *Geschaeftspartner        `protobuf:"bytes,17,opt,name=Endkunde,proto3" json:"Endkunde,omitempty"`
	Lokationsadresse          *Adresse                  `protobuf:"bytes,18,opt,name=Lokationsadresse,proto3" json:"Lokationsadresse,omitempty"`
	Geoadresse                *Geokoordinaten           `protobuf:"bytes,19,opt,name=Geoadresse,proto3" json:"Geoadresse,omitempty"`
	Katasterinformation       *Katasteradresse          `protobuf:"bytes,20,opt,name=Katasterinformation,proto3" json:"Katasterinformation,omitempty"`
	ZugehoerigeMesslokationen []*Messlokationszuordnung `protobuf:"bytes,28,rep,name=ZugehoerigeMesslokationen,proto3" json:"ZugehoerigeMesslokationen,omitempty"`
	Marktrollen               []*MarktpartnerDetails    `protobuf:"bytes,1021,rep,name=Marktrollen,proto3" json:"Marktrollen,omitempty"`
	Regelzone                 string                    `protobuf:"bytes,1022,opt,name=Regelzone,proto3" json:"Regelzone,omitempty"`
	Marktgebiet               string                    `protobuf:"bytes,1023,opt,name=Marktgebiet,proto3" json:"Marktgebiet,omitempty"`
	Zeitreihentyp             Zeitreihentyp             `protobuf:"varint,1024,opt,name=Zeitreihentyp,proto3,enum=bo4e.Zeitreihentyp" json:"Zeitreihentyp,omitempty"`
	Zaehlwerke                []*Zaehlwerk              `protobuf:"bytes,1025,rep,name=Zaehlwerke,proto3" json:"Zaehlwerke,omitempty"`
	Verbrauchsmenge           []*Verbrauch              `protobuf:"bytes,1026,rep,name=Verbrauchsmenge,proto3" json:"Verbrauchsmenge,omitempty"`
	Messlokationen            []*Messlokation           `protobuf:"bytes,1027,rep,name=Messlokationen,proto3" json:"Messlokationen,omitempty"`
}

func (x *Marktlokation) Reset() {
	*x = Marktlokation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marktlokation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marktlokation) ProtoMessage() {}

func (x *Marktlokation) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marktlokation.ProtoReflect.Descriptor instead.
func (*Marktlokation) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{22}
}

func (x *Marktlokation) GetMarktlokationsId() string {
	if x != nil {
		return x.MarktlokationsId
	}
	return ""
}

func (x *Marktlokation) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Marktlokation) GetEnergierichtung() Energierichtung {
	if x != nil {
		return x.Energierichtung
	}
	return Energierichtung_AUSSP
}

func (x *Marktlokation) GetBilanzierungsmethode() Bilanzierungsmethode {
	if x != nil {
		return x.Bilanzierungsmethode
	}
	return Bilanzierungsmethode_Bilanzierungsmethode_RLM
}

func (x *Marktlokation) GetVerbrauchsart() Verbrauchsart {
	if x != nil {
		return x.Verbrauchsart
	}
	return Verbrauchsart_KL
}

func (x *Marktlokation) GetUnterbrechbar() bool {
	if x != nil {
		return x.Unterbrechbar
	}
	return false
}

func (x *Marktlokation) GetNetzebene() Netzebene {
	if x != nil {
		return x.Netzebene
	}
	return Netzebene_NSP
}

func (x *Marktlokation) GetNetzbetreiberCodeNr() string {
	if x != nil {
		return x.NetzbetreiberCodeNr
	}
	return ""
}

func (x *Marktlokation) GetGebietType() Gebiettyp {
	if x != nil {
		return x.GebietType
	}
	return Gebiettyp_REGELZONE
}

func (x *Marktlokation) GetNetzgebietNr() string {
	if x != nil {
		return x.NetzgebietNr
	}
	return ""
}

func (x *Marktlokation) GetBilanzierungsgebiet() string {
	if x != nil {
		return x.Bilanzierungsgebiet
	}
	return ""
}

func (x *Marktlokation) GetGrundversorgerCodeNr() string {
	if x != nil {
		return x.GrundversorgerCodeNr
	}
	return ""
}

func (x *Marktlokation) GetGasqualitaet() Gasqualitaet {
	if x != nil {
		return x.Gasqualitaet
	}
	return Gasqualitaet_Gasqualitaet_ZERO
}

func (x *Marktlokation) GetEndkunde() *Geschaeftspartner {
	if x != nil {
		return x.Endkunde
	}
	return nil
}

func (x *Marktlokation) GetLokationsadresse() *Adresse {
	if x != nil {
		return x.Lokationsadresse
	}
	return nil
}

func (x *Marktlokation) GetGeoadresse() *Geokoordinaten {
	if x != nil {
		return x.Geoadresse
	}
	return nil
}

func (x *Marktlokation) GetKatasterinformation() *Katasteradresse {
	if x != nil {
		return x.Katasterinformation
	}
	return nil
}

func (x *Marktlokation) GetZugehoerigeMesslokationen() []*Messlokationszuordnung {
	if x != nil {
		return x.ZugehoerigeMesslokationen
	}
	return nil
}

func (x *Marktlokation) GetMarktrollen() []*MarktpartnerDetails {
	if x != nil {
		return x.Marktrollen
	}
	return nil
}

func (x *Marktlokation) GetRegelzone() string {
	if x != nil {
		return x.Regelzone
	}
	return ""
}

func (x *Marktlokation) GetMarktgebiet() string {
	if x != nil {
		return x.Marktgebiet
	}
	return ""
}

func (x *Marktlokation) GetZeitreihentyp() Zeitreihentyp {
	if x != nil {
		return x.Zeitreihentyp
	}
	return Zeitreihentyp_EGS
}

func (x *Marktlokation) GetZaehlwerke() []*Zaehlwerk {
	if x != nil {
		return x.Zaehlwerke
	}
	return nil
}

func (x *Marktlokation) GetVerbrauchsmenge() []*Verbrauch {
	if x != nil {
		return x.Verbrauchsmenge
	}
	return nil
}

func (x *Marktlokation) GetMesslokationen() []*Messlokation {
	if x != nil {
		return x.Messlokationen
	}
	return nil
}

type MarktpartnerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollencodenummer string     `protobuf:"bytes,3,opt,name=Rollencodenummer,proto3" json:"Rollencodenummer,omitempty"`
	Code             string     `protobuf:"bytes,4,opt,name=Code,proto3" json:"Code,omitempty"`
	Marktrolle       Marktrolle `protobuf:"varint,5,opt,name=marktrolle,proto3,enum=bo4e.Marktrolle" json:"marktrolle,omitempty"`
}

func (x *MarktpartnerDetails) Reset() {
	*x = MarktpartnerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarktpartnerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarktpartnerDetails) ProtoMessage() {}

func (x *MarktpartnerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarktpartnerDetails.ProtoReflect.Descriptor instead.
func (*MarktpartnerDetails) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{23}
}

func (x *MarktpartnerDetails) GetRollencodenummer() string {
	if x != nil {
		return x.Rollencodenummer
	}
	return ""
}

func (x *MarktpartnerDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MarktpartnerDetails) GetMarktrolle() Marktrolle {
	if x != nil {
		return x.Marktrolle
	}
	return Marktrolle_NB
}

type Menge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wert    string        `protobuf:"bytes,3,opt,name=Wert,proto3" json:"Wert,omitempty"`
	Einheit Mengeneinheit `protobuf:"varint,4,opt,name=Einheit,proto3,enum=bo4e.Mengeneinheit" json:"Einheit,omitempty"`
}

func (x *Menge) Reset() {
	*x = Menge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Menge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menge) ProtoMessage() {}

func (x *Menge) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menge.ProtoReflect.Descriptor instead.
func (*Menge) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{24}
}

func (x *Menge) GetWert() string {
	if x != nil {
		return x.Wert
	}
	return ""
}

func (x *Menge) GetEinheit() Mengeneinheit {
	if x != nil {
		return x.Einheit
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

type Messlokation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MesslokationsId                 string                 `protobuf:"bytes,4,opt,name=MesslokationsId,proto3" json:"MesslokationsId,omitempty"` // default value could not be applied: |null|
	Sparte                          Sparte                 `protobuf:"varint,5,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	NetzebeneMessung                Netzebene              `protobuf:"varint,6,opt,name=NetzebeneMessung,proto3,enum=bo4e.Netzebene" json:"NetzebeneMessung,omitempty"`
	MessgebietNr                    string                 `protobuf:"bytes,7,opt,name=MessgebietNr,proto3" json:"MessgebietNr,omitempty"`
	GrundzustaendigerMSBCodeNr      string                 `protobuf:"bytes,8,opt,name=GrundzustaendigerMSBCodeNr,proto3" json:"GrundzustaendigerMSBCodeNr,omitempty"`
	GrundzustaendigerMSBIMCodeNr    string                 `protobuf:"bytes,9,opt,name=GrundzustaendigerMSBIMCodeNr,proto3" json:"GrundzustaendigerMSBIMCodeNr,omitempty"`
	GrundzustaendigerMDLCodeNr      string                 `protobuf:"bytes,10,opt,name=GrundzustaendigerMDLCodeNr,proto3" json:"GrundzustaendigerMDLCodeNr,omitempty"`
	Messadresse                     *Adresse               `protobuf:"bytes,11,opt,name=Messadresse,proto3" json:"Messadresse,omitempty"`
	Geoadresse                      *Geokoordinaten        `protobuf:"bytes,12,opt,name=Geoadresse,proto3" json:"Geoadresse,omitempty"`
	Katasterinformation             *Katasteradresse       `protobuf:"bytes,13,opt,name=Katasterinformation,proto3" json:"Katasterinformation,omitempty"`
	Geraete                         []*Hardware            `protobuf:"bytes,14,rep,name=Geraete,proto3" json:"Geraete,omitempty"`
	Messdienstleistung              []*Dienstleistung      `protobuf:"bytes,15,rep,name=Messdienstleistung,proto3" json:"Messdienstleistung,omitempty"`
	Messlokationszaehler            []*Zaehler             `protobuf:"bytes,16,rep,name=Messlokationszaehler,proto3" json:"Messlokationszaehler,omitempty"`
	Bilanzierungsmethode            Bilanzierungsmethode   `protobuf:"varint,17,opt,name=Bilanzierungsmethode,proto3,enum=bo4e.Bilanzierungsmethode" json:"Bilanzierungsmethode,omitempty"`
	Abrechnungmessstellenbetriebnna bool                   `protobuf:"varint,1018,opt,name=Abrechnungmessstellenbetriebnna,proto3" json:"Abrechnungmessstellenbetriebnna,omitempty"`
	Marktrollen                     []*MarktpartnerDetails `protobuf:"bytes,1019,rep,name=Marktrollen,proto3" json:"Marktrollen,omitempty"`
	Gasqualitaet                    Gasqualitaet           `protobuf:"varint,1020,opt,name=Gasqualitaet,proto3,enum=bo4e.Gasqualitaet" json:"Gasqualitaet,omitempty"`
	Verlustfaktor                   string                 `protobuf:"bytes,1021,opt,name=Verlustfaktor,proto3" json:"Verlustfaktor,omitempty"`
}

func (x *Messlokation) Reset() {
	*x = Messlokation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Messlokation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messlokation) ProtoMessage() {}

func (x *Messlokation) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messlokation.ProtoReflect.Descriptor instead.
func (*Messlokation) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{25}
}

func (x *Messlokation) GetMesslokationsId() string {
	if x != nil {
		return x.MesslokationsId
	}
	return ""
}

func (x *Messlokation) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Messlokation) GetNetzebeneMessung() Netzebene {
	if x != nil {
		return x.NetzebeneMessung
	}
	return Netzebene_NSP
}

func (x *Messlokation) GetMessgebietNr() string {
	if x != nil {
		return x.MessgebietNr
	}
	return ""
}

func (x *Messlokation) GetGrundzustaendigerMSBCodeNr() string {
	if x != nil {
		return x.GrundzustaendigerMSBCodeNr
	}
	return ""
}

func (x *Messlokation) GetGrundzustaendigerMSBIMCodeNr() string {
	if x != nil {
		return x.GrundzustaendigerMSBIMCodeNr
	}
	return ""
}

func (x *Messlokation) GetGrundzustaendigerMDLCodeNr() string {
	if x != nil {
		return x.GrundzustaendigerMDLCodeNr
	}
	return ""
}

func (x *Messlokation) GetMessadresse() *Adresse {
	if x != nil {
		return x.Messadresse
	}
	return nil
}

func (x *Messlokation) GetGeoadresse() *Geokoordinaten {
	if x != nil {
		return x.Geoadresse
	}
	return nil
}

func (x *Messlokation) GetKatasterinformation() *Katasteradresse {
	if x != nil {
		return x.Katasterinformation
	}
	return nil
}

func (x *Messlokation) GetGeraete() []*Hardware {
	if x != nil {
		return x.Geraete
	}
	return nil
}

func (x *Messlokation) GetMessdienstleistung() []*Dienstleistung {
	if x != nil {
		return x.Messdienstleistung
	}
	return nil
}

func (x *Messlokation) GetMesslokationszaehler() []*Zaehler {
	if x != nil {
		return x.Messlokationszaehler
	}
	return nil
}

func (x *Messlokation) GetBilanzierungsmethode() Bilanzierungsmethode {
	if x != nil {
		return x.Bilanzierungsmethode
	}
	return Bilanzierungsmethode_Bilanzierungsmethode_RLM
}

func (x *Messlokation) GetAbrechnungmessstellenbetriebnna() bool {
	if x != nil {
		return x.Abrechnungmessstellenbetriebnna
	}
	return false
}

func (x *Messlokation) GetMarktrollen() []*MarktpartnerDetails {
	if x != nil {
		return x.Marktrollen
	}
	return nil
}

func (x *Messlokation) GetGasqualitaet() Gasqualitaet {
	if x != nil {
		return x.Gasqualitaet
	}
	return Gasqualitaet_Gasqualitaet_ZERO
}

func (x *Messlokation) GetVerlustfaktor() string {
	if x != nil {
		return x.Verlustfaktor
	}
	return ""
}

type Messlokationszuordnung struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MesslokationsId string                 `protobuf:"bytes,3,opt,name=MesslokationsId,proto3" json:"MesslokationsId,omitempty"`
	Arithmetik      ArithmetischeOperation `protobuf:"varint,4,opt,name=Arithmetik,proto3,enum=bo4e.ArithmetischeOperation" json:"Arithmetik,omitempty"`
	GueltigSeit     *DateTimeOffset        `protobuf:"bytes,5,opt,name=GueltigSeit,proto3" json:"GueltigSeit,omitempty"`
	GueltigBis      *DateTimeOffset        `protobuf:"bytes,6,opt,name=GueltigBis,proto3" json:"GueltigBis,omitempty"`
}

func (x *Messlokationszuordnung) Reset() {
	*x = Messlokationszuordnung{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Messlokationszuordnung) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messlokationszuordnung) ProtoMessage() {}

func (x *Messlokationszuordnung) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messlokationszuordnung.ProtoReflect.Descriptor instead.
func (*Messlokationszuordnung) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{26}
}

func (x *Messlokationszuordnung) GetMesslokationsId() string {
	if x != nil {
		return x.MesslokationsId
	}
	return ""
}

func (x *Messlokationszuordnung) GetArithmetik() ArithmetischeOperation {
	if x != nil {
		return x.Arithmetik
	}
	return ArithmetischeOperation_ADDITION
}

func (x *Messlokationszuordnung) GetGueltigSeit() *DateTimeOffset {
	if x != nil {
		return x.GueltigSeit
	}
	return nil
}

func (x *Messlokationszuordnung) GetGueltigBis() *DateTimeOffset {
	if x != nil {
		return x.GueltigBis
	}
	return nil
}

type Notiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autor     string          `protobuf:"bytes,3,opt,name=Autor,proto3" json:"Autor,omitempty"`
	Zeitpunkt *DateTimeOffset `protobuf:"bytes,4,opt,name=Zeitpunkt,proto3" json:"Zeitpunkt,omitempty"`
	Inhalt    string          `protobuf:"bytes,5,opt,name=Inhalt,proto3" json:"Inhalt,omitempty"`
}

func (x *Notiz) Reset() {
	*x = Notiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notiz) ProtoMessage() {}

func (x *Notiz) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notiz.ProtoReflect.Descriptor instead.
func (*Notiz) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{27}
}

func (x *Notiz) GetAutor() string {
	if x != nil {
		return x.Autor
	}
	return ""
}

func (x *Notiz) GetZeitpunkt() *DateTimeOffset {
	if x != nil {
		return x.Zeitpunkt
	}
	return nil
}

func (x *Notiz) GetInhalt() string {
	if x != nil {
		return x.Inhalt
	}
	return ""
}

type PositionsAufAbschlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bezeichnung          string           `protobuf:"bytes,3,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
	Beschreibung         string           `protobuf:"bytes,4,opt,name=Beschreibung,proto3" json:"Beschreibung,omitempty"`
	AufAbschlagstyp      AufAbschlagstyp  `protobuf:"varint,5,opt,name=AufAbschlagstyp,proto3,enum=bo4e.AufAbschlagstyp" json:"AufAbschlagstyp,omitempty"`
	AufAbschlagswert     string           `protobuf:"bytes,6,opt,name=AufAbschlagswert,proto3" json:"AufAbschlagswert,omitempty"`
	AufAbschlagswaehrung Waehrungseinheit `protobuf:"varint,7,opt,name=AufAbschlagswaehrung,proto3,enum=bo4e.Waehrungseinheit" json:"AufAbschlagswaehrung,omitempty"`
}

func (x *PositionsAufAbschlag) Reset() {
	*x = PositionsAufAbschlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsAufAbschlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsAufAbschlag) ProtoMessage() {}

func (x *PositionsAufAbschlag) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsAufAbschlag.ProtoReflect.Descriptor instead.
func (*PositionsAufAbschlag) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{28}
}

func (x *PositionsAufAbschlag) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

func (x *PositionsAufAbschlag) GetBeschreibung() string {
	if x != nil {
		return x.Beschreibung
	}
	return ""
}

func (x *PositionsAufAbschlag) GetAufAbschlagstyp() AufAbschlagstyp {
	if x != nil {
		return x.AufAbschlagstyp
	}
	return AufAbschlagstyp_RELATIV
}

func (x *PositionsAufAbschlag) GetAufAbschlagswert() string {
	if x != nil {
		return x.AufAbschlagswert
	}
	return ""
}

func (x *PositionsAufAbschlag) GetAufAbschlagswaehrung() Waehrungseinheit {
	if x != nil {
		return x.AufAbschlagswaehrung
	}
	return Waehrungseinheit_Waehrungseinheit_EUR
}

type Preis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wert       string           `protobuf:"bytes,3,opt,name=Wert,proto3" json:"Wert,omitempty"`
	Einheit    Waehrungseinheit `protobuf:"varint,4,opt,name=Einheit,proto3,enum=bo4e.Waehrungseinheit" json:"Einheit,omitempty"`
	Bezugswert Mengeneinheit    `protobuf:"varint,5,opt,name=Bezugswert,proto3,enum=bo4e.Mengeneinheit" json:"Bezugswert,omitempty"`
	Status     Preisstatus      `protobuf:"varint,6,opt,name=Status,proto3,enum=bo4e.Preisstatus" json:"Status,omitempty"`
}

func (x *Preis) Reset() {
	*x = Preis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preis) ProtoMessage() {}

func (x *Preis) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preis.ProtoReflect.Descriptor instead.
func (*Preis) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{29}
}

func (x *Preis) GetWert() string {
	if x != nil {
		return x.Wert
	}
	return ""
}

func (x *Preis) GetEinheit() Waehrungseinheit {
	if x != nil {
		return x.Einheit
	}
	return Waehrungseinheit_Waehrungseinheit_EUR
}

func (x *Preis) GetBezugswert() Mengeneinheit {
	if x != nil {
		return x.Bezugswert
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

func (x *Preis) GetStatus() Preisstatus {
	if x != nil {
		return x.Status
	}
	return Preisstatus_VORLAEUFIG
}

type Preisblatt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bezeichnung     string           `protobuf:"bytes,4,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
	Gueltigkeit     *Zeitraum        `protobuf:"bytes,5,opt,name=Gueltigkeit,proto3" json:"Gueltigkeit,omitempty"`
	Preispositionen []*Preisposition `protobuf:"bytes,6,rep,name=Preispositionen,proto3" json:"Preispositionen,omitempty"`
}

func (x *Preisblatt) Reset() {
	*x = Preisblatt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preisblatt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preisblatt) ProtoMessage() {}

func (x *Preisblatt) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preisblatt.ProtoReflect.Descriptor instead.
func (*Preisblatt) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{30}
}

func (x *Preisblatt) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

func (x *Preisblatt) GetGueltigkeit() *Zeitraum {
	if x != nil {
		return x.Gueltigkeit
	}
	return nil
}

func (x *Preisblatt) GetPreispositionen() []*Preisposition {
	if x != nil {
		return x.Preispositionen
	}
	return nil
}

type Preisposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Berechnungsmethode  Kalkulationsmethode   `protobuf:"varint,3,opt,name=Berechnungsmethode,proto3,enum=bo4e.Kalkulationsmethode" json:"Berechnungsmethode,omitempty"`
	Leistungstyp        Leistungstyp          `protobuf:"varint,4,opt,name=Leistungstyp,proto3,enum=bo4e.Leistungstyp" json:"Leistungstyp,omitempty"`
	Leistungsbezeichung string                `protobuf:"bytes,5,opt,name=Leistungsbezeichung,proto3" json:"Leistungsbezeichung,omitempty"`
	Preiseinheit        Waehrungseinheit      `protobuf:"varint,6,opt,name=Preiseinheit,proto3,enum=bo4e.Waehrungseinheit" json:"Preiseinheit,omitempty"`
	Bezugsgroesse       Mengeneinheit         `protobuf:"varint,7,opt,name=Bezugsgroesse,proto3,enum=bo4e.Mengeneinheit" json:"Bezugsgroesse,omitempty"`
	Zeitbasis           Zeiteinheit           `protobuf:"varint,8,opt,name=Zeitbasis,proto3,enum=bo4e.Zeiteinheit" json:"Zeitbasis,omitempty"`
	Tarifzeit           Tarifzeit             `protobuf:"varint,9,opt,name=Tarifzeit,proto3,enum=bo4e.Tarifzeit" json:"Tarifzeit,omitempty"`
	BdewArtikelnummer   BDEWArtikelnummer     `protobuf:"varint,10,opt,name=BdewArtikelnummer,proto3,enum=bo4e.BDEWArtikelnummer" json:"BdewArtikelnummer,omitempty"`
	Zonungsgroesse      Bemessungsgroesse     `protobuf:"varint,11,opt,name=Zonungsgroesse,proto3,enum=bo4e.Bemessungsgroesse" json:"Zonungsgroesse,omitempty"`
	ZuAbschlaege        *PositionsAufAbschlag `protobuf:"bytes,12,opt,name=Zu_abschlaege,json=ZuAbschlaege,proto3" json:"Zu_abschlaege,omitempty"`
	Preisstaffeln       []*Preisstaffel       `protobuf:"bytes,13,rep,name=Preisstaffeln,proto3" json:"Preisstaffeln,omitempty"`
}

func (x *Preisposition) Reset() {
	*x = Preisposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preisposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preisposition) ProtoMessage() {}

func (x *Preisposition) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preisposition.ProtoReflect.Descriptor instead.
func (*Preisposition) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{31}
}

func (x *Preisposition) GetBerechnungsmethode() Kalkulationsmethode {
	if x != nil {
		return x.Berechnungsmethode
	}
	return Kalkulationsmethode_KEINE
}

func (x *Preisposition) GetLeistungstyp() Leistungstyp {
	if x != nil {
		return x.Leistungstyp
	}
	return Leistungstyp_ARBEITSPREIS_WIRKARBEIT
}

func (x *Preisposition) GetLeistungsbezeichung() string {
	if x != nil {
		return x.Leistungsbezeichung
	}
	return ""
}

func (x *Preisposition) GetPreiseinheit() Waehrungseinheit {
	if x != nil {
		return x.Preiseinheit
	}
	return Waehrungseinheit_Waehrungseinheit_EUR
}

func (x *Preisposition) GetBezugsgroesse() Mengeneinheit {
	if x != nil {
		return x.Bezugsgroesse
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

func (x *Preisposition) GetZeitbasis() Zeiteinheit {
	if x != nil {
		return x.Zeitbasis
	}
	return Zeiteinheit_Zeiteinheit_SEKUNDE
}

func (x *Preisposition) GetTarifzeit() Tarifzeit {
	if x != nil {
		return x.Tarifzeit
	}
	return Tarifzeit_TZ_STANDARD
}

func (x *Preisposition) GetBdewArtikelnummer() BDEWArtikelnummer {
	if x != nil {
		return x.BdewArtikelnummer
	}
	return BDEWArtikelnummer_BDEWArtikelnummer_LEISTUNG
}

func (x *Preisposition) GetZonungsgroesse() Bemessungsgroesse {
	if x != nil {
		return x.Zonungsgroesse
	}
	return Bemessungsgroesse_Bemessungsgroesse_WIRKARBEIT_EL
}

func (x *Preisposition) GetZuAbschlaege() *PositionsAufAbschlag {
	if x != nil {
		return x.ZuAbschlaege
	}
	return nil
}

func (x *Preisposition) GetPreisstaffeln() []*Preisstaffel {
	if x != nil {
		return x.Preisstaffeln
	}
	return nil
}

type Preisstaffel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Einheitspreis    string            `protobuf:"bytes,3,opt,name=Einheitspreis,proto3" json:"Einheitspreis,omitempty"`
	StaffelgrenzeVon string            `protobuf:"bytes,4,opt,name=StaffelgrenzeVon,proto3" json:"StaffelgrenzeVon,omitempty"`
	StaffelgrenzeBis string            `protobuf:"bytes,5,opt,name=StaffelgrenzeBis,proto3" json:"StaffelgrenzeBis,omitempty"`
	Sigmoidparameter *Sigmoidparameter `protobuf:"bytes,6,opt,name=Sigmoidparameter,proto3" json:"Sigmoidparameter,omitempty"`
}

func (x *Preisstaffel) Reset() {
	*x = Preisstaffel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preisstaffel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preisstaffel) ProtoMessage() {}

func (x *Preisstaffel) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preisstaffel.ProtoReflect.Descriptor instead.
func (*Preisstaffel) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{32}
}

func (x *Preisstaffel) GetEinheitspreis() string {
	if x != nil {
		return x.Einheitspreis
	}
	return ""
}

func (x *Preisstaffel) GetStaffelgrenzeVon() string {
	if x != nil {
		return x.StaffelgrenzeVon
	}
	return ""
}

func (x *Preisstaffel) GetStaffelgrenzeBis() string {
	if x != nil {
		return x.StaffelgrenzeBis
	}
	return ""
}

func (x *Preisstaffel) GetSigmoidparameter() *Sigmoidparameter {
	if x != nil {
		return x.Sigmoidparameter
	}
	return nil
}

type Rechnung struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rechnungstitel          string               `protobuf:"bytes,4,opt,name=Rechnungstitel,proto3" json:"Rechnungstitel,omitempty"`
	Rechnungsstatus         Rechnungsstatus      `protobuf:"varint,5,opt,name=Rechnungsstatus,proto3,enum=bo4e.Rechnungsstatus" json:"Rechnungsstatus,omitempty"`
	Storno                  bool                 `protobuf:"varint,6,opt,name=Storno,proto3" json:"Storno,omitempty"`
	Rechnungsnummer         string               `protobuf:"bytes,7,opt,name=Rechnungsnummer,proto3" json:"Rechnungsnummer,omitempty"`
	Rechnungsdatum          *DateTimeOffset      `protobuf:"bytes,8,opt,name=Rechnungsdatum,proto3" json:"Rechnungsdatum,omitempty"`
	Faelligkeitsdatum       *DateTimeOffset      `protobuf:"bytes,9,opt,name=Faelligkeitsdatum,proto3" json:"Faelligkeitsdatum,omitempty"`
	Rechnungsstyp           Rechnungstyp         `protobuf:"varint,10,opt,name=Rechnungsstyp,proto3,enum=bo4e.Rechnungstyp" json:"Rechnungsstyp,omitempty"`
	OriginalRechnungsnummer string               `protobuf:"bytes,11,opt,name=OriginalRechnungsnummer,proto3" json:"OriginalRechnungsnummer,omitempty"`
	Rechnungsperiode        *Zeitraum            `protobuf:"bytes,12,opt,name=Rechnungsperiode,proto3" json:"Rechnungsperiode,omitempty"`
	Rechnungsersteller      *Geschaeftspartner   `protobuf:"bytes,13,opt,name=Rechnungsersteller,proto3" json:"Rechnungsersteller,omitempty"`
	Rechnungsempfaenger     *Geschaeftspartner   `protobuf:"bytes,14,opt,name=Rechnungsempfaenger,proto3" json:"Rechnungsempfaenger,omitempty"`
	Gesamtnetto             *Betrag              `protobuf:"bytes,15,opt,name=Gesamtnetto,proto3" json:"Gesamtnetto,omitempty"`
	Gesamtsteuer            *Betrag              `protobuf:"bytes,16,opt,name=Gesamtsteuer,proto3" json:"Gesamtsteuer,omitempty"`
	Gesamtbrutto            *Betrag              `protobuf:"bytes,17,opt,name=Gesamtbrutto,proto3" json:"Gesamtbrutto,omitempty"`
	Vorausgezahlt           *Betrag              `protobuf:"bytes,18,opt,name=Vorausgezahlt,proto3" json:"Vorausgezahlt,omitempty"`
	RabattBrutto            *Betrag              `protobuf:"bytes,19,opt,name=RabattBrutto,proto3" json:"RabattBrutto,omitempty"`
	Zuzahlen                *Betrag              `protobuf:"bytes,20,opt,name=Zuzahlen,proto3" json:"Zuzahlen,omitempty"`
	Steuerbetraege          []*Steuerbetrag      `protobuf:"bytes,21,rep,name=Steuerbetraege,proto3" json:"Steuerbetraege,omitempty"`
	Rechnungspositionen     []*Rechnungsposition `protobuf:"bytes,22,rep,name=Rechnungspositionen,proto3" json:"Rechnungspositionen,omitempty"`
}

func (x *Rechnung) Reset() {
	*x = Rechnung{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rechnung) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rechnung) ProtoMessage() {}

func (x *Rechnung) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rechnung.ProtoReflect.Descriptor instead.
func (*Rechnung) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{33}
}

func (x *Rechnung) GetRechnungstitel() string {
	if x != nil {
		return x.Rechnungstitel
	}
	return ""
}

func (x *Rechnung) GetRechnungsstatus() Rechnungsstatus {
	if x != nil {
		return x.Rechnungsstatus
	}
	return Rechnungsstatus_GEPRUEFT_OK
}

func (x *Rechnung) GetStorno() bool {
	if x != nil {
		return x.Storno
	}
	return false
}

func (x *Rechnung) GetRechnungsnummer() string {
	if x != nil {
		return x.Rechnungsnummer
	}
	return ""
}

func (x *Rechnung) GetRechnungsdatum() *DateTimeOffset {
	if x != nil {
		return x.Rechnungsdatum
	}
	return nil
}

func (x *Rechnung) GetFaelligkeitsdatum() *DateTimeOffset {
	if x != nil {
		return x.Faelligkeitsdatum
	}
	return nil
}

func (x *Rechnung) GetRechnungsstyp() Rechnungstyp {
	if x != nil {
		return x.Rechnungsstyp
	}
	return Rechnungstyp_ABSCHLAGSRECHNUNG
}

func (x *Rechnung) GetOriginalRechnungsnummer() string {
	if x != nil {
		return x.OriginalRechnungsnummer
	}
	return ""
}

func (x *Rechnung) GetRechnungsperiode() *Zeitraum {
	if x != nil {
		return x.Rechnungsperiode
	}
	return nil
}

func (x *Rechnung) GetRechnungsersteller() *Geschaeftspartner {
	if x != nil {
		return x.Rechnungsersteller
	}
	return nil
}

func (x *Rechnung) GetRechnungsempfaenger() *Geschaeftspartner {
	if x != nil {
		return x.Rechnungsempfaenger
	}
	return nil
}

func (x *Rechnung) GetGesamtnetto() *Betrag {
	if x != nil {
		return x.Gesamtnetto
	}
	return nil
}

func (x *Rechnung) GetGesamtsteuer() *Betrag {
	if x != nil {
		return x.Gesamtsteuer
	}
	return nil
}

func (x *Rechnung) GetGesamtbrutto() *Betrag {
	if x != nil {
		return x.Gesamtbrutto
	}
	return nil
}

func (x *Rechnung) GetVorausgezahlt() *Betrag {
	if x != nil {
		return x.Vorausgezahlt
	}
	return nil
}

func (x *Rechnung) GetRabattBrutto() *Betrag {
	if x != nil {
		return x.RabattBrutto
	}
	return nil
}

func (x *Rechnung) GetZuzahlen() *Betrag {
	if x != nil {
		return x.Zuzahlen
	}
	return nil
}

func (x *Rechnung) GetSteuerbetraege() []*Steuerbetrag {
	if x != nil {
		return x.Steuerbetraege
	}
	return nil
}

func (x *Rechnung) GetRechnungspositionen() []*Rechnungsposition {
	if x != nil {
		return x.Rechnungspositionen
	}
	return nil
}

type Rechnungsposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positionsnummer   int32                    `protobuf:"varint,3,opt,name=Positionsnummer,proto3" json:"Positionsnummer,omitempty"`
	LieferungVon      *DateTimeOffset          `protobuf:"bytes,4,opt,name=LieferungVon,proto3" json:"LieferungVon,omitempty"`
	LieferungBis      *DateTimeOffset          `protobuf:"bytes,5,opt,name=LieferungBis,proto3" json:"LieferungBis,omitempty"`
	Positionstext     string                   `protobuf:"bytes,6,opt,name=Positionstext,proto3" json:"Positionstext,omitempty"`
	Zeiteinheit       Mengeneinheit            `protobuf:"varint,7,opt,name=Zeiteinheit,proto3,enum=bo4e.Mengeneinheit" json:"Zeiteinheit,omitempty"`
	Artikelnummer     BDEWArtikelnummer        `protobuf:"varint,8,opt,name=Artikelnummer,proto3,enum=bo4e.BDEWArtikelnummer" json:"Artikelnummer,omitempty"`
	LokationsId       string                   `protobuf:"bytes,9,opt,name=LokationsId,proto3" json:"LokationsId,omitempty"`
	PositionsMenge    *Menge                   `protobuf:"bytes,10,opt,name=PositionsMenge,proto3" json:"PositionsMenge,omitempty"`
	ZeitbezogeneMenge *Menge                   `protobuf:"bytes,11,opt,name=ZeitbezogeneMenge,proto3" json:"ZeitbezogeneMenge,omitempty"`
	Einzelpreis       *Preis                   `protobuf:"bytes,12,opt,name=Einzelpreis,proto3" json:"Einzelpreis,omitempty"`
	TeilsummeNetto    *Betrag                  `protobuf:"bytes,13,opt,name=TeilsummeNetto,proto3" json:"TeilsummeNetto,omitempty"`
	TeilrabattNetto   *Betrag                  `protobuf:"bytes,14,opt,name=TeilrabattNetto,proto3" json:"TeilrabattNetto,omitempty"`
	TeilsummeSteuer   *Steuerbetrag            `protobuf:"bytes,15,opt,name=TeilsummeSteuer,proto3" json:"TeilsummeSteuer,omitempty"`
	VertragskontoId   string                   `protobuf:"bytes,16,opt,name=VertragskontoId,proto3" json:"VertragskontoId,omitempty"`
	VertragsId        string                   `protobuf:"bytes,1017,opt,name=VertragsId,proto3" json:"VertragsId,omitempty"`
	Status            RechnungspositionsStatus `protobuf:"varint,1018,opt,name=Status,proto3,enum=bo4e.RechnungspositionsStatus" json:"Status,omitempty"`
}

func (x *Rechnungsposition) Reset() {
	*x = Rechnungsposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rechnungsposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rechnungsposition) ProtoMessage() {}

func (x *Rechnungsposition) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rechnungsposition.ProtoReflect.Descriptor instead.
func (*Rechnungsposition) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{34}
}

func (x *Rechnungsposition) GetPositionsnummer() int32 {
	if x != nil {
		return x.Positionsnummer
	}
	return 0
}

func (x *Rechnungsposition) GetLieferungVon() *DateTimeOffset {
	if x != nil {
		return x.LieferungVon
	}
	return nil
}

func (x *Rechnungsposition) GetLieferungBis() *DateTimeOffset {
	if x != nil {
		return x.LieferungBis
	}
	return nil
}

func (x *Rechnungsposition) GetPositionstext() string {
	if x != nil {
		return x.Positionstext
	}
	return ""
}

func (x *Rechnungsposition) GetZeiteinheit() Mengeneinheit {
	if x != nil {
		return x.Zeiteinheit
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

func (x *Rechnungsposition) GetArtikelnummer() BDEWArtikelnummer {
	if x != nil {
		return x.Artikelnummer
	}
	return BDEWArtikelnummer_BDEWArtikelnummer_LEISTUNG
}

func (x *Rechnungsposition) GetLokationsId() string {
	if x != nil {
		return x.LokationsId
	}
	return ""
}

func (x *Rechnungsposition) GetPositionsMenge() *Menge {
	if x != nil {
		return x.PositionsMenge
	}
	return nil
}

func (x *Rechnungsposition) GetZeitbezogeneMenge() *Menge {
	if x != nil {
		return x.ZeitbezogeneMenge
	}
	return nil
}

func (x *Rechnungsposition) GetEinzelpreis() *Preis {
	if x != nil {
		return x.Einzelpreis
	}
	return nil
}

func (x *Rechnungsposition) GetTeilsummeNetto() *Betrag {
	if x != nil {
		return x.TeilsummeNetto
	}
	return nil
}

func (x *Rechnungsposition) GetTeilrabattNetto() *Betrag {
	if x != nil {
		return x.TeilrabattNetto
	}
	return nil
}

func (x *Rechnungsposition) GetTeilsummeSteuer() *Steuerbetrag {
	if x != nil {
		return x.TeilsummeSteuer
	}
	return nil
}

func (x *Rechnungsposition) GetVertragskontoId() string {
	if x != nil {
		return x.VertragskontoId
	}
	return ""
}

func (x *Rechnungsposition) GetVertragsId() string {
	if x != nil {
		return x.VertragsId
	}
	return ""
}

func (x *Rechnungsposition) GetStatus() RechnungspositionsStatus {
	if x != nil {
		return x.Status
	}
	return RechnungspositionsStatus_ROH
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bezeichnung  string              `protobuf:"bytes,4,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
	PositivListe []*Regionskriterium `protobuf:"bytes,5,rep,name=PositivListe,proto3" json:"PositivListe,omitempty"`
	NegativListe []*Regionskriterium `protobuf:"bytes,6,rep,name=NegativListe,proto3" json:"NegativListe,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{35}
}

func (x *Region) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

func (x *Region) GetPositivListe() []*Regionskriterium {
	if x != nil {
		return x.PositivListe
	}
	return nil
}

func (x *Region) GetNegativListe() []*Regionskriterium {
	if x != nil {
		return x.NegativListe
	}
	return nil
}

type Regionskriterium struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gueltigkeitstyp     Gueltigkeitstyp     `protobuf:"varint,3,opt,name=Gueltigkeitstyp,proto3,enum=bo4e.Gueltigkeitstyp" json:"Gueltigkeitstyp,omitempty"`
	Sparte              Sparte              `protobuf:"varint,4,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	Mengenoperator      Mengenoperator      `protobuf:"varint,5,opt,name=Mengenoperator,proto3,enum=bo4e.Mengenoperator" json:"Mengenoperator,omitempty"`
	Regionskriteriumtyp Regionskriteriumtyp `protobuf:"varint,6,opt,name=Regionskriteriumtyp,proto3,enum=bo4e.Regionskriteriumtyp" json:"Regionskriteriumtyp,omitempty"`
	Wert                string              `protobuf:"bytes,7,opt,name=Wert,proto3" json:"Wert,omitempty"`
}

func (x *Regionskriterium) Reset() {
	*x = Regionskriterium{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Regionskriterium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regionskriterium) ProtoMessage() {}

func (x *Regionskriterium) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regionskriterium.ProtoReflect.Descriptor instead.
func (*Regionskriterium) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{36}
}

func (x *Regionskriterium) GetGueltigkeitstyp() Gueltigkeitstyp {
	if x != nil {
		return x.Gueltigkeitstyp
	}
	return Gueltigkeitstyp_NICHT_IN
}

func (x *Regionskriterium) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Regionskriterium) GetMengenoperator() Mengenoperator {
	if x != nil {
		return x.Mengenoperator
	}
	return Mengenoperator_KLEINER_ALS
}

func (x *Regionskriterium) GetRegionskriteriumtyp() Regionskriteriumtyp {
	if x != nil {
		return x.Regionskriteriumtyp
	}
	return Regionskriteriumtyp_BUNDESLANDKENNZIFFER
}

func (x *Regionskriterium) GetWert() string {
	if x != nil {
		return x.Wert
	}
	return ""
}

type Rufnummer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nummerntyp Rufnummernart `protobuf:"varint,3,opt,name=Nummerntyp,proto3,enum=bo4e.Rufnummernart" json:"Nummerntyp,omitempty"`
	Rufnummer  string        `protobuf:"bytes,4,opt,name=rufnummer,proto3" json:"rufnummer,omitempty"`
}

func (x *Rufnummer) Reset() {
	*x = Rufnummer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rufnummer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rufnummer) ProtoMessage() {}

func (x *Rufnummer) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rufnummer.ProtoReflect.Descriptor instead.
func (*Rufnummer) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{37}
}

func (x *Rufnummer) GetNummerntyp() Rufnummernart {
	if x != nil {
		return x.Nummerntyp
	}
	return Rufnummernart_RUF_ZENTRALE
}

func (x *Rufnummer) GetRufnummer() string {
	if x != nil {
		return x.Rufnummer
	}
	return ""
}

type Sigmoidparameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A string `protobuf:"bytes,3,opt,name=A,proto3" json:"A,omitempty"`
	B string `protobuf:"bytes,4,opt,name=B,proto3" json:"B,omitempty"`
	C string `protobuf:"bytes,5,opt,name=C,proto3" json:"C,omitempty"`
	D string `protobuf:"bytes,6,opt,name=D,proto3" json:"D,omitempty"`
}

func (x *Sigmoidparameter) Reset() {
	*x = Sigmoidparameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sigmoidparameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sigmoidparameter) ProtoMessage() {}

func (x *Sigmoidparameter) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sigmoidparameter.ProtoReflect.Descriptor instead.
func (*Sigmoidparameter) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{38}
}

func (x *Sigmoidparameter) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *Sigmoidparameter) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

func (x *Sigmoidparameter) GetC() string {
	if x != nil {
		return x.C
	}
	return ""
}

func (x *Sigmoidparameter) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

type Steuerbetrag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steuerkennzeichen Steuerkennzeichen `protobuf:"varint,3,opt,name=Steuerkennzeichen,proto3,enum=bo4e.Steuerkennzeichen" json:"Steuerkennzeichen,omitempty"`
	Basiswert         string            `protobuf:"bytes,4,opt,name=Basiswert,proto3" json:"Basiswert,omitempty"`
	Steuerwert        string            `protobuf:"bytes,5,opt,name=Steuerwert,proto3" json:"Steuerwert,omitempty"`
	Waehrung          Waehrungscode     `protobuf:"varint,6,opt,name=Waehrung,proto3,enum=bo4e.Waehrungscode" json:"Waehrung,omitempty"`
}

func (x *Steuerbetrag) Reset() {
	*x = Steuerbetrag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Steuerbetrag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Steuerbetrag) ProtoMessage() {}

func (x *Steuerbetrag) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Steuerbetrag.ProtoReflect.Descriptor instead.
func (*Steuerbetrag) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{39}
}

func (x *Steuerbetrag) GetSteuerkennzeichen() Steuerkennzeichen {
	if x != nil {
		return x.Steuerkennzeichen
	}
	return Steuerkennzeichen_UST_19
}

func (x *Steuerbetrag) GetBasiswert() string {
	if x != nil {
		return x.Basiswert
	}
	return ""
}

func (x *Steuerbetrag) GetSteuerwert() string {
	if x != nil {
		return x.Steuerwert
	}
	return ""
}

func (x *Steuerbetrag) GetWaehrung() Waehrungscode {
	if x != nil {
		return x.Waehrung
	}
	return Waehrungscode_AFN
}

type Unterschrift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ort   string          `protobuf:"bytes,3,opt,name=Ort,proto3" json:"Ort,omitempty"`
	Datum *DateTimeOffset `protobuf:"bytes,4,opt,name=Datum,proto3" json:"Datum,omitempty"`
	Name  string          `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Unterschrift) Reset() {
	*x = Unterschrift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unterschrift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unterschrift) ProtoMessage() {}

func (x *Unterschrift) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unterschrift.ProtoReflect.Descriptor instead.
func (*Unterschrift) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{40}
}

func (x *Unterschrift) GetOrt() string {
	if x != nil {
		return x.Ort
	}
	return ""
}

func (x *Unterschrift) GetDatum() *DateTimeOffset {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *Unterschrift) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Verbrauch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Startdatum               *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=Startdatum,proto3" json:"Startdatum,omitempty"`
	Enddatum                 *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=Enddatum,proto3" json:"Enddatum,omitempty"`
	Wertermittlungsverfahren Wertermittlungsverfahren `protobuf:"varint,5,opt,name=Wertermittlungsverfahren,proto3,enum=bo4e.Wertermittlungsverfahren" json:"Wertermittlungsverfahren,omitempty"`
	Obiskennzahl             string                   `protobuf:"bytes,6,opt,name=Obiskennzahl,proto3" json:"Obiskennzahl,omitempty"`
	Wert                     string                   `protobuf:"bytes,7,opt,name=Wert,proto3" json:"Wert,omitempty"`
	Einheit                  Mengeneinheit            `protobuf:"varint,8,opt,name=Einheit,proto3,enum=bo4e.Mengeneinheit" json:"Einheit,omitempty"`
	Type                     Verbrauchsmengetyp       `protobuf:"varint,9,opt,name=Type,proto3,enum=bo4e.Verbrauchsmengetyp" json:"Type,omitempty"`
}

func (x *Verbrauch) Reset() {
	*x = Verbrauch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verbrauch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verbrauch) ProtoMessage() {}

func (x *Verbrauch) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verbrauch.ProtoReflect.Descriptor instead.
func (*Verbrauch) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{41}
}

func (x *Verbrauch) GetStartdatum() *timestamppb.Timestamp {
	if x != nil {
		return x.Startdatum
	}
	return nil
}

func (x *Verbrauch) GetEnddatum() *timestamppb.Timestamp {
	if x != nil {
		return x.Enddatum
	}
	return nil
}

func (x *Verbrauch) GetWertermittlungsverfahren() Wertermittlungsverfahren {
	if x != nil {
		return x.Wertermittlungsverfahren
	}
	return Wertermittlungsverfahren_PROGNOSE
}

func (x *Verbrauch) GetObiskennzahl() string {
	if x != nil {
		return x.Obiskennzahl
	}
	return ""
}

func (x *Verbrauch) GetWert() string {
	if x != nil {
		return x.Wert
	}
	return ""
}

func (x *Verbrauch) GetEinheit() Mengeneinheit {
	if x != nil {
		return x.Einheit
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

func (x *Verbrauch) GetType() Verbrauchsmengetyp {
	if x != nil {
		return x.Type
	}
	return Verbrauchsmengetyp_ARBEITLEISTUNGTAGESPARAMETERABHMALO
}

type Vertrag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertragsnummer       string               `protobuf:"bytes,4,opt,name=Vertragsnummer,proto3" json:"Vertragsnummer,omitempty"`
	Beschreibung         string               `protobuf:"bytes,5,opt,name=Beschreibung,proto3" json:"Beschreibung,omitempty"`
	Vertragsart          Vertragsart          `protobuf:"varint,6,opt,name=Vertragsart,proto3,enum=bo4e.Vertragsart" json:"Vertragsart,omitempty"`
	Vertragstatus        Vertragstatus        `protobuf:"varint,7,opt,name=Vertragstatus,proto3,enum=bo4e.Vertragstatus" json:"Vertragstatus,omitempty"`
	Sparte               Sparte               `protobuf:"varint,8,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	Vertragsbeginn       *DateTimeOffset      `protobuf:"bytes,9,opt,name=Vertragsbeginn,proto3" json:"Vertragsbeginn,omitempty"`
	Vertragsende         *DateTimeOffset      `protobuf:"bytes,10,opt,name=Vertragsende,proto3" json:"Vertragsende,omitempty"`
	Vertragspartner1     *Geschaeftspartner   `protobuf:"bytes,11,opt,name=Vertragspartner1,proto3" json:"Vertragspartner1,omitempty"`
	Vertragspartner2     *Geschaeftspartner   `protobuf:"bytes,12,opt,name=Vertragspartner2,proto3" json:"Vertragspartner2,omitempty"`
	Unterzeichnervp1     []*Unterschrift      `protobuf:"bytes,13,rep,name=Unterzeichnervp1,proto3" json:"Unterzeichnervp1,omitempty"`
	Unterzeichnervp2     []*Unterschrift      `protobuf:"bytes,14,rep,name=Unterzeichnervp2,proto3" json:"Unterzeichnervp2,omitempty"`
	Vertragskonditionen  *Vertragskonditionen `protobuf:"bytes,15,opt,name=Vertragskonditionen,proto3" json:"Vertragskonditionen,omitempty"`
	Vertragsteile        []*Vertragsteil      `protobuf:"bytes,16,rep,name=Vertragsteile,proto3" json:"Vertragsteile,omitempty"`
	Gemeinderabatt       string               `protobuf:"bytes,1017,opt,name=Gemeinderabatt,proto3" json:"Gemeinderabatt,omitempty"`
	Korrespondenzpartner *Geschaeftspartner   `protobuf:"bytes,1018,opt,name=Korrespondenzpartner,proto3" json:"Korrespondenzpartner,omitempty"`
}

func (x *Vertrag) Reset() {
	*x = Vertrag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertrag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertrag) ProtoMessage() {}

func (x *Vertrag) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertrag.ProtoReflect.Descriptor instead.
func (*Vertrag) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{42}
}

func (x *Vertrag) GetVertragsnummer() string {
	if x != nil {
		return x.Vertragsnummer
	}
	return ""
}

func (x *Vertrag) GetBeschreibung() string {
	if x != nil {
		return x.Beschreibung
	}
	return ""
}

func (x *Vertrag) GetVertragsart() Vertragsart {
	if x != nil {
		return x.Vertragsart
	}
	return Vertragsart_ENERGIELIEFERVERTRAG
}

func (x *Vertrag) GetVertragstatus() Vertragstatus {
	if x != nil {
		return x.Vertragstatus
	}
	return Vertragstatus_Vertragstatus_IN_ARBEIT
}

func (x *Vertrag) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Vertrag) GetVertragsbeginn() *DateTimeOffset {
	if x != nil {
		return x.Vertragsbeginn
	}
	return nil
}

func (x *Vertrag) GetVertragsende() *DateTimeOffset {
	if x != nil {
		return x.Vertragsende
	}
	return nil
}

func (x *Vertrag) GetVertragspartner1() *Geschaeftspartner {
	if x != nil {
		return x.Vertragspartner1
	}
	return nil
}

func (x *Vertrag) GetVertragspartner2() *Geschaeftspartner {
	if x != nil {
		return x.Vertragspartner2
	}
	return nil
}

func (x *Vertrag) GetUnterzeichnervp1() []*Unterschrift {
	if x != nil {
		return x.Unterzeichnervp1
	}
	return nil
}

func (x *Vertrag) GetUnterzeichnervp2() []*Unterschrift {
	if x != nil {
		return x.Unterzeichnervp2
	}
	return nil
}

func (x *Vertrag) GetVertragskonditionen() *Vertragskonditionen {
	if x != nil {
		return x.Vertragskonditionen
	}
	return nil
}

func (x *Vertrag) GetVertragsteile() []*Vertragsteil {
	if x != nil {
		return x.Vertragsteile
	}
	return nil
}

func (x *Vertrag) GetGemeinderabatt() string {
	if x != nil {
		return x.Gemeinderabatt
	}
	return ""
}

func (x *Vertrag) GetKorrespondenzpartner() *Geschaeftspartner {
	if x != nil {
		return x.Korrespondenzpartner
	}
	return nil
}

type Vertragskonditionen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beschreibung                     string                           `protobuf:"bytes,3,opt,name=Beschreibung,proto3" json:"Beschreibung,omitempty"`
	AnzahlAbschlaege                 int32                            `protobuf:"varint,4,opt,name=AnzahlAbschlaege,proto3" json:"AnzahlAbschlaege,omitempty"`
	Vertragslaufzeit                 *Zeitraum                        `protobuf:"bytes,5,opt,name=Vertragslaufzeit,proto3" json:"Vertragslaufzeit,omitempty"`
	Kuendigungsfrist                 *Zeitraum                        `protobuf:"bytes,6,opt,name=Kuendigungsfrist,proto3" json:"Kuendigungsfrist,omitempty"`
	Vertragsverlaengerung            *Zeitraum                        `protobuf:"bytes,7,opt,name=Vertragsverlaengerung,proto3" json:"Vertragsverlaengerung,omitempty"`
	Abschlagszyklus                  *Zeitraum                        `protobuf:"bytes,8,opt,name=Abschlagszyklus,proto3" json:"Abschlagszyklus,omitempty"`
	StartAbrechnungsjahr             *DateTimeOffset                  `protobuf:"bytes,1009,opt,name=StartAbrechnungsjahr,proto3" json:"StartAbrechnungsjahr,omitempty"`
	GeplanteTurnusablesung           *Zeitraum                        `protobuf:"bytes,1010,opt,name=GeplanteTurnusablesung,proto3" json:"GeplanteTurnusablesung,omitempty"`
	TurnusablesungIntervall          int32                            `protobuf:"varint,1011,opt,name=TurnusablesungIntervall,proto3" json:"TurnusablesungIntervall,omitempty"`
	Netznutzungsabrechnung           *Zeitraum                        `protobuf:"bytes,1012,opt,name=Netznutzungsabrechnung,proto3" json:"Netznutzungsabrechnung,omitempty"`
	NetznutzungsabrechnungIntervall  int32                            `protobuf:"varint,1013,opt,name=NetznutzungsabrechnungIntervall,proto3" json:"NetznutzungsabrechnungIntervall,omitempty"`
	Haushaltskunde                   bool                             `protobuf:"varint,1014,opt,name=Haushaltskunde,proto3" json:"Haushaltskunde,omitempty"`
	Netznutzungsvertrag              NetznutzungsVertrag              `protobuf:"varint,1015,opt,name=Netznutzungsvertrag,proto3,enum=bo4e.NetznutzungsVertrag" json:"Netznutzungsvertrag,omitempty"`
	Netznutzungszahler               Netznutzungszahler               `protobuf:"varint,1016,opt,name=Netznutzungszahler,proto3,enum=bo4e.Netznutzungszahler" json:"Netznutzungszahler,omitempty"`
	Netznutzungsabrechnungsvariante  Netznutzungsabrechnungsvariante  `protobuf:"varint,1017,opt,name=Netznutzungsabrechnungsvariante,proto3,enum=bo4e.Netznutzungsabrechnungsvariante" json:"Netznutzungsabrechnungsvariante,omitempty"`
	Netznutzungsabrechnungsgrundlage Netznutzungsabrechnungsgrundlage `protobuf:"varint,1018,opt,name=Netznutzungsabrechnungsgrundlage,proto3,enum=bo4e.Netznutzungsabrechnungsgrundlage" json:"Netznutzungsabrechnungsgrundlage,omitempty"`
}

func (x *Vertragskonditionen) Reset() {
	*x = Vertragskonditionen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertragskonditionen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertragskonditionen) ProtoMessage() {}

func (x *Vertragskonditionen) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertragskonditionen.ProtoReflect.Descriptor instead.
func (*Vertragskonditionen) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{43}
}

func (x *Vertragskonditionen) GetBeschreibung() string {
	if x != nil {
		return x.Beschreibung
	}
	return ""
}

func (x *Vertragskonditionen) GetAnzahlAbschlaege() int32 {
	if x != nil {
		return x.AnzahlAbschlaege
	}
	return 0
}

func (x *Vertragskonditionen) GetVertragslaufzeit() *Zeitraum {
	if x != nil {
		return x.Vertragslaufzeit
	}
	return nil
}

func (x *Vertragskonditionen) GetKuendigungsfrist() *Zeitraum {
	if x != nil {
		return x.Kuendigungsfrist
	}
	return nil
}

func (x *Vertragskonditionen) GetVertragsverlaengerung() *Zeitraum {
	if x != nil {
		return x.Vertragsverlaengerung
	}
	return nil
}

func (x *Vertragskonditionen) GetAbschlagszyklus() *Zeitraum {
	if x != nil {
		return x.Abschlagszyklus
	}
	return nil
}

func (x *Vertragskonditionen) GetStartAbrechnungsjahr() *DateTimeOffset {
	if x != nil {
		return x.StartAbrechnungsjahr
	}
	return nil
}

func (x *Vertragskonditionen) GetGeplanteTurnusablesung() *Zeitraum {
	if x != nil {
		return x.GeplanteTurnusablesung
	}
	return nil
}

func (x *Vertragskonditionen) GetTurnusablesungIntervall() int32 {
	if x != nil {
		return x.TurnusablesungIntervall
	}
	return 0
}

func (x *Vertragskonditionen) GetNetznutzungsabrechnung() *Zeitraum {
	if x != nil {
		return x.Netznutzungsabrechnung
	}
	return nil
}

func (x *Vertragskonditionen) GetNetznutzungsabrechnungIntervall() int32 {
	if x != nil {
		return x.NetznutzungsabrechnungIntervall
	}
	return 0
}

func (x *Vertragskonditionen) GetHaushaltskunde() bool {
	if x != nil {
		return x.Haushaltskunde
	}
	return false
}

func (x *Vertragskonditionen) GetNetznutzungsvertrag() NetznutzungsVertrag {
	if x != nil {
		return x.Netznutzungsvertrag
	}
	return NetznutzungsVertrag_KUNDEN_NB
}

func (x *Vertragskonditionen) GetNetznutzungszahler() Netznutzungszahler {
	if x != nil {
		return x.Netznutzungszahler
	}
	return Netznutzungszahler_Netznutzungszahler_KUNDE
}

func (x *Vertragskonditionen) GetNetznutzungsabrechnungsvariante() Netznutzungsabrechnungsvariante {
	if x != nil {
		return x.Netznutzungsabrechnungsvariante
	}
	return Netznutzungsabrechnungsvariante_ARBEITSPREIS_GRUNDPREIS
}

func (x *Vertragskonditionen) GetNetznutzungsabrechnungsgrundlage() Netznutzungsabrechnungsgrundlage {
	if x != nil {
		return x.Netznutzungsabrechnungsgrundlage
	}
	return Netznutzungsabrechnungsgrundlage_LIEFERSCHEIN
}

type Vertragsteil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertragsteilbeginn       *DateTimeOffset `protobuf:"bytes,3,opt,name=Vertragsteilbeginn,proto3" json:"Vertragsteilbeginn,omitempty"`
	Vertragsteilende         *DateTimeOffset `protobuf:"bytes,4,opt,name=Vertragsteilende,proto3" json:"Vertragsteilende,omitempty"`
	Lokation                 string          `protobuf:"bytes,5,opt,name=Lokation,proto3" json:"Lokation,omitempty"`
	VertraglichFixierteMenge *Menge          `protobuf:"bytes,6,opt,name=VertraglichFixierteMenge,proto3" json:"VertraglichFixierteMenge,omitempty"`
	MinimaleAbnahmemenge     *Menge          `protobuf:"bytes,7,opt,name=MinimaleAbnahmemenge,proto3" json:"MinimaleAbnahmemenge,omitempty"`
	MaximaleAbnahmemenge     *Menge          `protobuf:"bytes,8,opt,name=MaximaleAbnahmemenge,proto3" json:"MaximaleAbnahmemenge,omitempty"`
	Jahresverbrauchsprognose *Menge          `protobuf:"bytes,1009,opt,name=Jahresverbrauchsprognose,proto3" json:"Jahresverbrauchsprognose,omitempty"`
	Kundenwert               *Menge          `protobuf:"bytes,1010,opt,name=Kundenwert,proto3" json:"Kundenwert,omitempty"`
	Verbrauchsaufteilung     string          `protobuf:"bytes,1011,opt,name=Verbrauchsaufteilung,proto3" json:"Verbrauchsaufteilung,omitempty"`
}

func (x *Vertragsteil) Reset() {
	*x = Vertragsteil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertragsteil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertragsteil) ProtoMessage() {}

func (x *Vertragsteil) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertragsteil.ProtoReflect.Descriptor instead.
func (*Vertragsteil) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{44}
}

func (x *Vertragsteil) GetVertragsteilbeginn() *DateTimeOffset {
	if x != nil {
		return x.Vertragsteilbeginn
	}
	return nil
}

func (x *Vertragsteil) GetVertragsteilende() *DateTimeOffset {
	if x != nil {
		return x.Vertragsteilende
	}
	return nil
}

func (x *Vertragsteil) GetLokation() string {
	if x != nil {
		return x.Lokation
	}
	return ""
}

func (x *Vertragsteil) GetVertraglichFixierteMenge() *Menge {
	if x != nil {
		return x.VertraglichFixierteMenge
	}
	return nil
}

func (x *Vertragsteil) GetMinimaleAbnahmemenge() *Menge {
	if x != nil {
		return x.MinimaleAbnahmemenge
	}
	return nil
}

func (x *Vertragsteil) GetMaximaleAbnahmemenge() *Menge {
	if x != nil {
		return x.MaximaleAbnahmemenge
	}
	return nil
}

func (x *Vertragsteil) GetJahresverbrauchsprognose() *Menge {
	if x != nil {
		return x.Jahresverbrauchsprognose
	}
	return nil
}

func (x *Vertragsteil) GetKundenwert() *Menge {
	if x != nil {
		return x.Kundenwert
	}
	return nil
}

func (x *Vertragsteil) GetVerbrauchsaufteilung() string {
	if x != nil {
		return x.Verbrauchsaufteilung
	}
	return ""
}

type Zaehler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zaehlernummer      string             `protobuf:"bytes,4,opt,name=Zaehlernummer,proto3" json:"Zaehlernummer,omitempty"`
	Sparte             Sparte             `protobuf:"varint,5,opt,name=Sparte,proto3,enum=bo4e.Sparte" json:"Sparte,omitempty"`
	Zaehlerauspraegung Zaehlerauspraegung `protobuf:"varint,6,opt,name=Zaehlerauspraegung,proto3,enum=bo4e.Zaehlerauspraegung" json:"Zaehlerauspraegung,omitempty"`
	Zaehlertyp         Zaehlertyp         `protobuf:"varint,7,opt,name=Zaehlertyp,proto3,enum=bo4e.Zaehlertyp" json:"Zaehlertyp,omitempty"`
	Tarifart           Tarifart           `protobuf:"varint,8,opt,name=Tarifart,proto3,enum=bo4e.Tarifart" json:"Tarifart,omitempty"`
	Zaehlerkonstante   string             `protobuf:"bytes,9,opt,name=Zaehlerkonstante,proto3" json:"Zaehlerkonstante,omitempty"`
	EichungBis         *DateTimeOffset    `protobuf:"bytes,10,opt,name=EichungBis,proto3" json:"EichungBis,omitempty"`
	LetzteEichung      *DateTimeOffset    `protobuf:"bytes,11,opt,name=LetzteEichung,proto3" json:"LetzteEichung,omitempty"`
	Zaehlwerke         []*Zaehlwerk       `protobuf:"bytes,12,rep,name=Zaehlwerke,proto3" json:"Zaehlwerke,omitempty"`
	Zaehlerhersteller  *Geschaeftspartner `protobuf:"bytes,13,opt,name=Zaehlerhersteller,proto3" json:"Zaehlerhersteller,omitempty"`
	Gateway            string             `protobuf:"bytes,1014,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	Fernschaltung      Fernschaltung      `protobuf:"varint,1015,opt,name=Fernschaltung,proto3,enum=bo4e.Fernschaltung" json:"Fernschaltung,omitempty"`
	Messwerterfassung  Messwerterfassung  `protobuf:"varint,1016,opt,name=Messwerterfassung,proto3,enum=bo4e.Messwerterfassung" json:"Messwerterfassung,omitempty"`
}

func (x *Zaehler) Reset() {
	*x = Zaehler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zaehler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zaehler) ProtoMessage() {}

func (x *Zaehler) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zaehler.ProtoReflect.Descriptor instead.
func (*Zaehler) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{45}
}

func (x *Zaehler) GetZaehlernummer() string {
	if x != nil {
		return x.Zaehlernummer
	}
	return ""
}

func (x *Zaehler) GetSparte() Sparte {
	if x != nil {
		return x.Sparte
	}
	return Sparte_Sparte_STROM
}

func (x *Zaehler) GetZaehlerauspraegung() Zaehlerauspraegung {
	if x != nil {
		return x.Zaehlerauspraegung
	}
	return Zaehlerauspraegung_EINRICHTUNGSZAEHLER
}

func (x *Zaehler) GetZaehlertyp() Zaehlertyp {
	if x != nil {
		return x.Zaehlertyp
	}
	return Zaehlertyp_DREHSTROMZAEHLER
}

func (x *Zaehler) GetTarifart() Tarifart {
	if x != nil {
		return x.Tarifart
	}
	return Tarifart_EINTARIF
}

func (x *Zaehler) GetZaehlerkonstante() string {
	if x != nil {
		return x.Zaehlerkonstante
	}
	return ""
}

func (x *Zaehler) GetEichungBis() *DateTimeOffset {
	if x != nil {
		return x.EichungBis
	}
	return nil
}

func (x *Zaehler) GetLetzteEichung() *DateTimeOffset {
	if x != nil {
		return x.LetzteEichung
	}
	return nil
}

func (x *Zaehler) GetZaehlwerke() []*Zaehlwerk {
	if x != nil {
		return x.Zaehlwerke
	}
	return nil
}

func (x *Zaehler) GetZaehlerhersteller() *Geschaeftspartner {
	if x != nil {
		return x.Zaehlerhersteller
	}
	return nil
}

func (x *Zaehler) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Zaehler) GetFernschaltung() Fernschaltung {
	if x != nil {
		return x.Fernschaltung
	}
	return Fernschaltung_VORHANDEN
}

func (x *Zaehler) GetMesswerterfassung() Messwerterfassung {
	if x != nil {
		return x.Messwerterfassung
	}
	return Messwerterfassung_FERNAUSLESBAR
}

type Zaehlwerk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZaehlwerkId         string             `protobuf:"bytes,3,opt,name=ZaehlwerkId,proto3" json:"ZaehlwerkId,omitempty"`
	Bezeichnung         string             `protobuf:"bytes,4,opt,name=Bezeichnung,proto3" json:"Bezeichnung,omitempty"`
	Richtung            Energierichtung    `protobuf:"varint,5,opt,name=Richtung,proto3,enum=bo4e.Energierichtung" json:"Richtung,omitempty"`
	ObisKennzahl        string             `protobuf:"bytes,6,opt,name=ObisKennzahl,proto3" json:"ObisKennzahl,omitempty"`
	Wandlerfaktor       string             `protobuf:"bytes,7,opt,name=Wandlerfaktor,proto3" json:"Wandlerfaktor,omitempty"`
	Einheit             Mengeneinheit      `protobuf:"varint,8,opt,name=Einheit,proto3,enum=bo4e.Mengeneinheit" json:"Einheit,omitempty"`
	Kennzahl            string             `protobuf:"bytes,1009,opt,name=Kennzahl,proto3" json:"Kennzahl,omitempty"`
	Schwachlastfaehig   Schwachlastfaehig  `protobuf:"varint,1010,opt,name=Schwachlastfaehig,proto3,enum=bo4e.Schwachlastfaehig" json:"Schwachlastfaehig,omitempty"`
	Verwendungszwecke   []Verwendungszweck `protobuf:"varint,1011,rep,name=Verwendungszwecke,proto3,enum=bo4e.Verwendungszweck" json:"Verwendungszwecke,omitempty"`
	Verbrauchsart       Verbrauchsart      `protobuf:"varint,1012,opt,name=Verbrauchsart,proto3,enum=bo4e.Verbrauchsart" json:"Verbrauchsart,omitempty"`
	Unterbrechbarkeit   Unterbrechbarkeit  `protobuf:"varint,1013,opt,name=Unterbrechbarkeit,proto3,enum=bo4e.Unterbrechbarkeit" json:"Unterbrechbarkeit,omitempty"`
	Waermenutzung       Waermenutzung      `protobuf:"varint,1014,opt,name=Waermenutzung,proto3,enum=bo4e.Waermenutzung" json:"Waermenutzung,omitempty"`
	Konzessionsabgabe   *Konzessionsabgabe `protobuf:"bytes,1015,opt,name=Konzessionsabgabe,proto3" json:"Konzessionsabgabe,omitempty"`
	Steuerbefreit       bool               `protobuf:"varint,1016,opt,name=Steuerbefreit,proto3" json:"Steuerbefreit,omitempty"`
	Vorkommastelle      int32              `protobuf:"varint,1017,opt,name=Vorkommastelle,proto3" json:"Vorkommastelle,omitempty"`
	Nachkommastelle     int32              `protobuf:"varint,1018,opt,name=Nachkommastelle,proto3" json:"Nachkommastelle,omitempty"`
	Abrechnungsrelevant bool               `protobuf:"varint,1019,opt,name=Abrechnungsrelevant,proto3" json:"Abrechnungsrelevant,omitempty"`
}

func (x *Zaehlwerk) Reset() {
	*x = Zaehlwerk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zaehlwerk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zaehlwerk) ProtoMessage() {}

func (x *Zaehlwerk) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zaehlwerk.ProtoReflect.Descriptor instead.
func (*Zaehlwerk) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{46}
}

func (x *Zaehlwerk) GetZaehlwerkId() string {
	if x != nil {
		return x.ZaehlwerkId
	}
	return ""
}

func (x *Zaehlwerk) GetBezeichnung() string {
	if x != nil {
		return x.Bezeichnung
	}
	return ""
}

func (x *Zaehlwerk) GetRichtung() Energierichtung {
	if x != nil {
		return x.Richtung
	}
	return Energierichtung_AUSSP
}

func (x *Zaehlwerk) GetObisKennzahl() string {
	if x != nil {
		return x.ObisKennzahl
	}
	return ""
}

func (x *Zaehlwerk) GetWandlerfaktor() string {
	if x != nil {
		return x.Wandlerfaktor
	}
	return ""
}

func (x *Zaehlwerk) GetEinheit() Mengeneinheit {
	if x != nil {
		return x.Einheit
	}
	return Mengeneinheit_Mengeneinheit_ZERO
}

func (x *Zaehlwerk) GetKennzahl() string {
	if x != nil {
		return x.Kennzahl
	}
	return ""
}

func (x *Zaehlwerk) GetSchwachlastfaehig() Schwachlastfaehig {
	if x != nil {
		return x.Schwachlastfaehig
	}
	return Schwachlastfaehig_NICHT_SCHWACHLASTFAEHIG
}

func (x *Zaehlwerk) GetVerwendungszwecke() []Verwendungszweck {
	if x != nil {
		return x.Verwendungszwecke
	}
	return nil
}

func (x *Zaehlwerk) GetVerbrauchsart() Verbrauchsart {
	if x != nil {
		return x.Verbrauchsart
	}
	return Verbrauchsart_KL
}

func (x *Zaehlwerk) GetUnterbrechbarkeit() Unterbrechbarkeit {
	if x != nil {
		return x.Unterbrechbarkeit
	}
	return Unterbrechbarkeit_UV
}

func (x *Zaehlwerk) GetWaermenutzung() Waermenutzung {
	if x != nil {
		return x.Waermenutzung
	}
	return Waermenutzung_SPEICHERHEIZUNG
}

func (x *Zaehlwerk) GetKonzessionsabgabe() *Konzessionsabgabe {
	if x != nil {
		return x.Konzessionsabgabe
	}
	return nil
}

func (x *Zaehlwerk) GetSteuerbefreit() bool {
	if x != nil {
		return x.Steuerbefreit
	}
	return false
}

func (x *Zaehlwerk) GetVorkommastelle() int32 {
	if x != nil {
		return x.Vorkommastelle
	}
	return 0
}

func (x *Zaehlwerk) GetNachkommastelle() int32 {
	if x != nil {
		return x.Nachkommastelle
	}
	return 0
}

func (x *Zaehlwerk) GetAbrechnungsrelevant() bool {
	if x != nil {
		return x.Abrechnungsrelevant
	}
	return false
}

type Zeitraum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Einheit    Zeiteinheit     `protobuf:"varint,3,opt,name=Einheit,proto3,enum=bo4e.Zeiteinheit" json:"Einheit,omitempty"`
	Dauer      string          `protobuf:"bytes,4,opt,name=Dauer,proto3" json:"Dauer,omitempty"`
	Startdatum *DateTimeOffset `protobuf:"bytes,5,opt,name=Startdatum,proto3" json:"Startdatum,omitempty"`
	Enddatum   *DateTimeOffset `protobuf:"bytes,6,opt,name=Enddatum,proto3" json:"Enddatum,omitempty"`
}

func (x *Zeitraum) Reset() {
	*x = Zeitraum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zeitraum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zeitraum) ProtoMessage() {}

func (x *Zeitraum) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zeitraum.ProtoReflect.Descriptor instead.
func (*Zeitraum) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{47}
}

func (x *Zeitraum) GetEinheit() Zeiteinheit {
	if x != nil {
		return x.Einheit
	}
	return Zeiteinheit_Zeiteinheit_SEKUNDE
}

func (x *Zeitraum) GetDauer() string {
	if x != nil {
		return x.Dauer
	}
	return ""
}

func (x *Zeitraum) GetStartdatum() *DateTimeOffset {
	if x != nil {
		return x.Startdatum
	}
	return nil
}

func (x *Zeitraum) GetEnddatum() *DateTimeOffset {
	if x != nil {
		return x.Enddatum
	}
	return nil
}

type Zustaendigkeit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobtitel     string `protobuf:"bytes,3,opt,name=Jobtitel,proto3" json:"Jobtitel,omitempty"`
	Abteilung    string `protobuf:"bytes,4,opt,name=Abteilung,proto3" json:"Abteilung,omitempty"`
	Themengebiet string `protobuf:"bytes,5,opt,name=Themengebiet,proto3" json:"Themengebiet,omitempty"`
}

func (x *Zustaendigkeit) Reset() {
	*x = Zustaendigkeit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bo4e_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zustaendigkeit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zustaendigkeit) ProtoMessage() {}

func (x *Zustaendigkeit) ProtoReflect() protoreflect.Message {
	mi := &file_bo4e_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zustaendigkeit.ProtoReflect.Descriptor instead.
func (*Zustaendigkeit) Descriptor() ([]byte, []int) {
	return file_bo4e_proto_rawDescGZIP(), []int{48}
}

func (x *Zustaendigkeit) GetJobtitel() string {
	if x != nil {
		return x.Jobtitel
	}
	return ""
}

func (x *Zustaendigkeit) GetAbteilung() string {
	if x != nil {
		return x.Abteilung
	}
	return ""
}

func (x *Zustaendigkeit) GetThemengebiet() string {
	if x != nil {
		return x.Themengebiet
	}
	return ""
}

var File_bo4e_proto protoreflect.FileDescriptor

var file_bo4e_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x6f,
	0x34, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x6e, 0x65,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9e, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x6f, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x74, 0x7a, 0x61, 0x68, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x74, 0x7a, 0x61, 0x68, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x4f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x61, 0x73, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74, 0x72, 0x61, 0x73, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x48, 0x61, 0x75, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x48, 0x61, 0x75, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x74, 0x66, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x74, 0x66, 0x61, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x7a, 0x75, 0x73, 0x61, 0x74, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7a, 0x75, 0x73, 0x61, 0x74, 0x7a, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x45, 0x72, 0x67, 0x61, 0x65, 0x6e, 0x7a, 0x75, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x45, 0x72, 0x67, 0x61, 0x65, 0x6e, 0x7a, 0x75, 0x6e, 0x67,
	0x12, 0x30, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f,
	0x4d, 0x22, 0xe3, 0x04, 0x0a, 0x07, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x6e,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6e, 0x66, 0x72, 0x61, 0x67, 0x65,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x41, 0x6e, 0x66, 0x72, 0x61, 0x67, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a, 0x12,
	0x3a, 0x0a, 0x0d, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x41, 0x6e,
	0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x53,
	0x70, 0x61, 0x72, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x66, 0x72, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x42, 0x69, 0x6e,
	0x64, 0x65, 0x66, 0x72, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x6e, 0x67, 0x65, 0x62,
	0x6f, 0x74, 0x67, 0x65, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x67,
	0x65, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x6e,
	0x65, 0x68, 0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x52, 0x0d, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x6e, 0x65, 0x68,
	0x6d, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x1b, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63,
	0x68, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x6e, 0x65, 0x68, 0x6d,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x41, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x63, 0x68, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x1b, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x41, 0x6e,
	0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x6e, 0x65, 0x68, 0x6d, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x1a,
	0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x67,
	0x65, 0x62, 0x6f, 0x74, 0x73, 0x67, 0x65, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x63, 0x68,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x1a, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65,
	0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x67, 0x65,
	0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x6e,
	0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x52, 0x09,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07,
	0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x41, 0x6e, 0x67, 0x65,
	0x62, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68,
	0x75, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x12, 0x33,
	0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x65, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x70, 0x72, 0x65, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x73, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x69, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x65, 0x74, 0x72, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52,
	0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22,
	0xe9, 0x02, 0x0a, 0x0c, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x74, 0x65, 0x69, 0x6c,
	0x12, 0x2e, 0x0a, 0x12, 0x41, 0x6e, 0x66, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x6e,
	0x66, 0x72, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a,
	0x12, 0x51, 0x0a, 0x19, 0x4c, 0x69, 0x65, 0x66, 0x65, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65,
	0x6e, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x74,
	0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x4c, 0x69, 0x65, 0x66, 0x65, 0x72,
	0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x74,
	0x65, 0x69, 0x6c, 0x12, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6d, 0x65, 0x6e,
	0x67, 0x65, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x17, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x61, 0x6e,
	0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x12, 0x48, 0x0a, 0x18, 0x47, 0x65,
	0x73, 0x61, 0x6d, 0x74, 0x6b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x6f,
	0x74, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x18, 0x47, 0x65, 0x73, 0x61,
	0x6d, 0x74, 0x6b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73,
	0x74, 0x65, 0x69, 0x6c, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x3a, 0x0d, 0xea, 0x40,
	0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xfe, 0x02, 0x0a, 0x10,
	0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0e, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x45, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0c,
	0x45, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x0a,
	0x42, 0x69, 0x6e, 0x64, 0x65, 0x66, 0x72, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x66, 0x72, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6d, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6d, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6b, 0x6f, 0x73, 0x74, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0c, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6b, 0x6f, 0x73,
	0x74, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x54, 0x65, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f,
	0x74, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x52, 0x05, 0x54, 0x65, 0x69, 0x6c, 0x65, 0x3a, 0x0d, 0xea,
	0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xef, 0x03, 0x0a,
	0x0f, 0x41, 0x6e, 0x73, 0x70, 0x72, 0x65, 0x63, 0x68, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x06, 0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x52, 0x06,
	0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x65, 0x6c, 0x6c, 0x65, 0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x65, 0x6c, 0x6c, 0x65,
	0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x54, 0x69, 0x74,
	0x65, 0x6c, 0x52, 0x05, 0x54, 0x69, 0x74, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x6f, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x61, 0x63, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x61, 0x63, 0x68, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x11, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74,
	0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x41, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x07, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x52, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52, 0x75, 0x66,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x0a, 0x52, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x5a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67,
	0x6b, 0x65, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x5a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74,
	0x52, 0x0e, 0x5a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74,
	0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f, 0x22, 0xa2,
	0x02, 0x0a, 0x07, 0x41, 0x75, 0x66, 0x67, 0x61, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x75,
	0x66, 0x67, 0x61, 0x62, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x75, 0x66, 0x67, 0x61, 0x62, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65,
	0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75, 0x73, 0x67, 0x65, 0x66, 0x75, 0x65, 0x68, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x75, 0x73, 0x67, 0x65, 0x66, 0x75, 0x65, 0x68,
	0x72, 0x74, 0x12, 0x4a, 0x0a, 0x15, 0x41, 0x75, 0x73, 0x66, 0x75, 0x65, 0x68, 0x72, 0x75, 0x6e,
	0x67, 0x73, 0x7a, 0x65, 0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x15, 0x41, 0x75, 0x73, 0x66, 0x75, 0x65, 0x68,
	0x72, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x65, 0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x75, 0x73, 0x66, 0x75, 0x65, 0x68, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x75, 0x73, 0x66, 0x75, 0x65, 0x68, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x43, 0x4f, 0x4d, 0x22, 0xab, 0x04, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x61, 0x63, 0x68, 0x72, 0x69,
	0x63, 0x68, 0x74, 0x69, 0x67, 0x75, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x61,
	0x63, 0x68, 0x72, 0x69, 0x63, 0x68, 0x74, 0x69, 0x67, 0x75, 0x6e, 0x67, 0x73, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6e, 0x61, 0x63, 0x68, 0x72, 0x69, 0x63,
	0x68, 0x74, 0x69, 0x67, 0x75, 0x6e, 0x67, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x65, 0x74,
	0x52, 0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x61, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x12,
	0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x12, 0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x75, 0x6e, 0x67, 0x73,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x75, 0x72, 0x7a, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x75, 0x72, 0x7a, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x45, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x75, 0x6e, 0x67,
	0x73, 0x5a, 0x65, 0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x14, 0x45, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x75,
	0x6e, 0x67, 0x73, 0x5a, 0x65, 0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x4b, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4b, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x65,
	0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x07, 0x4e, 0x6f,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x7a, 0x52, 0x07, 0x4e, 0x6f, 0x74, 0x69, 0x7a, 0x65,
	0x6e, 0x12, 0x30, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x41, 0x75, 0x66, 0x67, 0x61, 0x62, 0x65, 0x6e, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x75, 0x66,
	0x67, 0x61, 0x62, 0x65, 0x52, 0x08, 0x41, 0x75, 0x66, 0x67, 0x61, 0x62, 0x65, 0x6e, 0x12, 0x33,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42,
	0x4f, 0x22, 0x5c, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x57,
	0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57, 0x65, 0x72, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e,
	0x67, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67,
	0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22,
	0x1d, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x3a, 0x0b, 0xea, 0x40, 0x08, 0x22, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x8b,
	0x01, 0x0a, 0x0e, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e,
	0x67, 0x12, 0x48, 0x0a, 0x12, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74,
	0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74,
	0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x52, 0x12, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c,
	0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x3a, 0x0d, 0xea,
	0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xb3, 0x01, 0x0a,
	0x0c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x0c, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x52, 0x0c, 0x4c, 0x6f, 0x6b, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x12, 0x3b, 0x0a, 0x10, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x69, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75,
	0x63, 0x68, 0x52, 0x10, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x76, 0x65, 0x72, 0x62, 0x72,
	0x61, 0x75, 0x63, 0x68, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x42, 0x4f, 0x22, 0x5c, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d,
	0x22, 0x63, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x6b, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x72, 0x65, 0x69, 0x74, 0x65, 0x6e, 0x67, 0x72, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x72, 0x65, 0x69, 0x74, 0x65, 0x6e,
	0x67, 0x72, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x67,
	0x72, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x65, 0x6e, 0x67,
	0x65, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x66, 0x74, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x0a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x52, 0x0a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70,
	0x12, 0x3c, 0x0a, 0x0e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x52, 0x0e,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x12, 0x48,
	0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0xed, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x66, 0x74, 0x65, 0x6e, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xe3, 0x04, 0x0a, 0x11, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61,
	0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x41,
	0x6e, 0x72, 0x65, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x41, 0x6e, 0x72, 0x65, 0x64, 0x65, 0x52, 0x06, 0x41, 0x6e, 0x72, 0x65, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x61, 0x6d, 0x65, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61,
	0x6d, 0x65, 0x33, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x65, 0x77, 0x65, 0x72, 0x62, 0x65, 0x6b, 0x65,
	0x6e, 0x6e, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x47, 0x65, 0x77, 0x65, 0x72, 0x62, 0x65, 0x6b, 0x65, 0x6e, 0x6e, 0x7a, 0x65,
	0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x72, 0x6e, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x72, 0x6e, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6d, 0x74, 0x73, 0x67, 0x65, 0x72, 0x69, 0x63,
	0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x6d, 0x74, 0x73, 0x67, 0x65,
	0x72, 0x69, 0x63, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x4b, 0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74,
	0x77, 0x65, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x4b, 0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x61, 0x72, 0x74, 0x42, 0x02, 0x10, 0x00, 0x52,
	0x0a, 0x4b, 0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x77, 0x65, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x55,
	0x6d, 0x73, 0x61, 0x74, 0x7a, 0x73, 0x74, 0x65, 0x75, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x6d, 0x73, 0x61, 0x74, 0x7a, 0x73, 0x74, 0x65, 0x75, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6c, 0x61, 0x65, 0x75, 0x62, 0x69, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6c, 0x61, 0x65, 0x75,
	0x62, 0x69, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x4d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x4d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65,
	0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73,
	0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x42, 0x02, 0x10, 0x00, 0x52, 0x16, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65,
	0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x61,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x3a, 0x0c, 0xea,
	0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f, 0x22, 0x90, 0x02, 0x0a, 0x08,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x72, 0x61,
	0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x52, 0x0a,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65,
	0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x14,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x61,
	0x66, 0x74, 0x65, 0x6e, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x73,
	0x63, 0x68, 0x61, 0x66, 0x74, 0x65, 0x6e, 0x52, 0x14, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x66, 0x74, 0x65, 0x6e, 0x12, 0x25, 0x0a,
	0x0d, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0xee,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x7a, 0x3a,
	0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x67,
	0x0a, 0x0f, 0x4b, 0x61, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x47, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x6e, 0x67, 0x5f, 0x66,
	0x6c, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x75, 0x6e, 0x67, 0x46, 0x6c, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x75, 0x72,
	0x73, 0x74, 0x75, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c,
	0x75, 0x72, 0x73, 0x74, 0x75, 0x65, 0x63, 0x6b, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42,
	0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x7d, 0x0a, 0x11, 0x4b, 0x6f, 0x6e, 0x7a, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x62, 0x67, 0x61, 0x62, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x53, 0x61, 0x74, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x41, 0x62, 0x67, 0x61, 0x62, 0x65, 0x41, 0x72, 0x74, 0x52, 0x04, 0x53, 0x61, 0x74,
	0x7a, 0x12, 0x16, 0x0a, 0x06, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4b, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4b, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xab, 0x02, 0x0a, 0x06, 0x4b, 0x6f, 0x73, 0x74, 0x65,
	0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x6b, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b,
	0x6f, 0x73, 0x74, 0x65, 0x6e, 0x6b, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x52, 0x0c, 0x4b, 0x6f, 0x73,
	0x74, 0x65, 0x6e, 0x6b, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x47, 0x75, 0x65,
	0x6c, 0x74, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x0b,
	0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x53,
	0x75, 0x6d, 0x6d, 0x65, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0b,
	0x53, 0x75, 0x6d, 0x6d, 0x65, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x4b,
	0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62, 0x6c, 0x6f, 0x65, 0x63, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62, 0x6c, 0x6f,
	0x65, 0x63, 0x6b, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x42, 0x4f, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x16, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x10,
	0x53, 0x75, 0x6d, 0x6d, 0x65, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x52, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x65, 0x4b, 0x6f, 0x73, 0x74, 0x65,
	0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x10, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42,
	0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xac, 0x03, 0x0a, 0x0e, 0x4b, 0x6f, 0x73, 0x74,
	0x65, 0x6e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x03, 0x56, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x03, 0x56, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x03, 0x42, 0x69,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x03, 0x42,
	0x69, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x62, 0x65, 0x7a,
	0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x6b,
	0x65, 0x6c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x5a,
	0x65, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x5a, 0x65, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x45, 0x69, 0x6e, 0x7a, 0x65, 0x6c,
	0x70, 0x72, 0x65, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x73, 0x52, 0x0b, 0x45, 0x69, 0x6e, 0x7a, 0x65, 0x6c,
	0x70, 0x72, 0x65, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x4b,
	0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x52, 0x14, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xe7, 0x0a, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x74,
	0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b,
	0x74, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x74, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x72,
	0x74, 0x65, 0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x69, 0x65, 0x72, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x69, 0x65, 0x72, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x52, 0x0f, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x69, 0x65, 0x72, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x14, 0x42,
	0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72,
	0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x56,
	0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61,
	0x75, 0x63, 0x68, 0x73, 0x61, 0x72, 0x74, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75,
	0x63, 0x68, 0x73, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x62,
	0x72, 0x65, 0x63, 0x68, 0x62, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x55,
	0x6e, 0x74, 0x65, 0x72, 0x62, 0x72, 0x65, 0x63, 0x68, 0x62, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x09,
	0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65, 0x6e, 0x65,
	0x52, 0x09, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4e,
	0x65, 0x74, 0x7a, 0x62, 0x65, 0x74, 0x72, 0x65, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x4e, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4e, 0x65, 0x74, 0x7a, 0x62, 0x65,
	0x74, 0x72, 0x65, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x12, 0x2f, 0x0a,
	0x0a, 0x47, 0x65, 0x62, 0x69, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x62, 0x69, 0x65, 0x74, 0x74,
	0x79, 0x70, 0x52, 0x0a, 0x47, 0x65, 0x62, 0x69, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x7a, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x4e, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x7a, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74,
	0x4e, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75,
	0x6e, 0x67, 0x73, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x65,
	0x62, 0x69, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x72, 0x75, 0x6e, 0x64, 0x76, 0x65, 0x72,
	0x73, 0x6f, 0x72, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x47, 0x72, 0x75, 0x6e, 0x64, 0x76, 0x65, 0x72, 0x73, 0x6f, 0x72, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61,
	0x65, 0x74, 0x52, 0x0c, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x6b, 0x75, 0x6e, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61,
	0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x45, 0x6e, 0x64,
	0x6b, 0x75, 0x6e, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x10,
	0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x6b,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x6e, 0x52, 0x0a, 0x47, 0x65, 0x6f, 0x61,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x13, 0x4b, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x13, 0x4b, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5a, 0x0a, 0x19, 0x5a, 0x75, 0x67, 0x65, 0x68, 0x6f, 0x65, 0x72, 0x69, 0x67, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f,
	0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x7a, 0x75, 0x6f, 0x72, 0x64, 0x6e, 0x75, 0x6e, 0x67,
	0x52, 0x19, 0x5a, 0x75, 0x67, 0x65, 0x68, 0x6f, 0x65, 0x72, 0x69, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x4d,
	0x61, 0x72, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x6e, 0x18, 0xfd, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x74, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x4d, 0x61,
	0x72, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x52, 0x65, 0x67,
	0x65, 0x6c, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0xfe, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x67, 0x65, 0x6c, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x74, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x18, 0xff, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4d, 0x61, 0x72, 0x6b, 0x74, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x5a,
	0x65, 0x69, 0x74, 0x72, 0x65, 0x69, 0x68, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x18, 0x80, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72,
	0x65, 0x69, 0x68, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x52, 0x0d, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x65,
	0x69, 0x68, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x12, 0x30, 0x0a, 0x0a, 0x5a, 0x61, 0x65, 0x68, 0x6c,
	0x77, 0x65, 0x72, 0x6b, 0x65, 0x18, 0x81, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72, 0x6b, 0x52, 0x0a, 0x5a,
	0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72, 0x6b, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x56, 0x65, 0x72,
	0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x82, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x72,
	0x61, 0x75, 0x63, 0x68, 0x52, 0x0f, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73,
	0x6d, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x83, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x6e, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f,
	0x22, 0x96, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x74, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x52, 0x0a,
	0x6d, 0x61, 0x72, 0x6b, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22,
	0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x59, 0x0a, 0x05, 0x4d, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x57, 0x65, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x07, 0x45, 0x69,
	0x6e, 0x68, 0x65, 0x69, 0x74, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xad, 0x08, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x52, 0x06, 0x53,
	0x70, 0x61, 0x72, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65,
	0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65, 0x6e, 0x65,
	0x52, 0x10, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74,
	0x4e, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x67, 0x65,
	0x62, 0x69, 0x65, 0x74, 0x4e, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x47, 0x72, 0x75, 0x6e, 0x64, 0x7a,
	0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x72, 0x4d, 0x53, 0x42, 0x43, 0x6f,
	0x64, 0x65, 0x4e, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x47, 0x72, 0x75, 0x6e,
	0x64, 0x7a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x72, 0x4d, 0x53, 0x42,
	0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x47, 0x72, 0x75, 0x6e, 0x64, 0x7a,
	0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x72, 0x4d, 0x53, 0x42, 0x49, 0x4d,
	0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x47, 0x72,
	0x75, 0x6e, 0x64, 0x7a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x72, 0x4d,
	0x53, 0x42, 0x49, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x47, 0x72,
	0x75, 0x6e, 0x64, 0x7a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65, 0x72, 0x4d,
	0x44, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x47, 0x72, 0x75, 0x6e, 0x64, 0x7a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x65,
	0x72, 0x4d, 0x44, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x47,
	0x65, 0x6f, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x6b, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x6e, 0x52, 0x0a, 0x47, 0x65, 0x6f, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x13, 0x4b, 0x61, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x61, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x61, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x13, 0x4b, 0x61, 0x74, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x47, 0x65,
	0x72, 0x61, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x07, 0x47, 0x65, 0x72,
	0x61, 0x65, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x64, 0x69, 0x65, 0x6e,
	0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65,
	0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x52, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x64, 0x69, 0x65, 0x6e,
	0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x14, 0x4d, 0x65,
	0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x7a, 0x61, 0x65, 0x68, 0x6c,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x52, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x7a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x14, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69,
	0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a,
	0x1f, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x6d, 0x65, 0x73, 0x73, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x62, 0x65, 0x74, 0x72, 0x69, 0x65, 0x62, 0x6e, 0x6e, 0x61,
	0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e,
	0x75, 0x6e, 0x67, 0x6d, 0x65, 0x73, 0x73, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x6e, 0x62, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x62, 0x6e, 0x6e, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x6e, 0x18, 0xfb, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x74, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x61, 0x65, 0x74, 0x18, 0xfc, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x65,
	0x74, 0x52, 0x0c, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x6c, 0x75, 0x73, 0x74, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72,
	0x18, 0xfd, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x6c, 0x75, 0x73, 0x74,
	0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x42, 0x4f, 0x22, 0xfd, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x7a, 0x75, 0x6f, 0x72, 0x64, 0x6e, 0x75, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x6c, 0x6f,
	0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x73, 0x63,
	0x68, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x6b, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x6c, 0x74,
	0x69, 0x67, 0x53, 0x65, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x0b, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x53, 0x65, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x42, 0x69, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x47, 0x75, 0x65, 0x6c, 0x74,
	0x69, 0x67, 0x42, 0x69, 0x73, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x78, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x69, 0x7a, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x5a, 0x65, 0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x09, 0x5a, 0x65,
	0x69, 0x74, 0x70, 0x75, 0x6e, 0x6b, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x68, 0x61, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6e, 0x68, 0x61, 0x6c, 0x74, 0x3a,
	0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xa4,
	0x02, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75, 0x66, 0x41,
	0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69,
	0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65,
	0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x73,
	0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e, 0x67, 0x12, 0x3f, 0x0a,
	0x0f, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x74, 0x79, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x41, 0x75,
	0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x74, 0x79, 0x70, 0x52, 0x0f, 0x41,
	0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x74, 0x79, 0x70, 0x12, 0x2a,
	0x0a, 0x10, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x77, 0x65,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73,
	0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x77, 0x65, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x41, 0x75,
	0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x77, 0x61, 0x65, 0x68, 0x72, 0x75,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74,
	0x52, 0x14, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x77, 0x61,
	0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xbc, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x65, 0x69, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x57, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57,
	0x65, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x57, 0x61, 0x65, 0x68,
	0x72, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x07, 0x45, 0x69,
	0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x42, 0x65, 0x7a, 0x75, 0x67, 0x73, 0x77,
	0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x0a,
	0x42, 0x65, 0x7a, 0x75, 0x67, 0x73, 0x77, 0x65, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x69, 0x73, 0x62, 0x6c,
	0x61, 0x74, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0b, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67,
	0x6b, 0x65, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x0b, 0x47, 0x75, 0x65, 0x6c,
	0x74, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x69, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x42, 0x4f, 0x22, 0xad, 0x05, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x69, 0x73, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x42, 0x65, 0x72, 0x65, 0x63, 0x68,
	0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x61, 0x6c, 0x6b, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x42,
	0x65, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x65, 0x12, 0x36, 0x0a, 0x0c, 0x4c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4c,
	0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x52, 0x0c, 0x4c, 0x65, 0x69,
	0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x69,
	0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67,
	0x73, 0x62, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x50,
	0x72, 0x65, 0x69, 0x73, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e,
	0x67, 0x73, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x69, 0x73,
	0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x42, 0x65, 0x7a, 0x75, 0x67,
	0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68,
	0x65, 0x69, 0x74, 0x52, 0x0d, 0x42, 0x65, 0x7a, 0x75, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x5a, 0x65, 0x69, 0x74, 0x62, 0x61, 0x73, 0x69, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69,
	0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x09, 0x5a, 0x65, 0x69, 0x74, 0x62, 0x61,
	0x73, 0x69, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x69, 0x66, 0x7a, 0x65, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x7a, 0x65, 0x69, 0x74, 0x52, 0x09, 0x54, 0x61, 0x72, 0x69, 0x66, 0x7a, 0x65,
	0x69, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x42, 0x64, 0x65, 0x77, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65,
	0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x11, 0x42, 0x64, 0x65, 0x77, 0x41, 0x72, 0x74, 0x69,
	0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e,
	0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x52, 0x0e, 0x5a, 0x6f, 0x6e, 0x75,
	0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x5a, 0x75,
	0x5f, 0x61, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x65, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x52, 0x0c, 0x5a,
	0x75, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x65, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x69, 0x73, 0x73, 0x74, 0x61, 0x66, 0x66, 0x65, 0x6c, 0x6e, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x69, 0x73, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x65, 0x6c, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x69, 0x73, 0x73, 0x74, 0x61,
	0x66, 0x66, 0x65, 0x6c, 0x6e, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x69, 0x73, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74,
	0x73, 0x70, 0x72, 0x65, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x69,
	0x6e, 0x68, 0x65, 0x69, 0x74, 0x73, 0x70, 0x72, 0x65, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x65, 0x6c, 0x67, 0x72, 0x65, 0x6e, 0x7a, 0x65, 0x56, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x61, 0x66, 0x66, 0x65, 0x6c, 0x67, 0x72,
	0x65, 0x6e, 0x7a, 0x65, 0x56, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x65, 0x6c, 0x67, 0x72, 0x65, 0x6e, 0x7a, 0x65, 0x42, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x53, 0x74, 0x61, 0x66, 0x66, 0x65, 0x6c, 0x67, 0x72, 0x65, 0x6e, 0x7a, 0x65,
	0x42, 0x69, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x10, 0x53, 0x69, 0x67, 0x6d, 0x6f, 0x69, 0x64, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xb4, 0x08, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x6e,
	0x75, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73,
	0x74, 0x69, 0x74, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x69, 0x74, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x52,
	0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x68,
	0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x52, 0x65, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x6f, 0x72, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74,
	0x6f, 0x72, 0x6e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67,
	0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52,
	0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x52, 0x65,
	0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x11,
	0x46, 0x61, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x73, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x11, 0x46,
	0x61, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x73, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x12, 0x38, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x79,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x52, 0x0d, 0x52, 0x65, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74, 0x79, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6e,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67,
	0x73, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x10,
	0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x12, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73,
	0x65, 0x72, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x6d, 0x70, 0x66, 0x61, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65,
	0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52,
	0x13, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x6d, 0x70, 0x66, 0x61, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6e, 0x65,
	0x74, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0b, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x6e,
	0x65, 0x74, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74, 0x73, 0x74,
	0x65, 0x75, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0c, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74,
	0x73, 0x74, 0x65, 0x75, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x73, 0x61, 0x6d, 0x74,
	0x62, 0x72, 0x75, 0x74, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0c, 0x47, 0x65, 0x73, 0x61,
	0x6d, 0x74, 0x62, 0x72, 0x75, 0x74, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x0d, 0x56, 0x6f, 0x72, 0x61,
	0x75, 0x73, 0x67, 0x65, 0x7a, 0x61, 0x68, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0d, 0x56,
	0x6f, 0x72, 0x61, 0x75, 0x73, 0x67, 0x65, 0x7a, 0x61, 0x68, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x0c,
	0x52, 0x61, 0x62, 0x61, 0x74, 0x74, 0x42, 0x72, 0x75, 0x74, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x52, 0x0c, 0x52, 0x61, 0x62, 0x61, 0x74, 0x74, 0x42, 0x72, 0x75, 0x74, 0x74, 0x6f, 0x12, 0x28,
	0x0a, 0x08, 0x5a, 0x75, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x08,
	0x5a, 0x75, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x53, 0x74, 0x65, 0x75,
	0x65, 0x72, 0x62, 0x65, 0x74, 0x72, 0x61, 0x65, 0x67, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x62, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x52, 0x0e, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x62, 0x65, 0x74, 0x72,
	0x61, 0x65, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e,
	0x67, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x65, 0x63, 0x68,
	0x6e, 0x75, 0x6e, 0x67, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x3a,
	0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f, 0x22, 0xcd, 0x06,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x0c, 0x4c, 0x69, 0x65, 0x66, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x56, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x4c, 0x69, 0x65, 0x66, 0x65,
	0x72, 0x75, 0x6e, 0x67, 0x56, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x4c, 0x69, 0x65, 0x66, 0x65,
	0x72, 0x75, 0x6e, 0x67, 0x42, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x52, 0x0c, 0x4c, 0x69, 0x65, 0x66, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x42, 0x69,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x5a, 0x65, 0x69, 0x74, 0x65,
	0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69,
	0x74, 0x52, 0x0b, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0x3d,
	0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x0d,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x5a, 0x65, 0x69, 0x74, 0x62, 0x65, 0x7a, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x5a, 0x65,
	0x69, 0x74, 0x62, 0x65, 0x7a, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x45, 0x69, 0x6e, 0x7a, 0x65, 0x6c, 0x70, 0x72, 0x65, 0x69, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x69,
	0x73, 0x52, 0x0b, 0x45, 0x69, 0x6e, 0x7a, 0x65, 0x6c, 0x70, 0x72, 0x65, 0x69, 0x73, 0x12, 0x34,
	0x0a, 0x0e, 0x54, 0x65, 0x69, 0x6c, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x74, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x52, 0x0e, 0x54, 0x65, 0x69, 0x6c, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x4e,
	0x65, 0x74, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x0f, 0x54, 0x65, 0x69, 0x6c, 0x72, 0x61, 0x62, 0x61,
	0x74, 0x74, 0x4e, 0x65, 0x74, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0f, 0x54, 0x65, 0x69,
	0x6c, 0x72, 0x61, 0x62, 0x61, 0x74, 0x74, 0x4e, 0x65, 0x74, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0f,
	0x54, 0x65, 0x69, 0x6c, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x74, 0x65,
	0x75, 0x65, 0x72, 0x62, 0x65, 0x74, 0x72, 0x61, 0x67, 0x52, 0x0f, 0x54, 0x65, 0x69, 0x6c, 0x73,
	0x75, 0x6d, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b, 0x6f, 0x6e, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b, 0x6f, 0x6e,
	0x74, 0x6f, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73,
	0x49, 0x64, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x67, 0x73, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0xfa, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x0d,
	0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xb0, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x7a, 0x65,
	0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x52, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x52, 0x0c, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f,
	0x22, 0xa7, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67,
	0x6b, 0x65, 0x69, 0x74, 0x73, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x6b, 0x65, 0x69,
	0x74, 0x73, 0x74, 0x79, 0x70, 0x52, 0x0f, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x6b, 0x65,
	0x69, 0x74, 0x73, 0x74, 0x79, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x74, 0x65, 0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x74, 0x79,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x74,
	0x79, 0x70, 0x52, 0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x75, 0x6d, 0x74, 0x79, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x65, 0x72, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57, 0x65, 0x72, 0x74, 0x3a, 0x0d, 0xea, 0x40, 0x0a,
	0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x6d, 0x0a, 0x09, 0x52, 0x75,
	0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x6e, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x52, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x74,
	0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x6e, 0x74, 0x79, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22,
	0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x59, 0x0a, 0x10, 0x53, 0x69, 0x67,
	0x6d, 0x6f, 0x69, 0x64, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x41, 0x12, 0x0c, 0x0a, 0x01, 0x42,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x42, 0x12, 0x0c, 0x0a, 0x01, 0x43, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x43, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x44, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xd3, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x62,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x6b,
	0x65, 0x6e, 0x6e, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x6b, 0x65,
	0x6e, 0x6e, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x52, 0x11, 0x53, 0x74, 0x65, 0x75, 0x65,
	0x72, 0x6b, 0x65, 0x6e, 0x6e, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x61, 0x73, 0x69, 0x73, 0x77, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x73, 0x77, 0x65, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74,
	0x65, 0x75, 0x65, 0x72, 0x77, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x77, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x57, 0x61,
	0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x3a, 0x0d, 0xea, 0x40, 0x0a,
	0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x6f, 0x0a, 0x0c, 0x55, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x63, 0x68, 0x72, 0x69, 0x66, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x52, 0x05, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x0d, 0xea, 0x40,
	0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xff, 0x02, 0x0a, 0x09,
	0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x5a, 0x0a,
	0x18, 0x57, 0x65, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x6c, 0x75, 0x6e, 0x67, 0x73,
	0x76, 0x65, 0x72, 0x66, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x57, 0x65, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x74, 0x6c, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x65, 0x72, 0x66, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x52,
	0x18, 0x57, 0x65, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x6c, 0x75, 0x6e, 0x67, 0x73,
	0x76, 0x65, 0x72, 0x66, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x69,
	0x73, 0x6b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x62, 0x69, 0x73, 0x6b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x57, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57, 0x65, 0x72,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e,
	0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74,
	0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73,
	0x6d, 0x65, 0x6e, 0x67, 0x65, 0x74, 0x79, 0x70, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d,
	0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xf9, 0x06,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65,
	0x69, 0x62, 0x75, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x61, 0x72, 0x74, 0x52, 0x0b, 0x56,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x56, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x74, 0x65, 0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x56,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0e, 0x56, 0x65, 0x72, 0x74, 0x72,
	0x61, 0x67, 0x73, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x10, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x31, 0x12, 0x43, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x67, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x32, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61,
	0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x10, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x32, 0x12, 0x3e, 0x0a,
	0x10, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x76, 0x70,
	0x31, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x55,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x63, 0x68, 0x72, 0x69, 0x66, 0x74, 0x52, 0x10, 0x55, 0x6e, 0x74,
	0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x76, 0x70, 0x31, 0x12, 0x3e, 0x0a,
	0x10, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x76, 0x70,
	0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x55,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x63, 0x68, 0x72, 0x69, 0x66, 0x74, 0x52, 0x10, 0x55, 0x6e, 0x74,
	0x65, 0x72, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x65, 0x72, 0x76, 0x70, 0x32, 0x12, 0x4b, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x52, 0x13, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0d, 0x56, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x74, 0x65, 0x69, 0x6c, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74,
	0x65, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x47, 0x65, 0x6d, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x61, 0x62, 0x61, 0x74, 0x74, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x47,
	0x65, 0x6d, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x61, 0x74, 0x74, 0x12, 0x4c, 0x0a,
	0x14, 0x4b, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x7a, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x34, 0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x14, 0x4b, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x65, 0x6e, 0x7a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x3a, 0x0c, 0xea, 0x40, 0x09,
	0x22, 0x07, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x42, 0x4f, 0x22, 0xf8, 0x08, 0x0a, 0x13, 0x56, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6b, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65, 0x69, 0x62, 0x75, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x65, 0x73, 0x63, 0x68, 0x72, 0x65,
	0x69, 0x62, 0x75, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x41,
	0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x65, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x41, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x65, 0x67,
	0x65, 0x12, 0x3a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x6c, 0x61, 0x75,
	0x66, 0x7a, 0x65, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x10, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x6c, 0x61, 0x75, 0x66, 0x7a, 0x65, 0x69, 0x74, 0x12, 0x3a, 0x0a,
	0x10, 0x4b, 0x75, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x75, 0x6e, 0x67, 0x73, 0x66, 0x72, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a,
	0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x10, 0x4b, 0x75, 0x65, 0x6e, 0x64, 0x69, 0x67,
	0x75, 0x6e, 0x67, 0x73, 0x66, 0x72, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x15, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x75,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x15, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x67, 0x73, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x12,
	0x38, 0x0a, 0x0f, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c, 0x61, 0x67, 0x73, 0x7a, 0x79, 0x6b, 0x6c,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x0f, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c,
	0x61, 0x67, 0x73, 0x7a, 0x79, 0x6b, 0x6c, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x6a, 0x61, 0x68,
	0x72, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x14,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73,
	0x6a, 0x61, 0x68, 0x72, 0x12, 0x47, 0x0a, 0x16, 0x47, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65,
	0x54, 0x75, 0x72, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x6e, 0x67, 0x18, 0xf2,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69,
	0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x16, 0x47, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x54,
	0x75, 0x72, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x6e, 0x67, 0x12, 0x39, 0x0a,
	0x17, 0x54, 0x75, 0x72, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x6c, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x54, 0x75, 0x72, 0x6e, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x75, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x7a,
	0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75,
	0x6e, 0x67, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x5a, 0x65, 0x69, 0x74, 0x72, 0x61, 0x75, 0x6d, 0x52, 0x16, 0x4e, 0x65, 0x74, 0x7a, 0x6e,
	0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e,
	0x67, 0x12, 0x49, 0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67,
	0x73, 0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x6c, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x4e, 0x65, 0x74,
	0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e,
	0x75, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x6c, 0x12, 0x27, 0x0a, 0x0e,
	0x48, 0x61, 0x75, 0x73, 0x68, 0x61, 0x6c, 0x74, 0x73, 0x6b, 0x75, 0x6e, 0x64, 0x65, 0x18, 0xf6,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x61, 0x75, 0x73, 0x68, 0x61, 0x6c, 0x74, 0x73,
	0x6b, 0x75, 0x6e, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74,
	0x7a, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x18, 0xf7, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x7a, 0x6e,
	0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x52, 0x13,
	0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75,
	0x6e, 0x67, 0x73, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a,
	0x75, 0x6e, 0x67, 0x73, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x4e, 0x65, 0x74, 0x7a,
	0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x12, 0x70,
	0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62,
	0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e,
	0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62, 0x72, 0x65,
	0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65, 0x52,
	0x1f, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62, 0x72,
	0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x65,
	0x12, 0x73, 0x0a, 0x20, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73,
	0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x75, 0x6e, 0x64,
	0x6c, 0x61, 0x67, 0x65, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61,
	0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x75, 0x6e, 0x64, 0x6c,
	0x61, 0x67, 0x65, 0x52, 0x20, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67,
	0x73, 0x61, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x75, 0x6e,
	0x64, 0x6c, 0x61, 0x67, 0x65, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xb9, 0x04, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x74, 0x65, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x74, 0x65, 0x69, 0x6c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x12, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67,
	0x73, 0x74, 0x65, 0x69, 0x6c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x12, 0x40, 0x0a, 0x10, 0x56,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x10, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x65, 0x69, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x18, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x6c, 0x69, 0x63, 0x68, 0x46, 0x69, 0x78, 0x69, 0x65, 0x72, 0x74, 0x65,
	0x4d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f,
	0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61,
	0x67, 0x6c, 0x69, 0x63, 0x68, 0x46, 0x69, 0x78, 0x69, 0x65, 0x72, 0x74, 0x65, 0x4d, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x41, 0x62,
	0x6e, 0x61, 0x68, 0x6d, 0x65, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x41, 0x62, 0x6e, 0x61, 0x68, 0x6d, 0x65, 0x6d, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x41,
	0x62, 0x6e, 0x61, 0x68, 0x6d, 0x65, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x14,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x61, 0x6c, 0x65, 0x41, 0x62, 0x6e, 0x61, 0x68, 0x6d, 0x65, 0x6d,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x18, 0x4a, 0x61, 0x68, 0x72, 0x65, 0x73, 0x76, 0x65,
	0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x65,
	0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x4a, 0x61, 0x68, 0x72, 0x65, 0x73, 0x76, 0x65, 0x72, 0x62,
	0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x0a, 0x4b, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x77, 0x65, 0x72, 0x74, 0x18, 0xf2, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x0a, 0x4b, 0x75, 0x6e, 0x64, 0x65, 0x6e, 0x77, 0x65, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x14,
	0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x75, 0x66, 0x74, 0x65, 0x69,
	0x6c, 0x75, 0x6e, 0x67, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56, 0x65, 0x72,
	0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x75, 0x66, 0x74, 0x65, 0x69, 0x6c, 0x75, 0x6e,
	0x67, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d,
	0x22, 0xc0, 0x05, 0x0a, 0x07, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x6e, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65,
	0x52, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x5a, 0x61, 0x65, 0x68,
	0x6c, 0x65, 0x72, 0x61, 0x75, 0x73, 0x70, 0x72, 0x61, 0x65, 0x67, 0x75, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x61, 0x65, 0x68,
	0x6c, 0x65, 0x72, 0x61, 0x75, 0x73, 0x70, 0x72, 0x61, 0x65, 0x67, 0x75, 0x6e, 0x67, 0x52, 0x12,
	0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x61, 0x75, 0x73, 0x70, 0x72, 0x61, 0x65, 0x67, 0x75,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x61,
	0x65, 0x68, 0x6c, 0x65, 0x72, 0x74, 0x79, 0x70, 0x52, 0x0a, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65,
	0x72, 0x74, 0x79, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x54, 0x61, 0x72, 0x69, 0x66, 0x61, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x54, 0x61,
	0x72, 0x69, 0x66, 0x61, 0x72, 0x74, 0x52, 0x08, 0x54, 0x61, 0x72, 0x69, 0x66, 0x61, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x6b, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x5a, 0x61, 0x65, 0x68,
	0x6c, 0x65, 0x72, 0x6b, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a,
	0x45, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x42, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x45, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x42,
	0x69, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x4c, 0x65, 0x74, 0x7a, 0x74, 0x65, 0x45, 0x69, 0x63, 0x68,
	0x75, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x0d, 0x4c, 0x65, 0x74, 0x7a, 0x74, 0x65, 0x45, 0x69, 0x63, 0x68, 0x75, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x0a, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77,
	0x65, 0x72, 0x6b, 0x52, 0x0a, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72, 0x6b, 0x65, 0x12,
	0x45, 0x0a, 0x11, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x68, 0x65, 0x72, 0x73, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x11, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x68, 0x65, 0x72, 0x73,
	0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x46, 0x65, 0x72, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x6c, 0x74, 0x75,
	0x6e, 0x67, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x46, 0x65, 0x72, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x52, 0x0d,
	0x46, 0x65, 0x72, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x11, 0x4d, 0x65, 0x73, 0x73, 0x77, 0x65, 0x72, 0x74, 0x65, 0x72, 0x66, 0x61, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x77, 0x65, 0x72, 0x74, 0x65, 0x72, 0x66, 0x61, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x52, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x77, 0x65, 0x72, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x73, 0x73, 0x75, 0x6e, 0x67, 0x3a, 0x0c, 0xea, 0x40, 0x09, 0x22, 0x07, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x42, 0x4f, 0x22, 0xf0, 0x06, 0x0a, 0x09, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x77, 0x65, 0x72,
	0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x6e, 0x75,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x7a, 0x65, 0x69, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x72, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x52, 0x08,
	0x52, 0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x62, 0x69, 0x73,
	0x4b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4f, 0x62, 0x69, 0x73, 0x4b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x57, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x66, 0x61, 0x6b, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x66, 0x61, 0x6b, 0x74,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4d, 0x65, 0x6e, 0x67, 0x65,
	0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x18, 0xf1, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x7a, 0x61, 0x68, 0x6c, 0x12, 0x46,
	0x0a, 0x11, 0x53, 0x63, 0x68, 0x77, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x65,
	0x68, 0x69, 0x67, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x77, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x65,
	0x68, 0x69, 0x67, 0x52, 0x11, 0x53, 0x63, 0x68, 0x77, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x73, 0x74,
	0x66, 0x61, 0x65, 0x68, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x77, 0x65, 0x6e,
	0x64, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x77, 0x65, 0x63, 0x6b, 0x65, 0x18, 0xf3, 0x07, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x77, 0x65, 0x6e,
	0x64, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x77, 0x65, 0x63, 0x6b, 0x42, 0x02, 0x10, 0x00, 0x52, 0x11,
	0x56, 0x65, 0x72, 0x77, 0x65, 0x6e, 0x64, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x77, 0x65, 0x63, 0x6b,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61,
	0x72, 0x74, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x72, 0x74, 0x52, 0x0d,
	0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x72, 0x74, 0x12, 0x46, 0x0a,
	0x11, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x72, 0x65, 0x63, 0x68, 0x62, 0x61, 0x72, 0x6b, 0x65,
	0x69, 0x74, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x34, 0x65,
	0x2e, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x72, 0x65, 0x63, 0x68, 0x62, 0x61, 0x72, 0x6b, 0x65,
	0x69, 0x74, 0x52, 0x11, 0x55, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x72, 0x65, 0x63, 0x68, 0x62, 0x61,
	0x72, 0x6b, 0x65, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x57, 0x61, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x57, 0x61, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x75,
	0x6e, 0x67, 0x52, 0x0d, 0x57, 0x61, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e,
	0x67, 0x12, 0x46, 0x0a, 0x11, 0x4b, 0x6f, 0x6e, 0x7a, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x61, 0x62, 0x67, 0x61, 0x62, 0x65, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x34, 0x65, 0x2e, 0x4b, 0x6f, 0x6e, 0x7a, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x61, 0x62, 0x67, 0x61, 0x62, 0x65, 0x52, 0x11, 0x4b, 0x6f, 0x6e, 0x7a, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x61, 0x62, 0x67, 0x61, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x53, 0x74, 0x65,
	0x75, 0x65, 0x72, 0x62, 0x65, 0x66, 0x72, 0x65, 0x69, 0x74, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x53, 0x74, 0x65, 0x75, 0x65, 0x72, 0x62, 0x65, 0x66, 0x72, 0x65, 0x69, 0x74,
	0x12, 0x27, 0x0a, 0x0e, 0x56, 0x6f, 0x72, 0x6b, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x6c,
	0x6c, 0x65, 0x18, 0xf9, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x56, 0x6f, 0x72, 0x6b, 0x6f,
	0x6d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x61, 0x63,
	0x68, 0x6b, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x18, 0xfa, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x4e, 0x61, 0x63, 0x68, 0x6b, 0x6f, 0x6d, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75,
	0x6e, 0x67, 0x73, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x18, 0xfb, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x41, 0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x72,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x3a, 0x0d, 0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x5a, 0x65, 0x69, 0x74, 0x72,
	0x61, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x5a, 0x65, 0x69, 0x74,
	0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x52, 0x07, 0x45, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x44, 0x61, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x44, 0x61, 0x75, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x34,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x30, 0x0a, 0x08,
	0x45, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x6f, 0x34, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x3a, 0x0d,
	0xea, 0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x22, 0x7d, 0x0a,
	0x0e, 0x5a, 0x75, 0x73, 0x74, 0x61, 0x65, 0x6e, 0x64, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x74, 0x69, 0x74, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4a, 0x6f, 0x62, 0x74, 0x69, 0x74, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x62, 0x74, 0x65, 0x69, 0x6c, 0x75, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x62, 0x74, 0x65, 0x69, 0x6c, 0x75, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x6e, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x62, 0x69, 0x65, 0x74, 0x3a, 0x0d, 0xea,
	0x40, 0x0a, 0x22, 0x08, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x43, 0x4f, 0x4d, 0x2a, 0x68, 0x0a, 0x09,
	0x41, 0x62, 0x67, 0x61, 0x62, 0x65, 0x41, 0x72, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x41, 0x53,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41,
	0x53, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x41, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x41, 0x53, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x4b, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x53, 0x10, 0x07, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x53, 0x53, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xc0, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x67, 0x65, 0x62,
	0x6f, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x4f, 0x4e,
	0x5a, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x56,
	0x45, 0x52, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x45, 0x52, 0x42, 0x49, 0x4e, 0x44, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x45, 0x41, 0x55, 0x46, 0x54, 0x52, 0x41, 0x47, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x47, 0x55, 0x45, 0x4c, 0x54, 0x49, 0x47, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x6e, 0x67, 0x65, 0x62, 0x6f, 0x74, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41,
	0x42, 0x47, 0x45, 0x4c, 0x45, 0x48, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x41,
	0x43, 0x48, 0x47, 0x45, 0x46, 0x41, 0x53, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x55, 0x53, 0x53, 0x54, 0x45, 0x48, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x52, 0x4c, 0x45, 0x44, 0x49, 0x47, 0x54, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09,
	0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xbc, 0x01, 0x0a, 0x06, 0x41, 0x6e,
	0x72, 0x65, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x52, 0x52, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x52, 0x41, 0x55, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x48, 0x45, 0x4c,
	0x45, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x45, 0x4c, 0x4c,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x49, 0x45, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x42, 0x45, 0x4e, 0x47, 0x45, 0x4d, 0x45, 0x49, 0x4e, 0x53, 0x43,
	0x48, 0x41, 0x46, 0x54, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x48, 0x4e, 0x47, 0x45,
	0x4d, 0x45, 0x49, 0x4e, 0x53, 0x43, 0x48, 0x41, 0x46, 0x54, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x52, 0x55, 0x4e, 0x44, 0x53, 0x54, 0x55, 0x45, 0x43, 0x4b, 0x47, 0x45, 0x4d, 0x45, 0x49,
	0x4e, 0x53, 0x43, 0x48, 0x41, 0x46, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6e, 0x72,
	0x65, 0x64, 0x65, 0x5f, 0x44, 0x52, 0x10, 0x09, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42,
	0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x69, 0x0a, 0x16, 0x41, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x65, 0x74, 0x69, 0x73, 0x63, 0x68, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x4b, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x4b, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45,
	0x4e, 0x55, 0x4d, 0x2a, 0x3b, 0x0a, 0x0f, 0x41, 0x75, 0x66, 0x41, 0x62, 0x73, 0x63, 0x68, 0x6c,
	0x61, 0x67, 0x73, 0x74, 0x79, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x10, 0x01,
	0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d,
	0x2a, 0xae, 0x0f, 0x0a, 0x11, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4c, 0x45, 0x49, 0x53,
	0x54, 0x55, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4c, 0x45, 0x49, 0x53,
	0x54, 0x55, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x50, 0x52, 0x45, 0x49, 0x53, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4c, 0x45, 0x4e, 0x45, 0x52,
	0x47, 0x49, 0x45, 0x5f, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27,
	0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4c, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x49, 0x45, 0x5f, 0x4c,
	0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4e,
	0x4f, 0x54, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x4c, 0x49, 0x45, 0x46, 0x45, 0x52, 0x55, 0x4e, 0x47,
	0x5f, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4e,
	0x4f, 0x54, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x4c, 0x49, 0x45, 0x46, 0x45, 0x52, 0x55, 0x4e, 0x47,
	0x5f, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x42,
	0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x4e, 0x45, 0x54, 0x5a, 0x4b, 0x41, 0x50, 0x41,
	0x5a, 0x49, 0x54, 0x41, 0x45, 0x54, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x44, 0x45, 0x57,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x2b, 0x0a, 0x27, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48,
	0x45, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x36, 0x0a, 0x32,
	0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x5f, 0x50, 0x52, 0x55, 0x45, 0x46, 0x47, 0x45, 0x42, 0x55, 0x45, 0x48, 0x52, 0x45, 0x4e,
	0x5f, 0x41, 0x55, 0x53, 0x53, 0x45, 0x52, 0x50, 0x4c, 0x41, 0x4e, 0x4d, 0x41, 0x45, 0x53, 0x53,
	0x49, 0x47, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69,
	0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x57, 0x49, 0x52, 0x4b, 0x41, 0x52,
	0x42, 0x45, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x37, 0x0a, 0x33, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x55, 0x4c, 0x41, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x55, 0x54, 0x5a, 0x54, 0x45, 0x5f, 0x42,
	0x45, 0x54, 0x52, 0x49, 0x45, 0x42, 0x53, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x4c, 0x10, 0x0c, 0x12,
	0x21, 0x0a, 0x1d, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x41, 0x42, 0x47, 0x41, 0x42, 0x45, 0x5f, 0x4b, 0x57, 0x4b, 0x47,
	0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65,
	0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x41, 0x42, 0x53, 0x43, 0x48, 0x4c, 0x41, 0x47,
	0x10, 0x0e, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65,
	0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4b, 0x4f, 0x4e, 0x5a, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x41, 0x42, 0x47, 0x41, 0x42, 0x45, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x42,
	0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72,
	0x5f, 0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54, 0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53,
	0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x44, 0x45, 0x57,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x4d, 0x45, 0x53, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21,
	0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x4d, 0x45, 0x48, 0x52, 0x41, 0x52, 0x42, 0x45, 0x49,
	0x54, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b,
	0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54,
	0x5f, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x21, 0x0a,
	0x1d, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x5f, 0x53, 0x50, 0x45, 0x52, 0x52, 0x4b, 0x4f, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x14,
	0x12, 0x24, 0x0a, 0x20, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x54, 0x53, 0x50, 0x45, 0x52, 0x52, 0x4b, 0x4f,
	0x53, 0x54, 0x45, 0x4e, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4d, 0x41, 0x48, 0x4e,
	0x4b, 0x4f, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x44, 0x45, 0x57,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4d, 0x45,
	0x48, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x10,
	0x17, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x49, 0x4e, 0x4b, 0x41, 0x53, 0x53, 0x4f, 0x4b, 0x4f,
	0x53, 0x54, 0x45, 0x4e, 0x10, 0x18, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x42, 0x4c, 0x49, 0x4e,
	0x44, 0x4d, 0x45, 0x48, 0x52, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x19, 0x12,
	0x2e, 0x0a, 0x2a, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x55, 0x4e, 0x47, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x1a, 0x12,
	0x40, 0x0a, 0x3c, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54, 0x5f, 0x45, 0x49, 0x4e,
	0x42, 0x41, 0x55, 0x5f, 0x42, 0x45, 0x54, 0x52, 0x49, 0x45, 0x42, 0x5f, 0x57, 0x41, 0x52, 0x54,
	0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x4b, 0x10,
	0x1b, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x41, 0x55, 0x53, 0x47, 0x4c, 0x45, 0x49, 0x43, 0x48,
	0x53, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x49, 0x45, 0x10, 0x1c, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x44,
	0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f,
	0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e, 0x47,
	0x10, 0x1d, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65,
	0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f,
	0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55, 0x4d, 0x57, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x1e,
	0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e,
	0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4b, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x4b, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e, 0x47, 0x10,
	0x1f, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c,
	0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x53, 0x43, 0x48,
	0x45, 0x5f, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54,
	0x55, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74,
	0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x47,
	0x52, 0x41, 0x46, 0x5f, 0x31, 0x39, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x5f, 0x4e, 0x45, 0x56,
	0x5f, 0x55, 0x4d, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x21, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x42,
	0x45, 0x46, 0x45, 0x53, 0x54, 0x49, 0x47, 0x55, 0x4e, 0x47, 0x53, 0x45, 0x49, 0x4e, 0x52, 0x49,
	0x43, 0x48, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x44, 0x45, 0x57,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f, 0x48, 0x41, 0x46, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x55,
	0x4d, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x23, 0x12, 0x33, 0x0a, 0x2f, 0x42, 0x44, 0x45, 0x57, 0x41,
	0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x46, 0x49, 0x58,
	0x45, 0x5f, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54,
	0x4b, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x45, 0x10, 0x24, 0x12, 0x35, 0x0a, 0x31,
	0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65,
	0x72, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x5f, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x53,
	0x45, 0x4e, 0x54, 0x47, 0x45, 0x4c, 0x54, 0x4b, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x45, 0x10, 0x25, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b,
	0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x55, 0x4d, 0x4c, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x42, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x54, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x45, 0x4e, 0x10, 0x26, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74,
	0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4d, 0x45, 0x48, 0x52, 0x4d,
	0x45, 0x4e, 0x47, 0x45, 0x10, 0x27, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72,
	0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4d, 0x49, 0x4e, 0x44,
	0x45, 0x52, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x28, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x45,
	0x4e, 0x45, 0x52, 0x47, 0x49, 0x45, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x10, 0x29, 0x12, 0x28,
	0x0a, 0x24, 0x42, 0x44, 0x45, 0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d,
	0x6d, 0x65, 0x72, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x47,
	0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x2a, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x44, 0x45, 0x57,
	0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x53, 0x54,
	0x45, 0x55, 0x45, 0x52, 0x42, 0x4f, 0x58, 0x10, 0x2b, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x44, 0x45,
	0x57, 0x41, 0x72, 0x74, 0x69, 0x6b, 0x65, 0x6c, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x4d,
	0x53, 0x42, 0x5f, 0x49, 0x4e, 0x4b, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x55, 0x4e, 0x47, 0x10,
	0x2c, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55,
	0x4d, 0x2a, 0x83, 0x01, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x72, 0x62, 0x65, 0x69, 0x74, 0x75, 0x6e,
	0x67, 0x73, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x46, 0x46, 0x45,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x42, 0x45,
	0x49, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x42, 0x47, 0x45, 0x53,
	0x43, 0x48, 0x4c, 0x4f, 0x53, 0x53, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x4f, 0x52, 0x4e, 0x49, 0x45, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x49,
	0x54, 0x54, 0x49, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x47, 0x4e, 0x4f,
	0x52, 0x49, 0x45, 0x52, 0x54, 0x10, 0x05, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xdb, 0x03, 0x0a, 0x11, 0x42, 0x65, 0x6d, 0x65,
	0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73,
	0x73, 0x65, 0x5f, 0x57, 0x49, 0x52, 0x4b, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x45, 0x4c,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73,
	0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47,
	0x5f, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44,
	0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x4b, 0x41, 0x50, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73,
	0x65, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x49, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67,
	0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x4c, 0x45,
	0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x5f, 0x4b, 0x41, 0x50, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73,
	0x65, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75,
	0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x57, 0x49, 0x52, 0x4b, 0x41,
	0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x54, 0x48, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x65,
	0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f,
	0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x5f, 0x54, 0x48, 0x10, 0x07, 0x12, 0x1d, 0x0a,
	0x19, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73,
	0x73, 0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e,
	0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73,
	0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x4e, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x10, 0x09,
	0x12, 0x25, 0x0a, 0x21, 0x42, 0x65, 0x6d, 0x65, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72,
	0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x42, 0x45, 0x4e, 0x55, 0x54, 0x5a, 0x55, 0x4e, 0x47, 0x53,
	0x44, 0x41, 0x55, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x65, 0x6d, 0x65, 0x73,
	0x73, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x6f, 0x65, 0x73, 0x73, 0x65, 0x5f, 0x41, 0x4e, 0x5a,
	0x41, 0x48, 0x4c, 0x10, 0x0b, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xf2, 0x01, 0x0a, 0x14, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a,
	0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x4c, 0x4d, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x69,
	0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x65, 0x5f, 0x54, 0x4c, 0x50, 0x5f, 0x47, 0x45, 0x4d, 0x45, 0x49, 0x4e, 0x53, 0x41, 0x4d,
	0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75,
	0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4c, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x52, 0x45, 0x4e, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x69, 0x6c,
	0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x65, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x42, 0x69, 0x6c, 0x61, 0x6e, 0x7a, 0x69, 0x65, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4d, 0x53, 0x10, 0x05, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a,
	0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x97, 0x10, 0x0a, 0x12, 0x44,
	0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79,
	0x70, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74,
	0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x42, 0x45, 0x52,
	0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x45, 0x47,
	0x4c, 0x49, 0x43, 0x48, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74,
	0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47,
	0x5f, 0x57, 0x4f, 0x45, 0x43, 0x48, 0x45, 0x4e, 0x54, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x34, 0x0a, 0x30, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e,
	0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49,
	0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x4c,
	0x49, 0x43, 0x48, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c,
	0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f,
	0x4a, 0x41, 0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x03, 0x12, 0x39, 0x0a, 0x35, 0x44,
	0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79,
	0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45,
	0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x53, 0x43, 0x48,
	0x45, 0x5f, 0x4c, 0x47, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74,
	0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x55, 0x45, 0x4e, 0x44, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x05, 0x12, 0x3b, 0x0a,
	0x37, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73,
	0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53,
	0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x56, 0x49, 0x45, 0x52, 0x54, 0x45, 0x4c, 0x4a,
	0x41, 0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x69,
	0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c,
	0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x4c, 0x42, 0x4a, 0x41, 0x45, 0x48, 0x52, 0x4c, 0x49,
	0x43, 0x48, 0x10, 0x07, 0x12, 0x40, 0x0a, 0x3c, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65,
	0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e,
	0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x4e, 0x41, 0x54, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a,
	0x4c, 0x49, 0x43, 0x48, 0x10, 0x08, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74,
	0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x4e, 0x42, 0x45, 0x52, 0x45, 0x49, 0x54, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x55, 0x4e, 0x47,
	0x5f, 0x45, 0x49, 0x4e, 0x4d, 0x41, 0x4c, 0x49, 0x47, 0x10, 0x09, 0x12, 0x3a, 0x0a, 0x36, 0x44,
	0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79,
	0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x32, 0x58, 0x5f, 0x54,
	0x41, 0x45, 0x47, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c,
	0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x69, 0x65, 0x6e, 0x73,
	0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55,
	0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x45, 0x47, 0x4c, 0x49, 0x43, 0x48,
	0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x0b,
	0x12, 0x30, 0x0a, 0x2c, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75,
	0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47,
	0x5f, 0x4c, 0x47, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x45, 0x4c, 0x4c, 0x5f, 0x4d, 0x53, 0x42,
	0x10, 0x0c, 0x12, 0x3c, 0x0a, 0x38, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73,
	0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x50,
	0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x0d,
	0x12, 0x3c, 0x0a, 0x38, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75,
	0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47,
	0x5f, 0x4a, 0x41, 0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x50, 0x5f, 0x46,
	0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67,
	0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x4d,
	0x44, 0x45, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x0f, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x69, 0x65, 0x6e,
	0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41,
	0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x4c, 0x49, 0x43,
	0x48, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x10, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x69, 0x65, 0x6e, 0x73,
	0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x56, 0x49, 0x45, 0x52, 0x54, 0x45, 0x4c, 0x4a, 0x41,
	0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x11, 0x12, 0x31, 0x0a,
	0x2d, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73,
	0x74, 0x79, 0x70, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x4c,
	0x42, 0x4a, 0x41, 0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x12,
	0x12, 0x2d, 0x0a, 0x29, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75,
	0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f,
	0x4a, 0x41, 0x45, 0x48, 0x52, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x13, 0x12,
	0x32, 0x0a, 0x2e, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e,
	0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f,
	0x53, 0x4c, 0x50, 0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e,
	0x47, 0x10, 0x14, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69,
	0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x55,
	0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x50, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49,
	0x43, 0x48, 0x5f, 0x4d, 0x53, 0x42, 0x10, 0x15, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x69, 0x65, 0x6e,
	0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41,
	0x42, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x50, 0x5f, 0x5a, 0x55, 0x53, 0x41,
	0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x4b, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x16, 0x12,
	0x42, 0x0a, 0x3e, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e,
	0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f,
	0x4c, 0x47, 0x4b, 0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e,
	0x47, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x4d, 0x53,
	0x42, 0x10, 0x17, 0x12, 0x37, 0x0a, 0x33, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69,
	0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53,
	0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x41, 0x54, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x46, 0x45, 0x52,
	0x4e, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x39, 0x0a, 0x35,
	0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74,
	0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x55,
	0x45, 0x4e, 0x44, 0x4c, 0x49, 0x43, 0x48, 0x5f, 0x46, 0x45, 0x52, 0x4e, 0x41, 0x55, 0x53, 0x4c,
	0x45, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x69, 0x65, 0x6e, 0x73,
	0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x4c, 0x49, 0x43, 0x48,
	0x5f, 0x4c, 0x47, 0x4b, 0x10, 0x1a, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74,
	0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53,
	0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x54, 0x45, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55, 0x4d, 0x57, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x1b,
	0x12, 0x37, 0x0a, 0x33, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75,
	0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47,
	0x5f, 0x5a, 0x55, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x53, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55,
	0x4d, 0x57, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x69, 0x65,
	0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f,
	0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55, 0x4d, 0x57, 0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x1d,
	0x12, 0x2c, 0x0a, 0x28, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75,
	0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47,
	0x5f, 0x56, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x1e, 0x12, 0x37,
	0x0a, 0x33, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67,
	0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x55, 0x4e, 0x47, 0x5f,
	0x4b, 0x4f, 0x4d, 0x50, 0x41, 0x4b, 0x54, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55, 0x4d, 0x57,
	0x45, 0x52, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x69, 0x65, 0x6e, 0x73,
	0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x41, 0x55,
	0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x4d, 0x44, 0x45, 0x5f, 0x4c, 0x47, 0x4b, 0x10,
	0x20, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74,
	0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x53, 0x50, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x47,
	0x5f, 0x53, 0x4c, 0x50, 0x10, 0x21, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74,
	0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x45, 0x4e, 0x54,
	0x53, 0x50, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x47, 0x5f, 0x53, 0x4c, 0x50, 0x10, 0x22, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67,
	0x73, 0x74, 0x79, 0x70, 0x5f, 0x53, 0x50, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x47, 0x5f, 0x52, 0x4c,
	0x4d, 0x10, 0x23, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69,
	0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x5f, 0x45, 0x4e, 0x54, 0x53, 0x50, 0x45,
	0x52, 0x52, 0x55, 0x4e, 0x47, 0x5f, 0x52, 0x4c, 0x4d, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79,
	0x70, 0x5f, 0x4d, 0x41, 0x48, 0x4e, 0x4b, 0x4f, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x25, 0x12, 0x24,
	0x0a, 0x20, 0x44, 0x69, 0x65, 0x6e, 0x73, 0x74, 0x6c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67,
	0x73, 0x74, 0x79, 0x70, 0x5f, 0x49, 0x4e, 0x4b, 0x41, 0x53, 0x53, 0x4f, 0x4b, 0x4f, 0x53, 0x54,
	0x45, 0x4e, 0x10, 0x26, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x37, 0x0a, 0x0f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x69, 0x65, 0x72,
	0x69, 0x63, 0x68, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x53, 0x53, 0x50,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x49, 0x4e, 0x53, 0x50, 0x10, 0x01, 0x1a, 0x0e, 0xea,
	0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x43, 0x0a,
	0x0d, 0x46, 0x65, 0x72, 0x6e, 0x73, 0x63, 0x68, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x4f, 0x52, 0x48, 0x41, 0x4e, 0x44, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x49, 0x43, 0x48, 0x54, 0x5f, 0x56, 0x4f, 0x52, 0x48, 0x41, 0x4e, 0x44, 0x45, 0x4e,
	0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x61, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61,
	0x65, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x61, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x61,
	0x65, 0x74, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x5f, 0x47,
	0x41, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x5f, 0x47, 0x41, 0x53, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x47, 0x41, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x47, 0x41,
	0x53, 0x10, 0x02, 0x1a, 0x10, 0x10, 0x01, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xcc, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x62, 0x69, 0x65, 0x74,
	0x74, 0x79, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x47, 0x45, 0x4c, 0x5a, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x52, 0x4b, 0x54, 0x47, 0x45, 0x42, 0x49, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x5a, 0x49, 0x45, 0x52,
	0x55, 0x4e, 0x47, 0x53, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x45, 0x52, 0x54, 0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x4e, 0x45, 0x54, 0x5a, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x4e, 0x45, 0x54, 0x5a,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52, 0x45, 0x41, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x10,
	0x06, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x52,
	0x47, 0x55, 0x4e, 0x47, 0x53, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x52, 0x47, 0x55, 0x4e, 0x47, 0x53, 0x47, 0x45, 0x42, 0x49,
	0x45, 0x54, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xdb, 0x09, 0x0a, 0x0e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x45, 0x49, 0x4e, 0x54, 0x41, 0x52,
	0x49, 0x46, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d,
	0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x5a, 0x57, 0x45, 0x49, 0x54, 0x41, 0x52, 0x49, 0x46,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72,
	0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x45, 0x48, 0x52, 0x54, 0x41, 0x52, 0x49, 0x46, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d,
	0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x32, 0x50, 0x35, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f,
	0x47, 0x41, 0x53, 0x5f, 0x47, 0x34, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x65, 0x72, 0x61,
	0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47,
	0x36, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65,
	0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x31, 0x30, 0x10, 0x06, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61,
	0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x31, 0x36, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41,
	0x53, 0x5f, 0x47, 0x32, 0x35, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x34,
	0x30, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65,
	0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x36, 0x35, 0x10, 0x0a, 0x12,
	0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61,
	0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x31, 0x30, 0x30, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47,
	0x41, 0x53, 0x5f, 0x47, 0x31, 0x36, 0x30, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72,
	0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f,
	0x47, 0x32, 0x35, 0x30, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x34, 0x30,
	0x30, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65,
	0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x36, 0x35, 0x30, 0x10, 0x0f,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d,
	0x61, 0x6c, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x31, 0x30, 0x30, 0x30, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c,
	0x5f, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x31, 0x36, 0x30, 0x30, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x47,
	0x41, 0x53, 0x5f, 0x47, 0x32, 0x35, 0x30, 0x30, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x65,
	0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x49, 0x4d, 0x50,
	0x55, 0x4c, 0x53, 0x47, 0x45, 0x42, 0x45, 0x52, 0x5f, 0x47, 0x34, 0x5f, 0x47, 0x31, 0x30, 0x30,
	0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72,
	0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x49, 0x4d, 0x50, 0x55, 0x4c, 0x53, 0x47, 0x45, 0x42, 0x45, 0x52,
	0x5f, 0x47, 0x31, 0x30, 0x30, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f,
	0x47, 0x53, 0x4d, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x47, 0x50,
	0x52, 0x53, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d,
	0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x46, 0x55, 0x4e,
	0x4b, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65,
	0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x47, 0x53, 0x4d, 0x5f,
	0x4f, 0x5f, 0x4c, 0x47, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x47,
	0x53, 0x4d, 0x5f, 0x4d, 0x5f, 0x4c, 0x47, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x65, 0x72,
	0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4d, 0x5f, 0x46, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5a, 0x10, 0x1a, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4d, 0x5f, 0x47, 0x50, 0x52, 0x53, 0x5f, 0x4d, 0x5f, 0x4c, 0x47, 0x10, 0x1b,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d,
	0x61, 0x6c, 0x5f, 0x50, 0x4c, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x4b, 0x4f, 0x4d, 0x10, 0x1d, 0x12, 0x1a, 0x0a,
	0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f,
	0x44, 0x53, 0x4c, 0x5f, 0x4b, 0x4f, 0x4d, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72,
	0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4c, 0x54, 0x45, 0x5f,
	0x4b, 0x4f, 0x4d, 0x10, 0x1f, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x52, 0x55, 0x4e, 0x44, 0x53, 0x54, 0x45, 0x55,
	0x45, 0x52, 0x45, 0x4d, 0x50, 0x46, 0x41, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x20, 0x12, 0x24,
	0x0a, 0x20, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c,
	0x5f, 0x54, 0x41, 0x52, 0x49, 0x46, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x54, 0x47, 0x45, 0x52, 0x41,
	0x45, 0x54, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d,
	0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x5a, 0x55, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x53, 0x5f,
	0x4d, 0x55, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d,
	0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55,
	0x52, 0x5f, 0x4d, 0x55, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x4b, 0x4f, 0x4d, 0x50, 0x41, 0x4b, 0x54,
	0x5f, 0x4d, 0x55, 0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x6d, 0x65, 0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d,
	0x55, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x6d, 0x65,
	0x72, 0x6b, 0x6d, 0x61, 0x6c, 0x5f, 0x55, 0x4e, 0x42, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x4d, 0x54,
	0x10, 0x26, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x9d, 0x0c, 0x0a, 0x0a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f,
	0x57, 0x45, 0x43, 0x48, 0x53, 0x45, 0x4c, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x5a, 0x41, 0x45, 0x48,
	0x4c, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x5f, 0x44, 0x52, 0x45, 0x48, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x5a, 0x41, 0x45,
	0x48, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x5f, 0x5a, 0x57, 0x45, 0x49, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e,
	0x47, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47,
	0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x52, 0x4c, 0x4d, 0x5f, 0x5a, 0x41,
	0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x49, 0x4d, 0x53, 0x5f, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x42, 0x41, 0x4c, 0x47, 0x45, 0x4e, 0x47, 0x41, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74,
	0x79, 0x70, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x58, 0x41, 0x4e, 0x4c, 0x41, 0x47,
	0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x41, 0x4e, 0x4c, 0x41, 0x47, 0x45,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x54, 0x41, 0x45, 0x52, 0x4b, 0x45, 0x52, 0x41, 0x4e, 0x4c, 0x41,
	0x47, 0x45, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74,
	0x79, 0x70, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x47, 0x45, 0x52,
	0x41, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x5f, 0x49, 0x4d, 0x50, 0x55, 0x4c, 0x53, 0x47, 0x45, 0x42, 0x45, 0x52, 0x10,
	0x0b, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f,
	0x45, 0x44, 0x4c, 0x5f, 0x32, 0x31, 0x5f, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x41, 0x55,
	0x46, 0x53, 0x41, 0x54, 0x5a, 0x10, 0x0c, 0x12, 0x2e, 0x0a, 0x2a, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x56, 0x49, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x41, 0x44, 0x52,
	0x41, 0x4e, 0x54, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x47, 0x41, 0x4e, 0x47, 0x5a, 0x41,
	0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x4e, 0x55, 0x4d, 0x57, 0x45,
	0x52, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x52, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x4e, 0x55, 0x4e, 0x47, 0x53, 0x57, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x52, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74,
	0x79, 0x70, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x4e, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x10, 0x11,
	0x12, 0x26, 0x0a, 0x22, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4b,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x4b, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x41, 0x4e, 0x53,
	0x43, 0x48, 0x4c, 0x55, 0x53, 0x53, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x65, 0x72, 0x61,
	0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x10, 0x13, 0x12, 0x2c,
	0x0a, 0x28, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x4b, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x4b, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x45,
	0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f,
	0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x44, 0x52, 0x45, 0x48, 0x4b,
	0x4f, 0x4c, 0x42, 0x45, 0x4e, 0x47, 0x41, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10,
	0x15, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f,
	0x54, 0x55, 0x52, 0x42, 0x49, 0x4e, 0x45, 0x4e, 0x52, 0x41, 0x44, 0x47, 0x41, 0x53, 0x5a, 0x41,
	0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x53, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65,
	0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x57, 0x49, 0x52, 0x42, 0x45, 0x4c, 0x47,
	0x41, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x47,
	0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x4e,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e,
	0x47, 0x10, 0x19, 0x12, 0x2e, 0x0a, 0x2a, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x45, 0x4c, 0x45, 0x4b, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x53, 0x43, 0x48, 0x45, 0x52,
	0x5f, 0x48, 0x41, 0x55, 0x53, 0x48, 0x41, 0x4c, 0x54, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45,
	0x52, 0x10, 0x1a, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54,
	0x55, 0x4e, 0x47, 0x10, 0x1b, 0x12, 0x2a, 0x0a, 0x26, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x53, 0x43, 0x48, 0x45, 0x53, 0x54,
	0x45, 0x55, 0x45, 0x52, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e, 0x47, 0x10,
	0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f,
	0x54, 0x41, 0x52, 0x49, 0x46, 0x53, 0x43, 0x48, 0x41, 0x4c, 0x54, 0x47, 0x45, 0x52, 0x41, 0x45,
	0x54, 0x10, 0x1d, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x52, 0x55, 0x4e, 0x44, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x45, 0x4d, 0x50, 0x46,
	0x41, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x2d, 0x0a, 0x29, 0x47, 0x65, 0x72, 0x61,
	0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x45,
	0x5f, 0x5a, 0x55, 0x53, 0x5f, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x49, 0x4e, 0x52, 0x49, 0x43,
	0x48, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x1f, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x52, 0x53, 0x41, 0x54, 0x5a, 0x5f, 0x49, 0x4d, 0x53, 0x5f, 0x4d, 0x4d, 0x45, 0x10, 0x20, 0x12,
	0x27, 0x0a, 0x23, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x4b, 0x4f,
	0x4d, 0x42, 0x49, 0x4d, 0x45, 0x53, 0x53, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x49,
	0x4d, 0x53, 0x5f, 0x4d, 0x4d, 0x45, 0x10, 0x21, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x65, 0x72, 0x61,
	0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x54, 0x41, 0x52, 0x49, 0x46, 0x53, 0x43, 0x48, 0x41,
	0x4c, 0x54, 0x47, 0x45, 0x52, 0x41, 0x45, 0x54, 0x5f, 0x49, 0x4d, 0x53, 0x5f, 0x4d, 0x4d, 0x45,
	0x10, 0x22, 0x12, 0x2b, 0x0a, 0x27, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70,
	0x5f, 0x52, 0x55, 0x4e, 0x44, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x45, 0x4d, 0x50, 0x46, 0x41,
	0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x53, 0x5f, 0x4d, 0x4d, 0x45, 0x10, 0x23, 0x12,
	0x26, 0x0a, 0x22, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x5f, 0x4b, 0x4f, 0x4d, 0x50, 0x45, 0x4e, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x65, 0x72, 0x61, 0x65,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x48, 0x4f, 0x45, 0x43, 0x48, 0x53, 0x54, 0x42, 0x45, 0x4c,
	0x41, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x5f, 0x41, 0x4e, 0x5a, 0x45, 0x49, 0x47, 0x45, 0x52,
	0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70,
	0x5f, 0x53, 0x4f, 0x4e, 0x53, 0x54, 0x49, 0x47, 0x45, 0x53, 0x5f, 0x47, 0x45, 0x52, 0x41, 0x45,
	0x54, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x5f, 0x53, 0x54, 0x45, 0x55, 0x45, 0x52, 0x42, 0x4f, 0x58, 0x10, 0x28, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10,
	0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x72, 0x61, 0x65, 0x74, 0x65, 0x74, 0x79, 0x70, 0x5f,
	0x4b, 0x4f, 0x4d, 0x42, 0x49, 0x4d, 0x45, 0x53, 0x53, 0x57, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52,
	0x10, 0x2a, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0xeb, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74,
	0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x20, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x5f, 0x4c, 0x49, 0x45, 0x46, 0x45, 0x52, 0x41, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74,
	0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x5f, 0x44, 0x49,
	0x45, 0x4e, 0x53, 0x54, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x5f, 0x4b, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x47, 0x65, 0x73, 0x63, 0x68, 0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x65, 0x73, 0x63, 0x68,
	0x61, 0x65, 0x66, 0x74, 0x73, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x54, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x04,
	0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d,
	0x2a, 0x2f, 0x0a, 0x0f, 0x47, 0x75, 0x65, 0x6c, 0x74, 0x69, 0x67, 0x6b, 0x65, 0x69, 0x74, 0x73,
	0x74, 0x79, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x48, 0x54, 0x5f, 0x49, 0x4e, 0x10,
	0x00, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55,
	0x4d, 0x2a, 0xff, 0x03, 0x0a, 0x13, 0x4b, 0x61, 0x6c, 0x6b, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4b, 0x45, 0x49,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x46, 0x46, 0x45, 0x4c, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x5a, 0x4f, 0x4e, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x56, 0x4f, 0x52, 0x5a, 0x4f, 0x4e, 0x45, 0x4e, 0x5f, 0x47, 0x50, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x49, 0x47, 0x4d, 0x4f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x4c, 0x49, 0x4e, 0x44, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x47, 0x54, 0x5f, 0x35, 0x30,
	0x5f, 0x50, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4c,
	0x49, 0x4e, 0x44, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x47, 0x54, 0x5f, 0x34, 0x30, 0x5f,
	0x50, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x5f,
	0x47, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x50,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x45, 0x49, 0x4c,
	0x4e, 0x45, 0x54, 0x5a, 0x10, 0x09, 0x12, 0x39, 0x0a, 0x35, 0x41, 0x50, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x54,
	0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x5f, 0x4f, 0x52, 0x54, 0x53, 0x56, 0x45, 0x52, 0x54,
	0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x5f, 0x53, 0x49, 0x47, 0x4d, 0x4f, 0x49, 0x44, 0x10,
	0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x50, 0x5f, 0x4a, 0x41, 0x48, 0x52, 0x45, 0x53, 0x56, 0x45,
	0x52, 0x42, 0x52, 0x41, 0x55, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x44, 0x45, 0x52, 0x5f, 0x56,
	0x45, 0x52, 0x54, 0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x10, 0x0c, 0x12, 0x39, 0x0a, 0x35,
	0x4c, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x44, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x5f, 0x4f, 0x52,
	0x54, 0x53, 0x56, 0x45, 0x52, 0x54, 0x45, 0x49, 0x4c, 0x4e, 0x45, 0x54, 0x5a, 0x5f, 0x53, 0x49,
	0x47, 0x4d, 0x4f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4e, 0x4b, 0x54,
	0x49, 0x4f, 0x4e, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x4a, 0x0a, 0x46, 0x56, 0x45, 0x52, 0x42, 0x52,
	0x41, 0x55, 0x43, 0x48, 0x5f, 0x55, 0x45, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x50, 0x5f, 0x47,
	0x52, 0x45, 0x4e, 0x5a, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x4b, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x42,
	0x45, 0x5a, 0x4f, 0x47, 0x45, 0x4e, 0x5f, 0x57, 0x45, 0x49, 0x54, 0x45, 0x52, 0x45, 0x5f, 0x42,
	0x45, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x53, 0x5f, 0x4c, 0x47,
	0x4b, 0x10, 0x0f, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45,
	0x4e, 0x55, 0x4d, 0x2a, 0x5a, 0x0a, 0x0a, 0x4b, 0x6f, 0x6e, 0x74, 0x61, 0x6b, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x53, 0x43, 0x48, 0x52, 0x45, 0x49, 0x42, 0x45, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x4c, 0x45, 0x46, 0x4f, 0x4e, 0x41, 0x54, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x58, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x5f,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x04, 0x1a,
	0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a,
	0x35, 0x0a, 0x0c, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x6b, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x4b, 0x6f, 0x73, 0x74, 0x65, 0x6e, 0x6b, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xf8, 0x28, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x41, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x45, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x46, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x41, 0x47, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x41, 0x49, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x4e, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41,
	0x4f, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x41, 0x51, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x52, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x53, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x54, 0x10, 0x0d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x55,
	0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x41, 0x57, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x41, 0x58, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x41, 0x5a, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x41, 0x10, 0x12, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x42, 0x10,
	0x13, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x42, 0x44, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x45, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x46, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x47, 0x10, 0x17, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x48, 0x10, 0x18,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42,
	0x49, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x42, 0x4a, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x4c, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x4d, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x4e, 0x10, 0x1d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x4f,
	0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x42, 0x51, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x42, 0x52, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x53, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x54, 0x10, 0x22, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x55, 0x10,
	0x23, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x42, 0x56, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x42, 0x57, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x59, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x5a, 0x10, 0x27, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x41, 0x10, 0x28,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x43, 0x10, 0x29, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x43, 0x44, 0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x46, 0x10, 0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x47, 0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x48, 0x10, 0x2d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x49,
	0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x43, 0x4b, 0x10, 0x2f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4c, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4d, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4e, 0x10, 0x32, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x4f, 0x10,
	0x33, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x43, 0x50, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x43, 0x52, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x53, 0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x55, 0x10, 0x37, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x56, 0x10, 0x38,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43,
	0x57, 0x10, 0x39, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x43, 0x58, 0x10, 0x3a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x59, 0x10, 0x3b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x43, 0x5a, 0x10, 0x3c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x45, 0x10, 0x3d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x47,
	0x10, 0x3e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x44, 0x4a, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x44, 0x4b, 0x10, 0x40, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x4d, 0x10, 0x41, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x4f, 0x10, 0x42, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x44, 0x5a, 0x10,
	0x43, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x45, 0x41, 0x10, 0x44, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x45, 0x43, 0x10, 0x45, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x45, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x47, 0x10, 0x47, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x48, 0x10, 0x48,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45,
	0x52, 0x10, 0x49, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x45, 0x53, 0x10, 0x4a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x54, 0x10, 0x4b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x55, 0x10, 0x4c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x49, 0x10, 0x4d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4a,
	0x10, 0x4e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x46, 0x4b, 0x10, 0x4f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4d, 0x10, 0x50, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x4f, 0x10, 0x51, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x52, 0x10, 0x52, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x46, 0x58, 0x10,
	0x53, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x47, 0x41, 0x10, 0x54, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x47, 0x42, 0x10, 0x55, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x44, 0x10, 0x56, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x45, 0x10, 0x57, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x46, 0x10, 0x58,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47,
	0x47, 0x10, 0x59, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x47, 0x48, 0x10, 0x5a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x49, 0x10, 0x5b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x4c, 0x10, 0x5c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x4d, 0x10, 0x5d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x4e,
	0x10, 0x5e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x47, 0x50, 0x10, 0x5f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x47, 0x51, 0x10, 0x60, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x52, 0x10, 0x61, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x53, 0x10, 0x62, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x54, 0x10,
	0x63, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x47, 0x55, 0x10, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x47, 0x57, 0x10, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x47, 0x59, 0x10, 0x66, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x4b, 0x10, 0x67, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x4d, 0x10, 0x68,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x48,
	0x4e, 0x10, 0x69, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x48, 0x52, 0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x54, 0x10, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x55, 0x10, 0x6c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x43, 0x10, 0x6d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x44,
	0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x49, 0x45, 0x10, 0x6f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4c, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64,
	0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4d, 0x10, 0x71, 0x12, 0x11, 0x0a, 0x0d, 0x4c,
	0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4e, 0x10, 0x72, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x4f, 0x10,
	0x73, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x51, 0x10, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x49, 0x52, 0x10, 0x75, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x53, 0x10, 0x76, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61,
	0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x54, 0x10, 0x77, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4a, 0x45, 0x10, 0x78,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4a,
	0x4d, 0x10, 0x79, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x4a, 0x4f, 0x10, 0x7a, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4a, 0x50, 0x10, 0x7b, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x45, 0x10, 0x7c, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x47, 0x10, 0x7d, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x48,
	0x10, 0x7e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x4b, 0x49, 0x10, 0x7f, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x4d, 0x10, 0x80, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x4e, 0x10, 0x81, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x50, 0x10, 0x82,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4b, 0x52, 0x10, 0x83, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x57, 0x10, 0x84, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x59, 0x10, 0x85, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4b, 0x5a, 0x10, 0x86,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x41, 0x10, 0x87, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x42, 0x10, 0x88, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x43, 0x10, 0x89, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x49, 0x10, 0x8a,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x4b, 0x10, 0x8b, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x52, 0x10, 0x8c, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x53, 0x10, 0x8d, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x54, 0x10, 0x8e,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4c, 0x55, 0x10, 0x8f, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x56, 0x10, 0x90, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x59, 0x10, 0x91, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x41, 0x10, 0x92,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x43, 0x10, 0x93, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x44, 0x10, 0x94, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x45, 0x10, 0x95, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x46, 0x10, 0x96,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x47, 0x10, 0x97, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x48, 0x10, 0x98, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x4b, 0x10, 0x99, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x4c, 0x10, 0x9a,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x4d, 0x10, 0x9b, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x4e, 0x10, 0x9c, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x4f, 0x10, 0x9d, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x50, 0x10, 0x9e,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x51, 0x10, 0x9f, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x52, 0x10, 0xa0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x53, 0x10, 0xa1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x54, 0x10, 0xa2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x55, 0x10, 0xa3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x56, 0x10, 0xa4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x57, 0x10, 0xa5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x58, 0x10, 0xa6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4d, 0x59, 0x10, 0xa7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x5a, 0x10, 0xa8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x41, 0x10, 0xa9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x43, 0x10, 0xaa,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x45, 0x10, 0xab, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x46, 0x10, 0xac, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x47, 0x10, 0xad, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x49, 0x10, 0xae,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x4c, 0x10, 0xaf, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x4f, 0x10, 0xb0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x50, 0x10, 0xb1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x52, 0x10, 0xb2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x54, 0x10, 0xb3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x55, 0x10, 0xb4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x5a, 0x10, 0xb5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4f, 0x4d, 0x10, 0xb6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x41, 0x10, 0xb7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x45, 0x10, 0xb8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x46, 0x10, 0xb9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x47, 0x10, 0xba,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x48, 0x10, 0xbb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x4b, 0x10, 0xbc, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x4c, 0x10, 0xbd, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x4d, 0x10, 0xbe,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x4e, 0x10, 0xbf, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x52, 0x10, 0xc0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x53, 0x10, 0xc1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x54, 0x10, 0xc2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x50, 0x57, 0x10, 0xc3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x59, 0x10, 0xc4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x51, 0x41, 0x10, 0xc5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x45, 0x10, 0xc6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x52, 0x4f, 0x10, 0xc7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x52, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x55, 0x10, 0xc9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x52, 0x57, 0x10, 0xca,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x41, 0x10, 0xcb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x42, 0x10, 0xcc, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x43, 0x10, 0xcd, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x44, 0x10, 0xce,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x46, 0x10, 0xd0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x47, 0x10, 0xd1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x48, 0x10, 0xd2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x49, 0x10, 0xd3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4a, 0x10, 0xd4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4b, 0x10, 0xd5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4c, 0x10, 0xd6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x4d, 0x10, 0xd7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4e, 0x10, 0xd8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x4f, 0x10, 0xd9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x52, 0x10, 0xda,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x53, 0x10, 0xdb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x54, 0x10, 0xdc, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x55, 0x10, 0xdd, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x56, 0x10, 0xde,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x53, 0x58, 0x10, 0xdf, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x53, 0x59, 0x10, 0xe0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x5a, 0x10, 0xe1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x41, 0x10, 0xe2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x54, 0x43, 0x10, 0xe3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x54, 0x44, 0x10, 0xe4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x46, 0x10, 0xe5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x47, 0x10, 0xe6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x54, 0x4a, 0x10, 0xe7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4b, 0x10, 0xe8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4c, 0x10, 0xe9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4d, 0x10, 0xea,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x54, 0x4e, 0x10, 0xeb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x54, 0x4f, 0x10, 0xec, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x50, 0x10, 0xed, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x52, 0x10, 0xee,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x54, 0x54, 0x10, 0xef, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x54, 0x56, 0x10, 0xf0, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x57, 0x10, 0xf1, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x54, 0x5a, 0x10, 0xf2,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x41, 0x10, 0xf3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x55, 0x47, 0x10, 0xf4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4b, 0x10, 0xf5, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x4d, 0x10, 0xf6,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x55, 0x53, 0x10, 0xf7, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x55, 0x59, 0x10, 0xf8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x5a, 0x10, 0xf9, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x41, 0x10, 0xfa,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x56, 0x43, 0x10, 0xfb, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x56, 0x45, 0x10, 0xfc, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x47, 0x10, 0xfd, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x56, 0x49, 0x10, 0xfe,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x56, 0x4e, 0x10, 0xff, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x56, 0x55, 0x10, 0x80, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x46, 0x10, 0x81, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x57, 0x53, 0x10, 0x82,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x58, 0x4b, 0x10, 0x83, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x59, 0x45, 0x10, 0x84, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x59, 0x54, 0x10, 0x85, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x59, 0x55, 0x10, 0x86,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x5a, 0x41, 0x10, 0x87, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x5a, 0x4d, 0x10, 0x88, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x61, 0x6e,
	0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x5a, 0x52, 0x10, 0x89, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x5a, 0x57, 0x10, 0x8a,
	0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55,
	0x4d, 0x2a, 0xbe, 0x04, 0x0a, 0x0c, 0x4c, 0x65, 0x69, 0x73, 0x74, 0x75, 0x6e, 0x67, 0x73, 0x74,
	0x79, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x50, 0x52, 0x45,
	0x49, 0x53, 0x5f, 0x57, 0x49, 0x52, 0x4b, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x50, 0x52, 0x45, 0x49,
	0x53, 0x5f, 0x57, 0x49, 0x52, 0x4b, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x50, 0x52, 0x45, 0x49, 0x53,
	0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x50, 0x52, 0x45,
	0x49, 0x53, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x5f, 0x4b,
	0x41, 0x50, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x50, 0x52, 0x45,
	0x49, 0x53, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x48, 0x52, 0x4d, 0x49, 0x4e, 0x44,
	0x45, 0x52, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53,
	0x53, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x42, 0x45, 0x54, 0x52, 0x49, 0x45, 0x42, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x44, 0x49, 0x45, 0x4e, 0x53, 0x54, 0x4c,
	0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53,
	0x53, 0x44, 0x49, 0x45, 0x4e, 0x53, 0x54, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x5f,
	0x49, 0x4e, 0x4b, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x55, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x4b, 0x4f, 0x4e, 0x5a, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x42,
	0x47, 0x41, 0x42, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x57, 0x4b, 0x5f, 0x55, 0x4d,
	0x4c, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x46, 0x46, 0x53, 0x48, 0x4f,
	0x52, 0x45, 0x5f, 0x55, 0x4d, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x42, 0x4c, 0x41, 0x56, 0x5f, 0x55, 0x4d, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x47, 0x45, 0x4c, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x49, 0x45, 0x5f, 0x55, 0x4d,
	0x4c, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x5a,
	0x49, 0x45, 0x52, 0x55, 0x4e, 0x47, 0x5f, 0x55, 0x4d, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x0f, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x5a, 0x55, 0x53,
	0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x42,
	0x4c, 0x45, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49,
	0x43, 0x48, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55,
	0x4e, 0x47, 0x5f, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48, 0x10, 0x12,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x4e, 0x54, 0x53, 0x50, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x47, 0x10, 0x14, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x48, 0x4e, 0x4b, 0x4f, 0x53, 0x54, 0x45, 0x4e, 0x10, 0x15, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x4b, 0x41, 0x53, 0x53, 0x4f, 0x4b, 0x4f, 0x53, 0x54, 0x45, 0x4e,
	0x10, 0x16, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x32, 0x0a, 0x0c, 0x4c, 0x6f, 0x6b, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74,
	0x79, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x61, 0x4c, 0x6f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x65, 0x4c, 0x6f, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xae, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x42, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x53, 0x42, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x44, 0x4c, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4c, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x4b, 0x56, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x4b, 0x4f,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x45, 0x4e, 0x42, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x4b, 0x55, 0x4e, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x42, 0x53, 0x54, 0x5f, 0x4e, 0x4e, 0x10,
	0x08, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x47, 0x56, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x49,
	0x56, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x42, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4b,
	0x55, 0x4e, 0x44, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xd8, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x67,
	0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x65, 0x6e,
	0x67, 0x65, 0x6e, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x48, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x57, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x57, 0x48, 0x10, 0xd0, 0x0f, 0x12, 0x07, 0x0a, 0x02, 0x4d,
	0x57, 0x10, 0xb8, 0x17, 0x12, 0x09, 0x0a, 0x03, 0x4d, 0x57, 0x48, 0x10, 0x80, 0x89, 0x7a, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x5a, 0x41, 0x48, 0x4c, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4b,
	0x55, 0x42, 0x49, 0x4b, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x47, 0x10, 0x11,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x04, 0x4a,
	0x41, 0x48, 0x52, 0x10, 0xe4, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x41, 0x52, 0x10, 0x17, 0x12,
	0x0a, 0x0a, 0x04, 0x4b, 0x56, 0x41, 0x52, 0x10, 0xd8, 0xb3, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56,
	0x41, 0x52, 0x48, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x05, 0x4b, 0x56, 0x41, 0x52, 0x48, 0x10, 0xc8,
	0xe2, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x4f, 0x0a, 0x0e, 0x4d, 0x65, 0x6e, 0x67, 0x65, 0x6e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x4c, 0x45, 0x49, 0x4e, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x45, 0x53, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x45, 0x49, 0x43,
	0x48, 0x10, 0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45,
	0x4e, 0x55, 0x4d, 0x2a, 0x4f, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x77, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x73, 0x73, 0x75, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x45, 0x52, 0x4e,
	0x41, 0x55, 0x53, 0x4c, 0x45, 0x53, 0x42, 0x41, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x4e, 0x55, 0x45, 0x4c, 0x4c, 0x5f, 0x41, 0x55, 0x53, 0x47, 0x45, 0x4c, 0x45, 0x53, 0x45,
	0x4e, 0x45, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x8d, 0x01, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x7a, 0x65, 0x62, 0x65,
	0x6e, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x53, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x53, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x53, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x48, 0x53, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x53, 0x50, 0x5f, 0x4e, 0x53,
	0x50, 0x5f, 0x55, 0x4d, 0x53, 0x50, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x53, 0x50, 0x5f,
	0x4d, 0x53, 0x50, 0x5f, 0x55, 0x4d, 0x53, 0x50, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x53,
	0x53, 0x5f, 0x48, 0x53, 0x50, 0x5f, 0x55, 0x4d, 0x53, 0x50, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02,
	0x48, 0x44, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x44, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02,
	0x4e, 0x44, 0x10, 0x09, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e,
	0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x48, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a,
	0x75, 0x6e, 0x67, 0x73, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x4b,
	0x55, 0x4e, 0x44, 0x45, 0x4e, 0x5f, 0x4e, 0x42, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49,
	0x45, 0x46, 0x45, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x4e, 0x5f, 0x4e, 0x42, 0x10, 0x01, 0x1a, 0x0e,
	0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x5f,
	0x0a, 0x20, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61, 0x62,
	0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x67, 0x72, 0x75, 0x6e, 0x64, 0x6c, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x45, 0x46, 0x45, 0x52, 0x53, 0x43, 0x48, 0x45,
	0x49, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x42, 0x57, 0x45, 0x49, 0x43, 0x48, 0x45,
	0x4e, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x4c, 0x41, 0x47, 0x45, 0x10, 0x01, 0x1a,
	0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a,
	0x6f, 0x0a, 0x1f, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x61,
	0x62, 0x72, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x50, 0x52, 0x45,
	0x49, 0x53, 0x5f, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x50, 0x52, 0x45, 0x49, 0x53, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x53, 0x50, 0x52, 0x45, 0x49, 0x53, 0x5f,
	0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x50, 0x52, 0x45, 0x49, 0x53, 0x10, 0x01,
	0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d,
	0x2a, 0x64, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73,
	0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75,
	0x74, 0x7a, 0x75, 0x6e, 0x67, 0x73, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x5f, 0x4b, 0x55, 0x4e,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x65, 0x74, 0x7a, 0x6e, 0x75, 0x74, 0x7a,
	0x75, 0x6e, 0x67, 0x73, 0x7a, 0x61, 0x68, 0x6c, 0x65, 0x72, 0x5f, 0x4c, 0x49, 0x45, 0x46, 0x45,
	0x52, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x3d, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x69, 0x73, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f, 0x52, 0x4c, 0x41, 0x45, 0x55,
	0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x44, 0x47, 0x55, 0x45, 0x4c,
	0x54, 0x49, 0x47, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x60, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x61, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x48, 0x52, 0x5f, 0x4e, 0x49, 0x45, 0x44,
	0x52, 0x49, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x49, 0x45, 0x44, 0x52, 0x49, 0x47,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x4f, 0x43, 0x48, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x48, 0x52,
	0x5f, 0x48, 0x4f, 0x43, 0x48, 0x10, 0x04, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x87, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x68,
	0x6e, 0x75, 0x6e, 0x67, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f, 0x48, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x48, 0x5f, 0x41, 0x55, 0x53, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x45, 0x4e, 0x42, 0x41,
	0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x45, 0x4e, 0x42,
	0x41, 0x52, 0x5f, 0x41, 0x55, 0x53, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x42, 0x47, 0x45, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x45, 0x54, 0x10,
	0x04, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55,
	0x4d, 0x2a, 0x65, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x50, 0x52, 0x55, 0x45, 0x46, 0x54,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x50, 0x52, 0x55, 0x45, 0x46,
	0x54, 0x5f, 0x46, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x48, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x47, 0x45, 0x42, 0x55, 0x43, 0x48, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x45, 0x5a, 0x41, 0x48, 0x4c, 0x54, 0x10, 0x03, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42,
	0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xe1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x68, 0x6e, 0x75, 0x6e, 0x67, 0x73, 0x74, 0x79, 0x70, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x42, 0x53,
	0x43, 0x48, 0x4c, 0x41, 0x47, 0x53, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x55, 0x52, 0x4e, 0x55, 0x53, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x41, 0x54, 0x53, 0x52, 0x45,
	0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x4d, 0x52,
	0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x5a, 0x57, 0x49,
	0x53, 0x43, 0x48, 0x45, 0x4e, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x45, 0x52, 0x54, 0x45, 0x5f, 0x31,
	0x33, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x5a, 0x55, 0x53, 0x41, 0x45, 0x54, 0x5a, 0x4c, 0x49, 0x43, 0x48, 0x45, 0x5f, 0x31,
	0x33, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x45, 0x48, 0x52, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x4d, 0x45, 0x4e, 0x47,
	0x45, 0x4e, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x07, 0x1a, 0x0e, 0xea, 0x40,
	0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xbd, 0x04, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x6b, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x75,
	0x6d, 0x74, 0x79, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x4c, 0x41,
	0x4e, 0x44, 0x4b, 0x45, 0x4e, 0x4e, 0x5a, 0x49, 0x46, 0x46, 0x45, 0x52, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x52, 0x4b, 0x54, 0x47, 0x45, 0x42, 0x49,
	0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x41, 0x52, 0x4b, 0x54, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x47, 0x45, 0x4c, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47,
	0x45, 0x4c, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x45, 0x54, 0x5a, 0x42, 0x45, 0x54, 0x52, 0x45, 0x49, 0x42, 0x45, 0x52,
	0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54,
	0x5a, 0x42, 0x45, 0x54, 0x52, 0x45, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x5a, 0x49, 0x45, 0x52, 0x55, 0x4e,
	0x47, 0x53, 0x5f, 0x47, 0x45, 0x42, 0x49, 0x45, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52,
	0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x53, 0x42, 0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x53, 0x42, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x55,
	0x4d, 0x4d, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x52,
	0x47, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x55, 0x4e, 0x44, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x4d, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x55, 0x4e, 0x44, 0x56, 0x45,
	0x52, 0x53, 0x4f, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x0e,
	0x0a, 0x0a, 0x4b, 0x52, 0x45, 0x49, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x13,
	0x0a, 0x0f, 0x4b, 0x52, 0x45, 0x49, 0x53, 0x4b, 0x45, 0x4e, 0x4e, 0x5a, 0x49, 0x46, 0x46, 0x45,
	0x52, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4d, 0x45, 0x49, 0x4e, 0x44, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4d, 0x45, 0x49, 0x4e,
	0x44, 0x45, 0x4b, 0x45, 0x4e, 0x4e, 0x5a, 0x49, 0x46, 0x46, 0x45, 0x52, 0x10, 0x12, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x54, 0x4c, 0x45, 0x49, 0x54, 0x5a, 0x41, 0x48, 0x4c, 0x10, 0x13,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x52, 0x54, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x49, 0x4e,
	0x57, 0x4f, 0x48, 0x4e, 0x45, 0x52, 0x5a, 0x41, 0x48, 0x4c, 0x5f, 0x47, 0x45, 0x4d, 0x45, 0x49,
	0x4e, 0x44, 0x45, 0x10, 0x15, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x49, 0x4e, 0x57, 0x4f, 0x48, 0x4e,
	0x45, 0x52, 0x5a, 0x41, 0x48, 0x4c, 0x5f, 0x4f, 0x52, 0x54, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a,
	0x4b, 0x4d, 0x5f, 0x55, 0x4d, 0x4b, 0x52, 0x45, 0x49, 0x53, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x57, 0x45, 0x49, 0x54, 0x10, 0x18, 0x1a, 0x0e, 0xea, 0x40,
	0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xbd, 0x01, 0x0a,
	0x0d, 0x52, 0x75, 0x66, 0x6e, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x6e, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x55, 0x46, 0x5f, 0x5a, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x45, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x41, 0x58, 0x5f, 0x5a, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x4d, 0x4d, 0x45, 0x4c, 0x52, 0x55, 0x46, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x4d, 0x4d, 0x45, 0x4c, 0x46, 0x41, 0x58, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x54, 0x45, 0x49, 0x4c, 0x55, 0x4e, 0x47, 0x52, 0x55, 0x46,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x54, 0x45, 0x49, 0x4c, 0x55, 0x4e, 0x47, 0x46,
	0x41, 0x58, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x55, 0x46, 0x5f, 0x44, 0x55, 0x52, 0x43,
	0x48, 0x57, 0x41, 0x48, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x58, 0x5f, 0x44,
	0x55, 0x52, 0x43, 0x48, 0x57, 0x41, 0x48, 0x4c, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x4d, 0x45, 0x52, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40,
	0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x57, 0x0a, 0x11,
	0x53, 0x63, 0x68, 0x77, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x61, 0x65, 0x68, 0x69,
	0x67, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x49, 0x43, 0x48, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x57, 0x41,
	0x43, 0x48, 0x4c, 0x41, 0x53, 0x54, 0x46, 0x41, 0x45, 0x48, 0x49, 0x47, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x43, 0x48, 0x57, 0x41, 0x43, 0x48, 0x4c, 0x41, 0x53, 0x54, 0x46, 0x41, 0x45,
	0x48, 0x49, 0x47, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45,
	0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x8f, 0x01, 0x0a, 0x06, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x53, 0x54, 0x52, 0x4f, 0x4d,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x47, 0x41, 0x53,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x46, 0x45, 0x52,
	0x4e, 0x57, 0x41, 0x45, 0x52, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x70, 0x61,
	0x72, 0x74, 0x65, 0x5f, 0x4e, 0x41, 0x48, 0x57, 0x41, 0x45, 0x52, 0x4d, 0x45, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x57, 0x41, 0x53, 0x53, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x72, 0x74, 0x65, 0x5f, 0x41, 0x42, 0x57,
	0x41, 0x53, 0x53, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f,
	0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x65, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x75, 0x65,
	0x72, 0x6b, 0x65, 0x6e, 0x6e, 0x7a, 0x65, 0x69, 0x63, 0x68, 0x65, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x53, 0x54, 0x5f, 0x31, 0x39, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x54, 0x5f,
	0x37, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x53, 0x54, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x53, 0x54, 0x5f, 0x31, 0x39, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x53,
	0x54, 0x5f, 0x37, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x43, 0x56, 0x10, 0x05, 0x1a, 0x0e,
	0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x6e,
	0x0a, 0x08, 0x54, 0x61, 0x72, 0x69, 0x66, 0x61, 0x72, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x49,
	0x4e, 0x54, 0x41, 0x52, 0x49, 0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x57, 0x45, 0x49,
	0x54, 0x41, 0x52, 0x49, 0x46, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x48, 0x52, 0x54,
	0x41, 0x52, 0x49, 0x46, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x49, 0x53, 0x54,
	0x55, 0x4e, 0x47, 0x53, 0x47, 0x45, 0x4d, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x10, 0x04, 0x1a, 0x0e,
	0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x42,
	0x0a, 0x09, 0x54, 0x61, 0x72, 0x69, 0x66, 0x7a, 0x65, 0x69, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x5a, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x5a, 0x5f, 0x48, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x5a, 0x5f, 0x4e, 0x54,
	0x10, 0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x36, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x65, 0x6c, 0x12, 0x06, 0x0a, 0x02, 0x44,
	0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x4f, 0x46, 0x5f, 0x44, 0x52, 0x10, 0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a,
	0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x34, 0x0a, 0x11, 0x55, 0x6e,
	0x74, 0x65, 0x72, 0x62, 0x72, 0x65, 0x63, 0x68, 0x62, 0x61, 0x72, 0x6b, 0x65, 0x69, 0x74, 0x12,
	0x06, 0x0a, 0x02, 0x55, 0x56, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x55, 0x56, 0x10, 0x01,
	0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d,
	0x2a, 0x49, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x61, 0x72,
	0x74, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4c, 0x57,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x4c, 0x57, 0x53, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01,
	0x57, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x53, 0x10, 0x04, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x7e, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x62, 0x72, 0x61, 0x75, 0x63, 0x68, 0x73, 0x6d, 0x65, 0x6e, 0x67, 0x65, 0x74, 0x79,
	0x70, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x4c, 0x45, 0x49, 0x53, 0x54,
	0x55, 0x4e, 0x47, 0x54, 0x41, 0x47, 0x45, 0x53, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x41, 0x42, 0x48, 0x4d, 0x41, 0x4c, 0x4f, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x48, 0x4c, 0x41, 0x47, 0x54, 0x45, 0x4a, 0x41, 0x48, 0x52, 0x45,
	0x53, 0x4d, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x55, 0x4d, 0x4b,
	0x55, 0x4e, 0x44, 0x45, 0x4e, 0x57, 0x45, 0x52, 0x54, 0x10, 0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x9e, 0x01, 0x0a, 0x0b,
	0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4e, 0x45, 0x52, 0x47, 0x49, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x45, 0x52, 0x56, 0x45, 0x52, 0x54,
	0x52, 0x41, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x5a, 0x4e, 0x55, 0x54,
	0x5a, 0x55, 0x4e, 0x47, 0x53, 0x56, 0x45, 0x52, 0x54, 0x52, 0x41, 0x47, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x5a, 0x49, 0x45, 0x52, 0x55, 0x4e, 0x47, 0x53, 0x56,
	0x45, 0x52, 0x54, 0x52, 0x41, 0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53,
	0x53, 0x54, 0x45, 0x4c, 0x4c, 0x45, 0x4e, 0x42, 0x45, 0x54, 0x52, 0x49, 0x45, 0x42, 0x53, 0x56,
	0x45, 0x52, 0x54, 0x52, 0x41, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x45, 0x4e,
	0x44, 0x45, 0x4c, 0x56, 0x45, 0x52, 0x54, 0x52, 0x41, 0x47, 0x10, 0x04, 0x1a, 0x0e, 0xea, 0x40,
	0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xa4, 0x02, 0x0a,
	0x0d, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x49, 0x4e, 0x5f, 0x41, 0x52, 0x42, 0x45, 0x49, 0x54, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x45, 0x42,
	0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56,
	0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x4e, 0x47,
	0x45, 0x4e, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x65, 0x72,
	0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x4b, 0x54, 0x49, 0x56,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x41, 0x42, 0x47, 0x45, 0x4c, 0x45, 0x48, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x57, 0x49, 0x44, 0x45, 0x52, 0x52, 0x55, 0x46, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x56, 0x65, 0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x4e, 0x49, 0x45, 0x52, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x65,
	0x72, 0x74, 0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x47, 0x45, 0x4b, 0x55,
	0x45, 0x4e, 0x44, 0x49, 0x47, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x74,
	0x72, 0x61, 0x67, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x44, 0x45,
	0x54, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45,
	0x4e, 0x55, 0x4d, 0x2a, 0x93, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x77, 0x65, 0x6e, 0x64, 0x75,
	0x6e, 0x67, 0x73, 0x7a, 0x77, 0x65, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x54, 0x5a,
	0x4e, 0x55, 0x54, 0x5a, 0x55, 0x4e, 0x47, 0x53, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x49, 0x4c, 0x41, 0x4e, 0x5a, 0x4b, 0x52,
	0x45, 0x49, 0x53, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x48, 0x52, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x4d, 0x42, 0x45,
	0x4e, 0x47, 0x45, 0x4e, 0x41, 0x42, 0x52, 0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x44, 0x4b, 0x55, 0x4e, 0x44, 0x45, 0x4e, 0x41, 0x42, 0x52,
	0x45, 0x43, 0x48, 0x4e, 0x55, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09,
	0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xbf, 0x0d, 0x0a, 0x0d, 0x57, 0x61,
	0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x46, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4f, 0x41, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x53, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57,
	0x47, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x5a, 0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x41, 0x4d, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x42, 0x44, 0x10, 0x0a, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x44, 0x54, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10, 0x0c,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x44, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x46,
	0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d, 0x44, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x4e, 0x44, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x42, 0x10, 0x11, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x4f, 0x56, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x13, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x4e, 0x10,
	0x15, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59,
	0x4e, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x52, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x5a, 0x44, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10, 0x1a, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x44, 0x46, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x45, 0x10, 0x1c,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x46, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x48, 0x57,
	0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x46, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x4c, 0x50, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x21, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x4f, 0x50, 0x10, 0x22, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x55, 0x10, 0x23, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x52, 0x43, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x43, 0x10,
	0x25, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x26, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x56,
	0x45, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x4a, 0x46, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x2a, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x4f, 0x50, 0x10, 0x2b, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x5a, 0x44, 0x10, 0x2c,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x47, 0x50, 0x10, 0x2d, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x4e,
	0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x42, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x55, 0x52, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4a, 0x44, 0x10, 0x31, 0x12, 0x07, 0x0a,
	0x03, 0x46, 0x4b, 0x50, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10, 0x33, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x4c, 0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x53, 0x10,
	0x35, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x50, 0x10, 0x36, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4d,
	0x44, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x4e, 0x46, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x54, 0x51, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x59, 0x44, 0x10, 0x3a, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10, 0x3b, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4e, 0x4c, 0x10, 0x3c,
	0x12, 0x07, 0x0a, 0x03, 0x48, 0x52, 0x4b, 0x10, 0x3d, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x54, 0x47,
	0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x44, 0x52, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x41, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x52, 0x10, 0x42, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x44, 0x10, 0x43, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x52, 0x52, 0x10, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10,
	0x45, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x10, 0x46, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4f,
	0x44, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x45, 0x53, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10, 0x4a, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x48, 0x52, 0x10, 0x4b, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4d, 0x46, 0x10, 0x4c,
	0x12, 0x07, 0x0a, 0x03, 0x4b, 0x50, 0x57, 0x10, 0x4d, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57,
	0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x57, 0x44, 0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x59, 0x44, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x5a, 0x54, 0x10, 0x51, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x41, 0x4b, 0x10, 0x52, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x10, 0x53, 0x12,
	0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x52, 0x44, 0x10,
	0x55, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x53, 0x4c, 0x10, 0x56, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54,
	0x4c, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x59, 0x44, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x41, 0x44, 0x10, 0x59, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e,
	0x67, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x44, 0x4c, 0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x47, 0x41, 0x10, 0x5b, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4b, 0x44, 0x10, 0x5c, 0x12, 0x07,
	0x0a, 0x03, 0x4d, 0x4d, 0x4b, 0x10, 0x5d, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x54, 0x10, 0x5e,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x50, 0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x52, 0x4f,
	0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x52, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x56, 0x52, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x10, 0x63, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x58, 0x4e, 0x10, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x58, 0x56, 0x10, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x59, 0x52, 0x10, 0x66, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x10,
	0x67, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41, 0x44, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x47,
	0x4e, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x4f, 0x10, 0x6a, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x4f, 0x4b, 0x10, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x10, 0x6c, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x5a, 0x44, 0x10, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4d, 0x52, 0x10, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x42, 0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4e,
	0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x47, 0x4b, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x48, 0x50, 0x10, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b, 0x52, 0x10, 0x73, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x4c, 0x4e, 0x10, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x59, 0x47, 0x10, 0x75, 0x12,
	0x07, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x10, 0x76, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4f, 0x4e, 0x10,
	0x77, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x44, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55,
	0x42, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x52, 0x10, 0x7a, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x57, 0x46, 0x10, 0x7b, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x10, 0x7c, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x42, 0x44, 0x10, 0x7d, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x43, 0x52, 0x10, 0x7e,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x44, 0x47, 0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x45, 0x4b,
	0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x10, 0x81, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x48, 0x50, 0x10, 0x82, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4c, 0x4c, 0x10, 0x83,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x4f, 0x53, 0x10, 0x84, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53,
	0x52, 0x44, 0x10, 0x85, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x53, 0x50, 0x10, 0x86, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x53, 0x54, 0x44, 0x10, 0x87, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x56, 0x43,
	0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x59, 0x50, 0x10, 0x89, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x53, 0x5a, 0x4c, 0x10, 0x8a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x48, 0x42, 0x10, 0x8b,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4a, 0x53, 0x10, 0x8c, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54,
	0x4d, 0x54, 0x10, 0x8d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10, 0x8e, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x10, 0x8f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x52, 0x59,
	0x10, 0x90, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x54, 0x44, 0x10, 0x91, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x54, 0x57, 0x44, 0x10, 0x92, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x5a, 0x53, 0x10, 0x93,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x41, 0x48, 0x10, 0x94, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55,
	0x47, 0x58, 0x10, 0x95, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x96, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x55, 0x53, 0x4e, 0x10, 0x97, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x53,
	0x10, 0x98, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x59, 0x49, 0x10, 0x99, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x55, 0x59, 0x55, 0x10, 0x9a, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x5a, 0x53, 0x10, 0x9b,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x45, 0x46, 0x10, 0x9c, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56,
	0x4e, 0x44, 0x10, 0x9d, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x56, 0x55, 0x56, 0x10, 0x9e, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x57, 0x53, 0x54, 0x10, 0x9f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x41, 0x46,
	0x10, 0xa0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x41, 0x47, 0x10, 0xa1, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x58, 0x41, 0x55, 0x10, 0xa2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x41, 0x10, 0xa3,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x42, 0x10, 0xa4, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58,
	0x42, 0x43, 0x10, 0xa5, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x42, 0x44, 0x10, 0xa6, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x58, 0x43, 0x44, 0x10, 0xa7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x44, 0x52,
	0x10, 0xa8, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x4f, 0x46, 0x10, 0xa9, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x58, 0x50, 0x44, 0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x50, 0x46, 0x10, 0xab,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x50, 0x54, 0x10, 0xac, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58,
	0x53, 0x55, 0x10, 0xad, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x54, 0x53, 0x10, 0xae, 0x01, 0x12,
	0x08, 0x0a, 0x03, 0x58, 0x55, 0x41, 0x10, 0xaf, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x58, 0x58,
	0x10, 0xb0, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x59, 0x45, 0x52, 0x10, 0xb1, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x5a, 0x41, 0x52, 0x10, 0xb2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x10, 0xb3,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x5a, 0x57, 0x4c, 0x10, 0xb4, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x44, 0x0a, 0x10, 0x57,
	0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x14, 0x57, 0x61, 0x65, 0x68, 0x72, 0x75, 0x6e, 0x67, 0x73, 0x65, 0x69, 0x6e, 0x68,
	0x65, 0x69, 0x74, 0x5f, 0x45, 0x55, 0x52, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x54, 0x10,
	0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55,
	0x4d, 0x2a, 0x58, 0x0a, 0x0d, 0x57, 0x61, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x75, 0x74, 0x7a, 0x75,
	0x6e, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x45, 0x49, 0x43, 0x48, 0x45, 0x52, 0x48, 0x45,
	0x49, 0x5a, 0x55, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x41, 0x45, 0x52, 0x4d,
	0x45, 0x50, 0x55, 0x4d, 0x50, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x52, 0x45,
	0x4b, 0x54, 0x48, 0x45, 0x49, 0x5a, 0x55, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x45, 0x0a, 0x18, 0x57,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x6c, 0x75, 0x6e, 0x67, 0x73, 0x76, 0x65,
	0x72, 0x66, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x47, 0x4e,
	0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x55, 0x4e, 0x47,
	0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e,
	0x55, 0x4d, 0x2a, 0x57, 0x0a, 0x12, 0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x61, 0x75, 0x73,
	0x70, 0x72, 0x61, 0x65, 0x67, 0x75, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x49, 0x4e, 0x52,
	0x49, 0x43, 0x48, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x5a, 0x57, 0x45, 0x49, 0x52, 0x49, 0x43, 0x48, 0x54, 0x55, 0x4e,
	0x47, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0xe8, 0x01, 0x0a, 0x0a,
	0x5a, 0x61, 0x65, 0x68, 0x6c, 0x65, 0x72, 0x74, 0x79, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x52,
	0x45, 0x48, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x4c, 0x47, 0x45, 0x4e, 0x47, 0x41, 0x53, 0x5a, 0x41, 0x45,
	0x48, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x52, 0x45, 0x48, 0x4b, 0x4f,
	0x4c, 0x42, 0x45, 0x4e, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x45, 0x49, 0x53, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5a, 0x41,
	0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x55, 0x52, 0x42, 0x49,
	0x4e, 0x45, 0x4e, 0x52, 0x41, 0x44, 0x47, 0x41, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x53, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x47, 0x41, 0x53, 0x5a, 0x41, 0x45, 0x48, 0x4c, 0x45, 0x52, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x57, 0x45, 0x43, 0x48, 0x53, 0x45, 0x4c, 0x53, 0x54, 0x52, 0x4f, 0x4d, 0x5a, 0x41, 0x45,
	0x48, 0x4c, 0x45, 0x52, 0x10, 0x08, 0x1a, 0x0e, 0xea, 0x40, 0x0b, 0x1a, 0x09, 0x42, 0x4f, 0x34,
	0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x92, 0x02, 0x0a, 0x0b, 0x5a, 0x65, 0x69, 0x74, 0x65,
	0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69,
	0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x53, 0x45, 0x4b, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x4d,
	0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x5a, 0x65, 0x69, 0x74, 0x65,
	0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x53, 0x54, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x56,
	0x49, 0x45, 0x52, 0x54, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x4e, 0x44, 0x45, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68,
	0x65, 0x69, 0x74, 0x5f, 0x57, 0x4f, 0x43, 0x48, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x5a,
	0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x4d, 0x4f, 0x4e, 0x41, 0x54,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69,
	0x74, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x5a,
	0x65, 0x69, 0x74, 0x65, 0x69, 0x6e, 0x68, 0x65, 0x69, 0x74, 0x5f, 0x48, 0x41, 0x4c, 0x42, 0x4a,
	0x41, 0x48, 0x52, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x5a, 0x65, 0x69, 0x74, 0x65, 0x69, 0x6e,
	0x68, 0x65, 0x69, 0x74, 0x5f, 0x4a, 0x41, 0x48, 0x52, 0x10, 0x09, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x2a, 0x5e, 0x0a, 0x0d, 0x5a,
	0x65, 0x69, 0x74, 0x72, 0x65, 0x69, 0x68, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x47, 0x53, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x47, 0x53, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x5a, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x10, 0x06, 0x1a, 0x0e, 0xea, 0x40, 0x0b,
	0x1a, 0x09, 0x42, 0x4f, 0x34, 0x45, 0x2e, 0x45, 0x4e, 0x55, 0x4d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bo4e_proto_rawDescOnce sync.Once
	file_bo4e_proto_rawDescData = file_bo4e_proto_rawDesc
)

func file_bo4e_proto_rawDescGZIP() []byte {
	file_bo4e_proto_rawDescOnce.Do(func() {
		file_bo4e_proto_rawDescData = protoimpl.X.CompressGZIP(file_bo4e_proto_rawDescData)
	})
	return file_bo4e_proto_rawDescData
}

var file_bo4e_proto_enumTypes = make([]protoimpl.EnumInfo, 60)
var file_bo4e_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_bo4e_proto_goTypes = []interface{}{
	(AbgabeArt)(0),                        // 0: bo4e.AbgabeArt
	(Angebotsstatus)(0),                   // 1: bo4e.Angebotsstatus
	(Anrede)(0),                           // 2: bo4e.Anrede
	(ArithmetischeOperation)(0),           // 3: bo4e.ArithmetischeOperation
	(AufAbschlagstyp)(0),                  // 4: bo4e.AufAbschlagstyp
	(BDEWArtikelnummer)(0),                // 5: bo4e.BDEWArtikelnummer
	(Bearbeitungsstatus)(0),               // 6: bo4e.Bearbeitungsstatus
	(Bemessungsgroesse)(0),                // 7: bo4e.Bemessungsgroesse
	(Bilanzierungsmethode)(0),             // 8: bo4e.Bilanzierungsmethode
	(Dienstleistungstyp)(0),               // 9: bo4e.Dienstleistungstyp
	(Energierichtung)(0),                  // 10: bo4e.Energierichtung
	(Fernschaltung)(0),                    // 11: bo4e.Fernschaltung
	(Gasqualitaet)(0),                     // 12: bo4e.Gasqualitaet
	(Gebiettyp)(0),                        // 13: bo4e.Gebiettyp
	(Geraetemerkmal)(0),                   // 14: bo4e.Geraetemerkmal
	(Geraetetyp)(0),                       // 15: bo4e.Geraetetyp
	(Geschaeftspartnerrolle)(0),           // 16: bo4e.Geschaeftspartnerrolle
	(Gueltigkeitstyp)(0),                  // 17: bo4e.Gueltigkeitstyp
	(Kalkulationsmethode)(0),              // 18: bo4e.Kalkulationsmethode
	(Kontaktart)(0),                       // 19: bo4e.Kontaktart
	(Kostenklasse)(0),                     // 20: bo4e.Kostenklasse
	(Landescode)(0),                       // 21: bo4e.Landescode
	(Leistungstyp)(0),                     // 22: bo4e.Leistungstyp
	(Lokationstyp)(0),                     // 23: bo4e.Lokationstyp
	(Marktrolle)(0),                       // 24: bo4e.Marktrolle
	(Mengeneinheit)(0),                    // 25: bo4e.Mengeneinheit
	(Mengenoperator)(0),                   // 26: bo4e.Mengenoperator
	(Messwerterfassung)(0),                // 27: bo4e.Messwerterfassung
	(Netzebene)(0),                        // 28: bo4e.Netzebene
	(NetznutzungsVertrag)(0),              // 29: bo4e.NetznutzungsVertrag
	(Netznutzungsabrechnungsgrundlage)(0), // 30: bo4e.Netznutzungsabrechnungsgrundlage
	(Netznutzungsabrechnungsvariante)(0),  // 31: bo4e.Netznutzungsabrechnungsvariante
	(Netznutzungszahler)(0),               // 32: bo4e.Netznutzungszahler
	(Preisstatus)(0),                      // 33: bo4e.Preisstatus
	(Prioritaet)(0),                       // 34: bo4e.Prioritaet
	(RechnungspositionsStatus)(0),         // 35: bo4e.RechnungspositionsStatus
	(Rechnungsstatus)(0),                  // 36: bo4e.Rechnungsstatus
	(Rechnungstyp)(0),                     // 37: bo4e.Rechnungstyp
	(Regionskriteriumtyp)(0),              // 38: bo4e.Regionskriteriumtyp
	(Rufnummernart)(0),                    // 39: bo4e.Rufnummernart
	(Schwachlastfaehig)(0),                // 40: bo4e.Schwachlastfaehig
	(Sparte)(0),                           // 41: bo4e.Sparte
	(Steuerkennzeichen)(0),                // 42: bo4e.Steuerkennzeichen
	(Tarifart)(0),                         // 43: bo4e.Tarifart
	(Tarifzeit)(0),                        // 44: bo4e.Tarifzeit
	(Titel)(0),                            // 45: bo4e.Titel
	(Unterbrechbarkeit)(0),                // 46: bo4e.Unterbrechbarkeit
	(Verbrauchsart)(0),                    // 47: bo4e.Verbrauchsart
	(Verbrauchsmengetyp)(0),               // 48: bo4e.Verbrauchsmengetyp
	(Vertragsart)(0),                      // 49: bo4e.Vertragsart
	(Vertragstatus)(0),                    // 50: bo4e.Vertragstatus
	(Verwendungszweck)(0),                 // 51: bo4e.Verwendungszweck
	(Waehrungscode)(0),                    // 52: bo4e.Waehrungscode
	(Waehrungseinheit)(0),                 // 53: bo4e.Waehrungseinheit
	(Waermenutzung)(0),                    // 54: bo4e.Waermenutzung
	(Wertermittlungsverfahren)(0),         // 55: bo4e.Wertermittlungsverfahren
	(Zaehlerauspraegung)(0),               // 56: bo4e.Zaehlerauspraegung
	(Zaehlertyp)(0),                       // 57: bo4e.Zaehlertyp
	(Zeiteinheit)(0),                      // 58: bo4e.Zeiteinheit
	(Zeitreihentyp)(0),                    // 59: bo4e.Zeitreihentyp
	(*Adresse)(nil),                       // 60: bo4e.Adresse
	(*Angebot)(nil),                       // 61: bo4e.Angebot
	(*Angebotsposition)(nil),              // 62: bo4e.Angebotsposition
	(*Angebotsteil)(nil),                  // 63: bo4e.Angebotsteil
	(*Angebotsvariante)(nil),              // 64: bo4e.Angebotsvariante
	(*Ansprechpartner)(nil),               // 65: bo4e.Ansprechpartner
	(*Aufgabe)(nil),                       // 66: bo4e.Aufgabe
	(*Benachrichtigung)(nil),              // 67: bo4e.Benachrichtigung
	(*Betrag)(nil),                        // 68: bo4e.Betrag
	(*DateTimeOffset)(nil),                // 69: bo4e.DateTimeOffset
	(*Dienstleistung)(nil),                // 70: bo4e.Dienstleistung
	(*Energiemenge)(nil),                  // 71: bo4e.Energiemenge
	(*GenericStringStringInfo)(nil),       // 72: bo4e.GenericStringStringInfo
	(*Geokoordinaten)(nil),                // 73: bo4e.Geokoordinaten
	(*Geraeteeigenschaften)(nil),          // 74: bo4e.Geraeteeigenschaften
	(*Geschaeftspartner)(nil),             // 75: bo4e.Geschaeftspartner
	(*Hardware)(nil),                      // 76: bo4e.Hardware
	(*Katasteradresse)(nil),               // 77: bo4e.Katasteradresse
	(*Konzessionsabgabe)(nil),             // 78: bo4e.Konzessionsabgabe
	(*Kosten)(nil),                        // 79: bo4e.Kosten
	(*Kostenblock)(nil),                   // 80: bo4e.Kostenblock
	(*Kostenposition)(nil),                // 81: bo4e.Kostenposition
	(*Marktlokation)(nil),                 // 82: bo4e.Marktlokation
	(*MarktpartnerDetails)(nil),           // 83: bo4e.MarktpartnerDetails
	(*Menge)(nil),                         // 84: bo4e.Menge
	(*Messlokation)(nil),                  // 85: bo4e.Messlokation
	(*Messlokationszuordnung)(nil),        // 86: bo4e.Messlokationszuordnung
	(*Notiz)(nil),                         // 87: bo4e.Notiz
	(*PositionsAufAbschlag)(nil),          // 88: bo4e.PositionsAufAbschlag
	(*Preis)(nil),                         // 89: bo4e.Preis
	(*Preisblatt)(nil),                    // 90: bo4e.Preisblatt
	(*Preisposition)(nil),                 // 91: bo4e.Preisposition
	(*Preisstaffel)(nil),                  // 92: bo4e.Preisstaffel
	(*Rechnung)(nil),                      // 93: bo4e.Rechnung
	(*Rechnungsposition)(nil),             // 94: bo4e.Rechnungsposition
	(*Region)(nil),                        // 95: bo4e.Region
	(*Regionskriterium)(nil),              // 96: bo4e.Regionskriterium
	(*Rufnummer)(nil),                     // 97: bo4e.Rufnummer
	(*Sigmoidparameter)(nil),              // 98: bo4e.Sigmoidparameter
	(*Steuerbetrag)(nil),                  // 99: bo4e.Steuerbetrag
	(*Unterschrift)(nil),                  // 100: bo4e.Unterschrift
	(*Verbrauch)(nil),                     // 101: bo4e.Verbrauch
	(*Vertrag)(nil),                       // 102: bo4e.Vertrag
	(*Vertragskonditionen)(nil),           // 103: bo4e.Vertragskonditionen
	(*Vertragsteil)(nil),                  // 104: bo4e.Vertragsteil
	(*Zaehler)(nil),                       // 105: bo4e.Zaehler
	(*Zaehlwerk)(nil),                     // 106: bo4e.Zaehlwerk
	(*Zeitraum)(nil),                      // 107: bo4e.Zeitraum
	(*Zustaendigkeit)(nil),                // 108: bo4e.Zustaendigkeit
	nil,                                   // 109: bo4e.Geraeteeigenschaften.ParameterEntry
	(*timestamppb.Timestamp)(nil),         // 110: google.protobuf.Timestamp
}
var file_bo4e_proto_depIdxs = []int32{
	21,  // 0: bo4e.Adresse.Landescode:type_name -> bo4e.Landescode
	69,  // 1: bo4e.Angebot.Angebotsdatum:type_name -> bo4e.DateTimeOffset
	41,  // 2: bo4e.Angebot.Sparte:type_name -> bo4e.Sparte
	69,  // 3: bo4e.Angebot.Bindefrist:type_name -> bo4e.DateTimeOffset
	75,  // 4: bo4e.Angebot.Angebotgeber:type_name -> bo4e.Geschaeftspartner
	75,  // 5: bo4e.Angebot.Angebotnehmer:type_name -> bo4e.Geschaeftspartner
	65,  // 6: bo4e.Angebot.UnterzeichnerAngebotsnehmer:type_name -> bo4e.Ansprechpartner
	65,  // 7: bo4e.Angebot.UnterzeichnerAngebotsgeber:type_name -> bo4e.Ansprechpartner
	64,  // 8: bo4e.Angebot.Varianten:type_name -> bo4e.Angebotsvariante
	84,  // 9: bo4e.Angebotsposition.Positionsmenge:type_name -> bo4e.Menge
	89,  // 10: bo4e.Angebotsposition.Positionspreis:type_name -> bo4e.Preis
	68,  // 11: bo4e.Angebotsposition.Positionsbetrag:type_name -> bo4e.Betrag
	82,  // 12: bo4e.Angebotsteil.Lieferstellenangebotsteil:type_name -> bo4e.Marktlokation
	84,  // 13: bo4e.Angebotsteil.Gesamtmengeangebotsteil:type_name -> bo4e.Menge
	68,  // 14: bo4e.Angebotsteil.Gesamtkostenangebotsteil:type_name -> bo4e.Betrag
	62,  // 15: bo4e.Angebotsteil.Positionen:type_name -> bo4e.Angebotsposition
	1,   // 16: bo4e.Angebotsvariante.Angebotsstatus:type_name -> bo4e.Angebotsstatus
	69,  // 17: bo4e.Angebotsvariante.Erstelldatum:type_name -> bo4e.DateTimeOffset
	69,  // 18: bo4e.Angebotsvariante.Bindefrist:type_name -> bo4e.DateTimeOffset
	84,  // 19: bo4e.Angebotsvariante.Gesamtmenge:type_name -> bo4e.Menge
	68,  // 20: bo4e.Angebotsvariante.Gesamtkosten:type_name -> bo4e.Betrag
	63,  // 21: bo4e.Angebotsvariante.Teile:type_name -> bo4e.Angebotsteil
	2,   // 22: bo4e.Ansprechpartner.Anrede:type_name -> bo4e.Anrede
	45,  // 23: bo4e.Ansprechpartner.Titel:type_name -> bo4e.Titel
	75,  // 24: bo4e.Ansprechpartner.Geschaeftspartner:type_name -> bo4e.Geschaeftspartner
	60,  // 25: bo4e.Ansprechpartner.Adresse:type_name -> bo4e.Adresse
	97,  // 26: bo4e.Ansprechpartner.Rufnummern:type_name -> bo4e.Rufnummer
	108, // 27: bo4e.Ansprechpartner.Zustaendigkeit:type_name -> bo4e.Zustaendigkeit
	69,  // 28: bo4e.Aufgabe.Deadline:type_name -> bo4e.DateTimeOffset
	69,  // 29: bo4e.Aufgabe.Ausfuehrungszeitpunkt:type_name -> bo4e.DateTimeOffset
	34,  // 30: bo4e.Benachrichtigung.Prioritaet:type_name -> bo4e.Prioritaet
	6,   // 31: bo4e.Benachrichtigung.Bearbeitungsstatus:type_name -> bo4e.Bearbeitungsstatus
	69,  // 32: bo4e.Benachrichtigung.ErstellungsZeitpunkt:type_name -> bo4e.DateTimeOffset
	87,  // 33: bo4e.Benachrichtigung.Notizen:type_name -> bo4e.Notiz
	69,  // 34: bo4e.Benachrichtigung.Deadline:type_name -> bo4e.DateTimeOffset
	66,  // 35: bo4e.Benachrichtigung.Aufgaben:type_name -> bo4e.Aufgabe
	72,  // 36: bo4e.Benachrichtigung.Infos:type_name -> bo4e.GenericStringStringInfo
	52,  // 37: bo4e.Betrag.Waehrung:type_name -> bo4e.Waehrungscode
	9,   // 38: bo4e.Dienstleistung.Dienstleistungstyp:type_name -> bo4e.Dienstleistungstyp
	23,  // 39: bo4e.Energiemenge.LokationsTyp:type_name -> bo4e.Lokationstyp
	101, // 40: bo4e.Energiemenge.Energieverbrauch:type_name -> bo4e.Verbrauch
	15,  // 41: bo4e.Geraeteeigenschaften.Geraetetyp:type_name -> bo4e.Geraetetyp
	14,  // 42: bo4e.Geraeteeigenschaften.Geraetemerkmal:type_name -> bo4e.Geraetemerkmal
	109, // 43: bo4e.Geraeteeigenschaften.Parameter:type_name -> bo4e.Geraeteeigenschaften.ParameterEntry
	2,   // 44: bo4e.Geschaeftspartner.Anrede:type_name -> bo4e.Anrede
	19,  // 45: bo4e.Geschaeftspartner.Kontaktweg:type_name -> bo4e.Kontaktart
	16,  // 46: bo4e.Geschaeftspartner.Geschaeftspartnerrolle:type_name -> bo4e.Geschaeftspartnerrolle
	60,  // 47: bo4e.Geschaeftspartner.Partneradresse:type_name -> bo4e.Adresse
	15,  // 48: bo4e.Hardware.Geraetetyp:type_name -> bo4e.Geraetetyp
	74,  // 49: bo4e.Hardware.Geraeteeigenschaften:type_name -> bo4e.Geraeteeigenschaften
	0,   // 50: bo4e.Konzessionsabgabe.Satz:type_name -> bo4e.AbgabeArt
	20,  // 51: bo4e.Kosten.Kostenklasse:type_name -> bo4e.Kostenklasse
	107, // 52: bo4e.Kosten.Gueltigkeit:type_name -> bo4e.Zeitraum
	68,  // 53: bo4e.Kosten.SummeKosten:type_name -> bo4e.Betrag
	80,  // 54: bo4e.Kosten.Kostenbloecke:type_name -> bo4e.Kostenblock
	81,  // 55: bo4e.Kosten.Kostenpositionen:type_name -> bo4e.Kostenposition
	68,  // 56: bo4e.Kostenblock.SummeKostenblock:type_name -> bo4e.Betrag
	81,  // 57: bo4e.Kostenblock.Kostenpositionen:type_name -> bo4e.Kostenposition
	69,  // 58: bo4e.Kostenposition.Von:type_name -> bo4e.DateTimeOffset
	69,  // 59: bo4e.Kostenposition.Bis:type_name -> bo4e.DateTimeOffset
	84,  // 60: bo4e.Kostenposition.Menge:type_name -> bo4e.Menge
	84,  // 61: bo4e.Kostenposition.Zeitmenge:type_name -> bo4e.Menge
	89,  // 62: bo4e.Kostenposition.Einzelpreis:type_name -> bo4e.Preis
	68,  // 63: bo4e.Kostenposition.BetragKostenposition:type_name -> bo4e.Betrag
	41,  // 64: bo4e.Marktlokation.Sparte:type_name -> bo4e.Sparte
	10,  // 65: bo4e.Marktlokation.Energierichtung:type_name -> bo4e.Energierichtung
	8,   // 66: bo4e.Marktlokation.Bilanzierungsmethode:type_name -> bo4e.Bilanzierungsmethode
	47,  // 67: bo4e.Marktlokation.Verbrauchsart:type_name -> bo4e.Verbrauchsart
	28,  // 68: bo4e.Marktlokation.Netzebene:type_name -> bo4e.Netzebene
	13,  // 69: bo4e.Marktlokation.GebietType:type_name -> bo4e.Gebiettyp
	12,  // 70: bo4e.Marktlokation.Gasqualitaet:type_name -> bo4e.Gasqualitaet
	75,  // 71: bo4e.Marktlokation.Endkunde:type_name -> bo4e.Geschaeftspartner
	60,  // 72: bo4e.Marktlokation.Lokationsadresse:type_name -> bo4e.Adresse
	73,  // 73: bo4e.Marktlokation.Geoadresse:type_name -> bo4e.Geokoordinaten
	77,  // 74: bo4e.Marktlokation.Katasterinformation:type_name -> bo4e.Katasteradresse
	86,  // 75: bo4e.Marktlokation.ZugehoerigeMesslokationen:type_name -> bo4e.Messlokationszuordnung
	83,  // 76: bo4e.Marktlokation.Marktrollen:type_name -> bo4e.MarktpartnerDetails
	59,  // 77: bo4e.Marktlokation.Zeitreihentyp:type_name -> bo4e.Zeitreihentyp
	106, // 78: bo4e.Marktlokation.Zaehlwerke:type_name -> bo4e.Zaehlwerk
	101, // 79: bo4e.Marktlokation.Verbrauchsmenge:type_name -> bo4e.Verbrauch
	85,  // 80: bo4e.Marktlokation.Messlokationen:type_name -> bo4e.Messlokation
	24,  // 81: bo4e.MarktpartnerDetails.marktrolle:type_name -> bo4e.Marktrolle
	25,  // 82: bo4e.Menge.Einheit:type_name -> bo4e.Mengeneinheit
	41,  // 83: bo4e.Messlokation.Sparte:type_name -> bo4e.Sparte
	28,  // 84: bo4e.Messlokation.NetzebeneMessung:type_name -> bo4e.Netzebene
	60,  // 85: bo4e.Messlokation.Messadresse:type_name -> bo4e.Adresse
	73,  // 86: bo4e.Messlokation.Geoadresse:type_name -> bo4e.Geokoordinaten
	77,  // 87: bo4e.Messlokation.Katasterinformation:type_name -> bo4e.Katasteradresse
	76,  // 88: bo4e.Messlokation.Geraete:type_name -> bo4e.Hardware
	70,  // 89: bo4e.Messlokation.Messdienstleistung:type_name -> bo4e.Dienstleistung
	105, // 90: bo4e.Messlokation.Messlokationszaehler:type_name -> bo4e.Zaehler
	8,   // 91: bo4e.Messlokation.Bilanzierungsmethode:type_name -> bo4e.Bilanzierungsmethode
	83,  // 92: bo4e.Messlokation.Marktrollen:type_name -> bo4e.MarktpartnerDetails
	12,  // 93: bo4e.Messlokation.Gasqualitaet:type_name -> bo4e.Gasqualitaet
	3,   // 94: bo4e.Messlokationszuordnung.Arithmetik:type_name -> bo4e.ArithmetischeOperation
	69,  // 95: bo4e.Messlokationszuordnung.GueltigSeit:type_name -> bo4e.DateTimeOffset
	69,  // 96: bo4e.Messlokationszuordnung.GueltigBis:type_name -> bo4e.DateTimeOffset
	69,  // 97: bo4e.Notiz.Zeitpunkt:type_name -> bo4e.DateTimeOffset
	4,   // 98: bo4e.PositionsAufAbschlag.AufAbschlagstyp:type_name -> bo4e.AufAbschlagstyp
	53,  // 99: bo4e.PositionsAufAbschlag.AufAbschlagswaehrung:type_name -> bo4e.Waehrungseinheit
	53,  // 100: bo4e.Preis.Einheit:type_name -> bo4e.Waehrungseinheit
	25,  // 101: bo4e.Preis.Bezugswert:type_name -> bo4e.Mengeneinheit
	33,  // 102: bo4e.Preis.Status:type_name -> bo4e.Preisstatus
	107, // 103: bo4e.Preisblatt.Gueltigkeit:type_name -> bo4e.Zeitraum
	91,  // 104: bo4e.Preisblatt.Preispositionen:type_name -> bo4e.Preisposition
	18,  // 105: bo4e.Preisposition.Berechnungsmethode:type_name -> bo4e.Kalkulationsmethode
	22,  // 106: bo4e.Preisposition.Leistungstyp:type_name -> bo4e.Leistungstyp
	53,  // 107: bo4e.Preisposition.Preiseinheit:type_name -> bo4e.Waehrungseinheit
	25,  // 108: bo4e.Preisposition.Bezugsgroesse:type_name -> bo4e.Mengeneinheit
	58,  // 109: bo4e.Preisposition.Zeitbasis:type_name -> bo4e.Zeiteinheit
	44,  // 110: bo4e.Preisposition.Tarifzeit:type_name -> bo4e.Tarifzeit
	5,   // 111: bo4e.Preisposition.BdewArtikelnummer:type_name -> bo4e.BDEWArtikelnummer
	7,   // 112: bo4e.Preisposition.Zonungsgroesse:type_name -> bo4e.Bemessungsgroesse
	88,  // 113: bo4e.Preisposition.Zu_abschlaege:type_name -> bo4e.PositionsAufAbschlag
	92,  // 114: bo4e.Preisposition.Preisstaffeln:type_name -> bo4e.Preisstaffel
	98,  // 115: bo4e.Preisstaffel.Sigmoidparameter:type_name -> bo4e.Sigmoidparameter
	36,  // 116: bo4e.Rechnung.Rechnungsstatus:type_name -> bo4e.Rechnungsstatus
	69,  // 117: bo4e.Rechnung.Rechnungsdatum:type_name -> bo4e.DateTimeOffset
	69,  // 118: bo4e.Rechnung.Faelligkeitsdatum:type_name -> bo4e.DateTimeOffset
	37,  // 119: bo4e.Rechnung.Rechnungsstyp:type_name -> bo4e.Rechnungstyp
	107, // 120: bo4e.Rechnung.Rechnungsperiode:type_name -> bo4e.Zeitraum
	75,  // 121: bo4e.Rechnung.Rechnungsersteller:type_name -> bo4e.Geschaeftspartner
	75,  // 122: bo4e.Rechnung.Rechnungsempfaenger:type_name -> bo4e.Geschaeftspartner
	68,  // 123: bo4e.Rechnung.Gesamtnetto:type_name -> bo4e.Betrag
	68,  // 124: bo4e.Rechnung.Gesamtsteuer:type_name -> bo4e.Betrag
	68,  // 125: bo4e.Rechnung.Gesamtbrutto:type_name -> bo4e.Betrag
	68,  // 126: bo4e.Rechnung.Vorausgezahlt:type_name -> bo4e.Betrag
	68,  // 127: bo4e.Rechnung.RabattBrutto:type_name -> bo4e.Betrag
	68,  // 128: bo4e.Rechnung.Zuzahlen:type_name -> bo4e.Betrag
	99,  // 129: bo4e.Rechnung.Steuerbetraege:type_name -> bo4e.Steuerbetrag
	94,  // 130: bo4e.Rechnung.Rechnungspositionen:type_name -> bo4e.Rechnungsposition
	69,  // 131: bo4e.Rechnungsposition.LieferungVon:type_name -> bo4e.DateTimeOffset
	69,  // 132: bo4e.Rechnungsposition.LieferungBis:type_name -> bo4e.DateTimeOffset
	25,  // 133: bo4e.Rechnungsposition.Zeiteinheit:type_name -> bo4e.Mengeneinheit
	5,   // 134: bo4e.Rechnungsposition.Artikelnummer:type_name -> bo4e.BDEWArtikelnummer
	84,  // 135: bo4e.Rechnungsposition.PositionsMenge:type_name -> bo4e.Menge
	84,  // 136: bo4e.Rechnungsposition.ZeitbezogeneMenge:type_name -> bo4e.Menge
	89,  // 137: bo4e.Rechnungsposition.Einzelpreis:type_name -> bo4e.Preis
	68,  // 138: bo4e.Rechnungsposition.TeilsummeNetto:type_name -> bo4e.Betrag
	68,  // 139: bo4e.Rechnungsposition.TeilrabattNetto:type_name -> bo4e.Betrag
	99,  // 140: bo4e.Rechnungsposition.TeilsummeSteuer:type_name -> bo4e.Steuerbetrag
	35,  // 141: bo4e.Rechnungsposition.Status:type_name -> bo4e.RechnungspositionsStatus
	96,  // 142: bo4e.Region.PositivListe:type_name -> bo4e.Regionskriterium
	96,  // 143: bo4e.Region.NegativListe:type_name -> bo4e.Regionskriterium
	17,  // 144: bo4e.Regionskriterium.Gueltigkeitstyp:type_name -> bo4e.Gueltigkeitstyp
	41,  // 145: bo4e.Regionskriterium.Sparte:type_name -> bo4e.Sparte
	26,  // 146: bo4e.Regionskriterium.Mengenoperator:type_name -> bo4e.Mengenoperator
	38,  // 147: bo4e.Regionskriterium.Regionskriteriumtyp:type_name -> bo4e.Regionskriteriumtyp
	39,  // 148: bo4e.Rufnummer.Nummerntyp:type_name -> bo4e.Rufnummernart
	42,  // 149: bo4e.Steuerbetrag.Steuerkennzeichen:type_name -> bo4e.Steuerkennzeichen
	52,  // 150: bo4e.Steuerbetrag.Waehrung:type_name -> bo4e.Waehrungscode
	69,  // 151: bo4e.Unterschrift.Datum:type_name -> bo4e.DateTimeOffset
	110, // 152: bo4e.Verbrauch.Startdatum:type_name -> google.protobuf.Timestamp
	110, // 153: bo4e.Verbrauch.Enddatum:type_name -> google.protobuf.Timestamp
	55,  // 154: bo4e.Verbrauch.Wertermittlungsverfahren:type_name -> bo4e.Wertermittlungsverfahren
	25,  // 155: bo4e.Verbrauch.Einheit:type_name -> bo4e.Mengeneinheit
	48,  // 156: bo4e.Verbrauch.Type:type_name -> bo4e.Verbrauchsmengetyp
	49,  // 157: bo4e.Vertrag.Vertragsart:type_name -> bo4e.Vertragsart
	50,  // 158: bo4e.Vertrag.Vertragstatus:type_name -> bo4e.Vertragstatus
	41,  // 159: bo4e.Vertrag.Sparte:type_name -> bo4e.Sparte
	69,  // 160: bo4e.Vertrag.Vertragsbeginn:type_name -> bo4e.DateTimeOffset
	69,  // 161: bo4e.Vertrag.Vertragsende:type_name -> bo4e.DateTimeOffset
	75,  // 162: bo4e.Vertrag.Vertragspartner1:type_name -> bo4e.Geschaeftspartner
	75,  // 163: bo4e.Vertrag.Vertragspartner2:type_name -> bo4e.Geschaeftspartner
	100, // 164: bo4e.Vertrag.Unterzeichnervp1:type_name -> bo4e.Unterschrift
	100, // 165: bo4e.Vertrag.Unterzeichnervp2:type_name -> bo4e.Unterschrift
	103, // 166: bo4e.Vertrag.Vertragskonditionen:type_name -> bo4e.Vertragskonditionen
	104, // 167: bo4e.Vertrag.Vertragsteile:type_name -> bo4e.Vertragsteil
	75,  // 168: bo4e.Vertrag.Korrespondenzpartner:type_name -> bo4e.Geschaeftspartner
	107, // 169: bo4e.Vertragskonditionen.Vertragslaufzeit:type_name -> bo4e.Zeitraum
	107, // 170: bo4e.Vertragskonditionen.Kuendigungsfrist:type_name -> bo4e.Zeitraum
	107, // 171: bo4e.Vertragskonditionen.Vertragsverlaengerung:type_name -> bo4e.Zeitraum
	107, // 172: bo4e.Vertragskonditionen.Abschlagszyklus:type_name -> bo4e.Zeitraum
	69,  // 173: bo4e.Vertragskonditionen.StartAbrechnungsjahr:type_name -> bo4e.DateTimeOffset
	107, // 174: bo4e.Vertragskonditionen.GeplanteTurnusablesung:type_name -> bo4e.Zeitraum
	107, // 175: bo4e.Vertragskonditionen.Netznutzungsabrechnung:type_name -> bo4e.Zeitraum
	29,  // 176: bo4e.Vertragskonditionen.Netznutzungsvertrag:type_name -> bo4e.NetznutzungsVertrag
	32,  // 177: bo4e.Vertragskonditionen.Netznutzungszahler:type_name -> bo4e.Netznutzungszahler
	31,  // 178: bo4e.Vertragskonditionen.Netznutzungsabrechnungsvariante:type_name -> bo4e.Netznutzungsabrechnungsvariante
	30,  // 179: bo4e.Vertragskonditionen.Netznutzungsabrechnungsgrundlage:type_name -> bo4e.Netznutzungsabrechnungsgrundlage
	69,  // 180: bo4e.Vertragsteil.Vertragsteilbeginn:type_name -> bo4e.DateTimeOffset
	69,  // 181: bo4e.Vertragsteil.Vertragsteilende:type_name -> bo4e.DateTimeOffset
	84,  // 182: bo4e.Vertragsteil.VertraglichFixierteMenge:type_name -> bo4e.Menge
	84,  // 183: bo4e.Vertragsteil.MinimaleAbnahmemenge:type_name -> bo4e.Menge
	84,  // 184: bo4e.Vertragsteil.MaximaleAbnahmemenge:type_name -> bo4e.Menge
	84,  // 185: bo4e.Vertragsteil.Jahresverbrauchsprognose:type_name -> bo4e.Menge
	84,  // 186: bo4e.Vertragsteil.Kundenwert:type_name -> bo4e.Menge
	41,  // 187: bo4e.Zaehler.Sparte:type_name -> bo4e.Sparte
	56,  // 188: bo4e.Zaehler.Zaehlerauspraegung:type_name -> bo4e.Zaehlerauspraegung
	57,  // 189: bo4e.Zaehler.Zaehlertyp:type_name -> bo4e.Zaehlertyp
	43,  // 190: bo4e.Zaehler.Tarifart:type_name -> bo4e.Tarifart
	69,  // 191: bo4e.Zaehler.EichungBis:type_name -> bo4e.DateTimeOffset
	69,  // 192: bo4e.Zaehler.LetzteEichung:type_name -> bo4e.DateTimeOffset
	106, // 193: bo4e.Zaehler.Zaehlwerke:type_name -> bo4e.Zaehlwerk
	75,  // 194: bo4e.Zaehler.Zaehlerhersteller:type_name -> bo4e.Geschaeftspartner
	11,  // 195: bo4e.Zaehler.Fernschaltung:type_name -> bo4e.Fernschaltung
	27,  // 196: bo4e.Zaehler.Messwerterfassung:type_name -> bo4e.Messwerterfassung
	10,  // 197: bo4e.Zaehlwerk.Richtung:type_name -> bo4e.Energierichtung
	25,  // 198: bo4e.Zaehlwerk.Einheit:type_name -> bo4e.Mengeneinheit
	40,  // 199: bo4e.Zaehlwerk.Schwachlastfaehig:type_name -> bo4e.Schwachlastfaehig
	51,  // 200: bo4e.Zaehlwerk.Verwendungszwecke:type_name -> bo4e.Verwendungszweck
	47,  // 201: bo4e.Zaehlwerk.Verbrauchsart:type_name -> bo4e.Verbrauchsart
	46,  // 202: bo4e.Zaehlwerk.Unterbrechbarkeit:type_name -> bo4e.Unterbrechbarkeit
	54,  // 203: bo4e.Zaehlwerk.Waermenutzung:type_name -> bo4e.Waermenutzung
	78,  // 204: bo4e.Zaehlwerk.Konzessionsabgabe:type_name -> bo4e.Konzessionsabgabe
	58,  // 205: bo4e.Zeitraum.Einheit:type_name -> bo4e.Zeiteinheit
	69,  // 206: bo4e.Zeitraum.Startdatum:type_name -> bo4e.DateTimeOffset
	69,  // 207: bo4e.Zeitraum.Enddatum:type_name -> bo4e.DateTimeOffset
	208, // [208:208] is the sub-list for method output_type
	208, // [208:208] is the sub-list for method input_type
	208, // [208:208] is the sub-list for extension type_name
	208, // [208:208] is the sub-list for extension extendee
	0,   // [0:208] is the sub-list for field type_name
}

func init() { file_bo4e_proto_init() }
func file_bo4e_proto_init() {
	if File_bo4e_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bo4e_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adresse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Angebot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Angebotsposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Angebotsteil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Angebotsvariante); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ansprechpartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aufgabe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Benachrichtigung); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Betrag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dienstleistung); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Energiemenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericStringStringInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geokoordinaten); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geraeteeigenschaften); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geschaeftspartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Katasteradresse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Konzessionsabgabe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kosten); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kostenblock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kostenposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marktlokation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarktpartnerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Menge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Messlokation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Messlokationszuordnung); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsAufAbschlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preisblatt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preisposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preisstaffel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rechnung); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rechnungsposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Regionskriterium); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rufnummer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sigmoidparameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Steuerbetrag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unterschrift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verbrauch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertrag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertragskonditionen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertragsteil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zaehler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zaehlwerk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zeitraum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bo4e_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zustaendigkeit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bo4e_proto_rawDesc,
			NumEnums:      60,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bo4e_proto_goTypes,
		DependencyIndexes: file_bo4e_proto_depIdxs,
		EnumInfos:         file_bo4e_proto_enumTypes,
		MessageInfos:      file_bo4e_proto_msgTypes,
	}.Build()
	File_bo4e_proto = out.File
	file_bo4e_proto_rawDesc = nil
	file_bo4e_proto_goTypes = nil
	file_bo4e_proto_depIdxs = nil
}
