<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BO4E.Extensions</name>
    </assembly>
    <members>
        <member name="T:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension">
            <summary>Additional methods for <see cref="N:BO4E.Extensions.BusinessObjects.Benachrichtigung"/>.</summary>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension.Has(BO4E.BO.Benachrichtigung,System.String,System.String)">
            <summary>
            checks if <see cref="F:BO4E.BO.Benachrichtigung.infos"/> contains a key value pair
            </summary>
            <param name="b"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension.Has(BO4E.BO.Benachrichtigung,BO4E.COM.GenericStringStringInfo)">
            <summary>
            checks if <paramref name="b"/> contains a key value pair specified in <paramref name="gssi"/> in <see cref="F:BO4E.BO.Benachrichtigung.infos"/>
            </summary>
            <param name="b"></param>
            <param name="gssi"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension.Has(BO4E.BO.Benachrichtigung,System.String)">
            <summary>
            check if a specific info exists
            </summary>
            <param name="b">Benachrichtigung</param>
            <param name="key">key to be checked</param>
            <returns>true if key is in <see cref="F:BO4E.BO.Benachrichtigung.infos"/></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension.Has``1(BO4E.BO.Benachrichtigung,System.String,System.Predicate{``0},System.Boolean,System.ComponentModel.TypeConverter)">
            <summary>
            checks if Benachrichtigung <paramref name="b"/> has an entry with key <paramref name="keyName"/> in <see cref="F:BO4E.BO.Benachrichtigung.infos"/> which fulfills a predicate
            </summary>
            <typeparam name="T">expected type of the info property</typeparam>
            <param name="b">Benachrichtigung object</param>
            <param name="keyName">key name of the info property</param>
            <param name="predicate"></param>
            <param name="passByDefault">defines default behaviour, e.g. if no such key is present</param>
            <param name="typeConverter">allows to provide an explicit type converter</param>
            <returns>true if there's an info object with given key <paramref name="keyName"/> of type <typeparamref name="T"/> fulfilling <paramref name="predicate"/> or there's no such property but <paramref name="passByDefault"/> is true</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Benachrichtigung.BenachrichtigungExtension.MoveInfosToUserProperties(BO4E.BO.Benachrichtigung,System.Boolean)">
            <summary>
            moves key value pairs from <see cref="F:BO4E.BO.Benachrichtigung.infos"/> to <see cref="F:BO4E.BO.BusinessObject.userProperties"/> for more conventient handling.
            </summary>
            <param name="b">Benachrichtigung</param>
            <param name="overwriteExistingKeys">set true to overwrite userProperties with same key</param>
        </member>
        <member name="T:BO4E.Extensions.BusinessObjects.BusinessObjectExtensions">
            <summary>
            common extensions for all BusinessObjects
            </summary>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.BusinessObjectExtensions.DeepClone``1(``0)">
            <summary>
            Create a deep copy of a Business Object
            </summary>
            <typeparam name="T">Type of the BusinessObject</typeparam>
            <param name="source">the BO that is copied</param>
            <returns>the deep copy</returns>
        </member>
        <member name="T:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension">
            <summary>Do calculations on top of an Energiemenge BO4E.</summary>
            <summary>Do calculations on top of an Energiemenge BO4E.</summary>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetZeitraum(BO4E.BO.Energiemenge)">
            <summary>
            Get Zeitraum covered by Energiemenge.
            </summary>
            <param name="menge">Energiemenge</param>
            <returns>Zeitraum ranging from the earliest <see cref="F:BO4E.COM.Verbrauch.startdatum"/> to the latest <see cref="F:BO4E.COM.Verbrauch.enddatum"/></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetTimeRange(BO4E.BO.Energiemenge)">
            <summary>
            Get TimeRange covery by Energiemenge
            </summary>
            <param name="menge">Energiemenge</param>
            <returns>TimeRange ranging from the earliest <see cref="F:BO4E.COM.Verbrauch.startdatum"/> to the latest <see cref="F:BO4E.COM.Verbrauch.enddatum"/></returns>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetTotalConsumption(BO4E.BO.Energiemenge)">
            <summary>
            Same as <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetTotalConsumption(BO4E.BO.Energiemenge,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)"/> but without autodetected parameters. 
            By default a the full length of the Energiemenge is taken into account.
            </summary>
            <param name="em">Energiemenge</param>
            <returns>Tuple of consumption value and unit of measurement</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetTotalConsumption(BO4E.BO.Energiemenge,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Get total consumption for given parameters
            </summary>
            <param name="em">Energiemenge</param>
            <param name="wev">type of measurement</param>
            <param name="obiskennzahl">OBIS</param>
            <param name="me">unit of measurement</param>
            <returns>consumption value</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetConsumption(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange)">
            <summary>
            Get consumption in given time reference frame. Trying to automatically determine parameters and forward to <see cref="!:BO4E.BO.Energiemenge.GetConsumption(BO.Energiemenge, TimeRange, Wertermittlungsverfahren, string, Mengeneinheit)"/>.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">time reference frame</param>
            <returns>Tuple of consumption value and automatically determined unit of measurement</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetConsumption(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Returns the consumption of a given kind of Mengeneinheit within the specified reference time range.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <param name="wev">Wertermittlungsverfahren</param>
            <param name="obiskennzahl">OBIS number</param>
            <param name="me">an extensive unit (e.g. "kWh")</param>
            <returns>the consumption within the give time slice <paramref name="reference"/> in the unit passed as <paramref name="me"/></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.Normalise(BO4E.BO.Energiemenge,System.Decimal)">
            <summary>
            normalise energiemenge-&gt;energieverbrauch consumption values to a given <paramref name="target"/> value
            </summary>
            <param name="em">Energiemenge</param>
            <param name="target">normalising constant (1.0 by default)</param>
            <returns>new Energiemenge object with normalised consumption values</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetLoad(BO4E.BO.Energiemenge,BO4E.ENUM.Mengeneinheit,System.DateTime)">
            <summary>
            Returns the load in an intensive unit for a given point in time.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="me">an intensive unit (e.g. "kW")</param>
            <param name="dt">point in time</param>
            <returns>load if Energiemenge BO contains value for specified date time<paramref name="dt"/>, null otherwise</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetAverage(BO4E.BO.Energiemenge)">
            <summary>
            Get Average (<see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetAverage(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)"/>)
            for a pure Energiemenge with automatically found parameters.
            </summary>
            <seealso cref="!:IsPure(BO4E.BO.Energiemenge)"/>
            <param name="em">Energiemenge</param>
            <returns>Tuple of average value and unit of measurement</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetAverage(BO4E.BO.Energiemenge,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Same as <see cref="!:GetAverage(Mengeneinheit, DateTime, DateTime)"/> but without specifying a time slice.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="wev">type of measurement</param>
            <param name="obiskennzahl">OBIS</param>
            <param name="me">an intensive or extensive unit</param>
            <returns>The average for the given Mengeneinheit for the Energiemenge object or null if there was no Verbrauch for the given Mengeneinheit.</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetAverage(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Get average of Mengeneinheit for given time interval
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <param name="wev">Wertermittlungsverfahren</param>
            <param name="obiskennzahl">OBIS</param>
            <param name="me">an extensive or intensive unit</param>
            <returns>the average value or null if no Verbrauch overlapped with the specified time interval</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetMissingTimeRanges(BO4E.BO.Energiemenge)">
            <summary>
            Get list of those time ranges within the energiemenge where there are gaps. 
            </summary>
            <param name="em">Energiemenge</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetMissingTimeRanges(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Get a list of those time ranges within a reference, where no energieverbrauch entries are defined.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference timeframe</param>
            <param name="wev">Wertermittlungsverfahren</param>
            <param name="obis">OBIS-Kennzahl</param>
            <param name="me">Mengeneinheit</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetMissingTimeRanges(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange)">
            <summary>
            <see cref="!:GetMissingTimeRanges(BO.Energiemenge, TimeRange, Wertermittlungsverfahren, string, Mengeneinheit)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsEvenlySpaced(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit,System.Boolean)">
            <summary>
            Test, if the single entries/intervals of the energieverbrauch array share the same duration and spacing in time.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <param name="wev">Wertermittlungsverfahren</param>
            <param name="obis">OBIS-Kennzahl</param>
            <param name="me">Mengeneinheit</param>
            <param name="allowGaps">set true to allow gaps</param>
            <returns>True, if all energieverbrauch entries have the same length and their start and enddatum are evenly spaced.
            Also true, if there less than 2 entries in the energieverbrauch array.</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsEvenlySpaced(BO4E.BO.Energiemenge,System.Boolean)">
            <summary>
            <see cref="!:IsEvenlySpaced(BO.Energiemenge, TimeRange, Wertermittlungsverfahren, string, Mengeneinheit, bool)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <param name="allowGaps"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetWevObisMeCombinations(BO4E.BO.Energiemenge)">
            <summary>
            get all (Wertermittlungsverfahren, OBIS, Mengeneinheit) tuples occurring in <paramref name="em"/>
            </summary>
            <param name="em">em</param>
            <returns>A Set of tuples of all (Wertermittlungsverfahren, OBIS, Mengeneinheit) combinations</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetJointCoverage(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange)">
            <summary>
            Get percentage of time range covered by all Wertermittlungsverfahren/OBIS/Mengeneinheit
            combinations, that are present in the Energiemenge-&gt;energieverbrauch array.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCoverage(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange)">
            <summary>
            Get percentage of time range covered by pure Energiemenge.
            </summary>
            <param name="em">pure Energiemenge</param>
            <param name="reference">time frame reference</param>
            <returns>value between 0 (only coverage for 1 point in time) and 1.0 (100% coverage)</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCoverage(BO4E.BO.Energiemenge)">
            <summary>
            Get percentage of full time range of energiemenge which is covered with values.
            </summary>
            <param name="em">Energiemenge</param>
            <returns>value between 0 (only coverage for 1 point in time) and 1.0 (100% coverage)</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCoverage(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit,System.Int32)">
            <summary>
            Get ratio of overlap between given Energiemenge and a reference.
            Method is basically just another name for <see cref="!:GetOverlapFactor(TimeRange, TimeRange, bool)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time range</param>
            <param name="obisKz">OBIS</param>
            <param name="mengeneinheit">unit of measurement</param>
            <param name="wev">type of measurement</param>
            <param name="decimalRounding">post decimals</param>
            <returns>value between 0 (no overlap) and 1.0 (100% overlap)</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsContinuous(BO4E.BO.Energiemenge)">
            <summary>
            Test, if the Energiemenge is continuous within its own min/max range.
            <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsContinuous(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff Energiemenge has defined value for every point in time t in
            min(energieverbrauch.startdatum) &lt;= t &lt; max(energieverbrauch.enddatum);
            false otherwise
            </returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsContinuous(BO4E.BO.Energiemenge,Itenso.TimePeriod.TimeRange)">
            <summary>
            Test, if the Energiemenge does have a defined value for every point in time within the given time range.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">time range to check</param>
            <returns>true iff Energiemenge has defined value for every point in time range, false otherwise</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPure(BO4E.BO.Energiemenge,System.Boolean)">
            <summary>
            shortcut for <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureMengeneinheit(BO4E.BO.Energiemenge)"/> &amp;&amp; <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureObisKennzahl(BO4E.BO.Energiemenge)"/> &amp;&amp; <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureWertermittlungsverfahren(BO4E.BO.Energiemenge)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <param name="checkUserProperties">set true, to additionally check if user properties of all entries in energieverbrauch are equal.</param>
            <returns>true iff the Energiemenge is pure in all OBIS-Kennzahl, Wertermittlungsverfahren and Mengeneinheit</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureWertermittlungsverfahren(BO4E.BO.Energiemenge)">
            <summary>
            test if Energiemenge has only one <see cref="T:BO4E.ENUM.Wertermittlungsverfahren"/>
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff the Energiemenge-&gt;energieverbrauch list has at most one distinct Wertermittlungsverfahren</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureObisKennzahl(BO4E.BO.Energiemenge)">
            <summary>
            test if Energiemenge has only one Obiskennzahl
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff the Energiemenge-&gt;energieverbrauch list has at most one distinct Obiskennzahl</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureUserProperties(BO4E.BO.Energiemenge)">
            <summary>
            test if all entries in <see cref="F:BO4E.BO.Energiemenge.energieverbrauch"/> do have same user properties.
            Only tests for those user properties present. Missing user properties do not lead to false.
            </summary>
            <param name="em">Energiemenge</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsPureMengeneinheit(BO4E.BO.Energiemenge)">
            <summary>
            test if Energiemenge has only one <see cref="T:BO4E.ENUM.Mengeneinheit"/>
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff the Energiemenge-&gt;energieverbrauch list does only contain entries with mutually convertible units</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsIntensive(BO4E.BO.Energiemenge)">
            <summary>
            opposite of <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsExtensive(BO4E.BO.Energiemenge)"/>
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff all <paramref name="em"/>-&gt;energieverbrauch entries are intensive</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.IsExtensive(BO4E.BO.Energiemenge)">
            <summary>
            Test if the energiemenge contains only extensive consumption units
            </summary>
            <param name="em">Energiemenge</param>
            <returns>true iff all <paramref name="em"/>-&gt;energieverbrauch entries are extensive</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.FixSapCDSBug(BO4E.BO.Energiemenge)">
            <summary>
            Our SAP CDS has a bug: When there's a change from non-DST to DST the <see cref="F:BO4E.COM.Verbrauch.enddatum"/> is set
            to the first second of the DST period. To 
            </summary>
            <param name="em"></param>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.HasBeenSanitized(BO4E.BO.Energiemenge)">
            <summary>
            tests if the method <see cref="M:BO4E.COM.Verbrauch.FixSapCdsBug(BO4E.COM.Verbrauch)"/> has been executed yet.
            </summary>
            <returns>true if Energiemenge has been sanitized</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge,BO4E.Reporting.CompletenessReport.CompletenessReportConfiguration)">
            <summary>
            Generate a <see cref="T:BO4E.Reporting.CompletenessReport"/> for the given configuration. Same as <see cref="!:GetCompletenessReport(BO.Energiemenge, TimeRange, Wertermittlungsverfahren, string, Mengeneinheit)"/> but with all parameters in a configuration container instead of loose arguments.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="config">configuration container</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange)">
            <summary>
            Generate a <see cref="T:BO4E.Reporting.CompletenessReport"/> for the given refenrence time frame <paramref name="reference"/>
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Generate a <see cref="T:BO4E.Reporting.CompletenessReport"/> for the given parameters.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="reference">reference time frame</param>
            <param name="wev">Wertermittlungsverfahren</param>
            <param name="obiskennzahl">OBIS Kennzahl</param>
            <param name="einheit">Mengeneinheit</param>
            <returns>the completeness report</returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge)">
            <summary>
            <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)"/>
            for pure Energiemengen within their own time range.
            </summary>
            <param name="em">Energiemenge</param>
            <returns><see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetCompletenessReport(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,BO4E.ENUM.Wertermittlungsverfahren,System.String,BO4E.ENUM.Mengeneinheit)"/></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetSlicedCompletenessReports(BO4E.BO.Energiemenge,System.Collections.Generic.IEnumerable{Itenso.TimePeriod.ITimeRange},System.Boolean)">
            <summary>
            creates a dictionary of completeness reports for a given list of reference time ranges.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="ranges">list of ranges for which the completeness reports are generated</param>
            <param name="useParallelExecution">set true to internally use parallel linq</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetDailyCompletenessReports(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,System.Boolean)">
            <summary>
            Get Daily Completeness Reports for <paramref name="overallTimeRange"/>. The magic is, that it takes DST into account!
            </summary>
            <param name="em">Energiemenge</param>
            <param name="overallTimeRange">overall time frame. Beginning and end must have same hour/minute/second</param>
            <param name="useParallelExecution">set true to internally use parallel linq</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetMonthlyCompletenessReports(BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,System.Boolean)">
            <summary>
            Get Monthly Completeness Reports for <paramref name="overallTimeRange"/>. 
            </summary>
            <param name="em">Energiemenge</param>
            <param name="overallTimeRange"></param>
            <param name="useParallelExecution">set true to internally use parallel linq</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetPlausibilityReport(BO4E.BO.Energiemenge,BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,System.Boolean)">
            <summary>
            Returns a <see cref="T:BO4E.Reporting.PlausibilityReport"/> that compares <paramref name="emReference"/> with <paramref name="emOther"/>.
            within the interval defined in <paramref name="timeframe"/>.
            </summary>
            <param name="emReference">reference Energiemenge (reference = used for normalisation)</param>
            <param name="emOther">other Energiemenge</param>
            <param name="timeframe">time frame to be analysed. If null, the overlap of <paramref name="emReference"/> and <paramref name="emOther"/> is used.</param>
            <param name="ignoreLocation">By default (false) an ArgumentException is thrown if the <see cref="F:BO4E.BO.Energiemenge.lokationsId"/> do not match. Setting this flag suppresses the error.</param>
            <returns>a <see cref="T:BO4E.Reporting.PlausibilityReport"/></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetPlausibilityReport(BO4E.BO.Energiemenge,BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration)">
            <summary>
            same as <see cref="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetPlausibilityReport(BO4E.BO.Energiemenge,BO4E.BO.Energiemenge,Itenso.TimePeriod.ITimeRange,System.Boolean)"/> but with a strongly typed container as input.
            </summary>
            <param name="config">container containing the relevant data</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetSlicedPlausibilityReports(BO4E.BO.Energiemenge,BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration,System.Collections.Generic.IEnumerable{Itenso.TimePeriod.ITimeRange})">
            <summary>
            creates a dictionary of completeness reports for a given list of reference time ranges.
            </summary>
            <param name="em">Energiemenge</param>
            <param name="ranges">list of ranges for which the completeness reports are generated</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetDailyPlausibilityReports(BO4E.BO.Energiemenge,BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration)">
            <summary>
            Get Daily Completeness Reports for overall time range defined in <paramref name="config"/>.
            The magic is, that it takes DST into account!
            </summary>
            <param name="em">Energiemenge</param>
            <param name="config">configuration that contains the overall time range in <see cref="F:BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration.timeframe"/></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.GetMonthlyPlausibilityReports(BO4E.BO.Energiemenge,BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration)">
            <summary>
            Get Monthly Completeness Reports for overall time range defined in <paramref name="config"/>. 
            </summary>
            <param name="em">Energiemenge</param>
            <param name="config">configuration that contains the overall time range in <see cref="F:BO4E.Reporting.PlausibilityReport.PlausibilityReportConfiguration.timeframe"/></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.BusinessObjects.Energiemenge.EnergiemengeExtension.AddDaysDST(System.DateTime,System.Double,System.TimeZoneInfo)">
            <summary>
            adds <paramref name="value"/> days to <paramref name="dt"/>. Adding 1 day might actually add 25 or 23 hours if the transisition DST&lt;-&gt;non-DST happens.
            </summary>
            <param name="dt">datetime (kind unspecified or Utc)</param>
            <param name="value">number of days to add</param>
            <param name="tz">timezone <paramref name="dt"/> is meant to be iff dt.Kind == DateTimeKind.Unspecified, default (if null) is <see cref="F:BO4E.COM.CentralEuropeStandardTime.CENTRAL_EUROPE_STANDARD_TIME"/></param>
            <returns></returns>
        </member>
        <member name="T:BO4E.Extensions.COM.COMExtensions">
            <summary>
            common extensions for all COM objects
            </summary>
        </member>
        <member name="M:BO4E.Extensions.COM.COMExtensions.DeepClone``1(``0)">
            <summary>
            Create a deep copy of a COMponent
            </summary>
            <typeparam name="T">Type of the COM</typeparam>
            <param name="source">the BO that is copied</param>
            <returns>the deep copy</returns>
        </member>
        <member name="T:BO4E.Extensions.COM.PhysikalischerWertExtension">
            <summary>
            extensions for <see cref="T:BO4E.COM.PhysikalischerWert"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BO4E.Extensions.COM.PhysikalischerWertExtension.ConvertToUnit(BO4E.COM.PhysikalischerWert,BO4E.ENUM.Mengeneinheit)" -->
        <member name="M:BO4E.Extensions.COM.VerbrauchExtension.Merge(BO4E.COM.Verbrauch,BO4E.COM.Verbrauch)">
            <summary>
            Merging two Verbrauch instances means adding their values whenever it's possible.
            But generally the result is going to contain multiple Verbrauchs.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.COM.VerbrauchExtension.GetTimeRange(BO4E.COM.Verbrauch)">
            <summary>
            returns time range from <see cref="F:BO4E.COM.Verbrauch.startdatum"/>, <see cref="F:BO4E.COM.Verbrauch.enddatum"/>
            </summary>
            <param name="v">Verbrauch</param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.COM.VerbrauchExtension.Detangle(System.Collections.Generic.IEnumerable{BO4E.COM.Verbrauch})">
            <summary>
            De-tangles a list of overlapping Verbrauch entries where entries can be subsets of other entries.
            </summary>
            <example>
            [---v1---)
            [-----v2------)
            [---------v3---------)
            is transformed into
            [--v1---)
            ........[-v2--)
            ..............[--v3--)
            </example>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.COM.VerbrauchExtension.ConvertToUnit(BO4E.COM.Verbrauch,BO4E.ENUM.Mengeneinheit)">
            <summary>
            convert to another unit if possible
            </summary>
            <param name="v">Verbrauch</param>
            <param name="mengeneinheit">Mengeneinheit</param>
            <throws>ArgumentException if units are not convertible</throws>
        </member>
        <member name="M:BO4E.Extensions.COM.VerbrauchExtension.OverlapsWith(BO4E.COM.Verbrauch,BO4E.COM.Verbrauch)">
            <summary>
            Test if the time ranges [startdatum, enddatum) overlap.
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>true iff [<paramref name="v1"/>.startdatum, <paramref name="v1"/>.enddatum) and [<paramref name="v2"/>.startdatum, <paramref name="v2"/>.enddatum) overlap</returns>
        </member>
        <member name="T:BO4E.Extensions.COM.VerbrauchExtension.VerbrauchDateTimeComparer">
            <summary>
            Allows to sort lists of <see cref="T:BO4E.COM.Verbrauch"/> by <see cref="F:BO4E.COM.Verbrauch.startdatum"/>, <see cref="F:BO4E.COM.Verbrauch.enddatum"/> ascending
            </summary>
        </member>
        <member name="T:BO4E.Extensions.ENUM.MengeneinheitExtenion">
            <summary>
            Extension Methods for Mengeneinheit.
            </summary>
        </member>
        <member name="F:BO4E.Extensions.ENUM.MengeneinheitExtenion.DIMENSION_SETS">
            <summary>
            This set contains sets of Mengeneinheiten that share the same dimension (e.g. time, power, work, volume)
            Einheiten in the same subset are considered convertible amongst each other.
            </summary>
        </member>
        <member name="M:BO4E.Extensions.ENUM.MengeneinheitExtenion.AreConvertible(BO4E.ENUM.Mengeneinheit,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Tests if two Mengeneinheit are convertible into each other / do have the same kind.
            </summary>
            <param name="me1"></param>
            <param name="me2"></param>
            <returns>true iff convertible</returns>
        </member>
        <member name="M:BO4E.Extensions.ENUM.MengeneinheitExtenion.IsConvertibleTo(BO4E.ENUM.Mengeneinheit,BO4E.ENUM.Mengeneinheit)">
            <summary>
            Similar to AreConvertible but as extension method for me1
            </summary>
            <param name="me1"></param>
            <param name="me2"></param>
            <returns></returns>
        </member>
        <member name="M:BO4E.Extensions.ENUM.MengeneinheitExtenion.IsIntensive(BO4E.ENUM.Mengeneinheit)">
            <summary>
            Is the Mengeneinheit intensive?
            </summary>
            <param name="me"></param>
            <returns>true iff not extensive</returns>
        </member>
        <member name="M:BO4E.Extensions.ENUM.MengeneinheitExtenion.IsExtensive(BO4E.ENUM.Mengeneinheit)">
            <summary>
            is the Mengeneinheit extensive?
            </summary>
            <param name="me"></param>
            <returns>true iff extensive</returns>
        </member>
        <member name="M:BO4E.Extensions.ENUM.MengeneinheitExtenion.GetConversionFactor(BO4E.ENUM.Mengeneinheit,BO4E.ENUM.Mengeneinheit)">
            <summary>
            returns the factor that is needed to convert an amount in unit <paramref name="me1"/> to an equivalent amount in unit <paramref name="me2"/>.
            </summary>
            <param name="me1">source unit</param>
            <param name="me2">target unit</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">iff units do not have the same dimension</exception>
        </member>
    </members>
</doc>
